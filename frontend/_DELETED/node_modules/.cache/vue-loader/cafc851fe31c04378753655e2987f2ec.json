{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\item\\item-templates.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\item\\item-templates.vue","mtime":1598333584925},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\";\nimport { RichSelectModule } from '@ag-grid-enterprise/rich-select';\nimport { MenuModule } from '@ag-grid-enterprise/menu';\nimport { ColumnsToolPanelModule } from '@ag-grid-enterprise/column-tool-panel';\nimport { SetFilterModule } from '@ag-grid-enterprise/set-filter';\nimport { AllCommunityModules } from '@ag-grid-community/all-modules';\nimport { MasterDetailModule } from '@ag-grid-enterprise/master-detail';\n\nexport default {\n  metaInfo: {    \n    title: \"Templates\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      columnDefsMod: null,\n      rowData: null,\n      rowDataMod: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: [\n        ClientSideRowModelModule,\n        SetFilterModule,\n        RichSelectModule,\n        MenuModule,\n        ColumnsToolPanelModule,\n        MasterDetailModule,\n      ],\n      templates: [],\n      show: false,\n      visible: false,\n      date: null,\n      next: null,\n      error: false,\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Model Name\", field: \"txtModelName\", filter: 'agTextColumnFilter', checkboxSelection: true,},\n      {headerName: \"Manufacturer\", field: \"idManufacturer.txtManufacturerName\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Supplier\", field: \"idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false},\n    ],\n    this.defaultColDef = {\n      flex: 1,\n      editable: true,\n      resizable: true,\n      sortable: true,\n      filter: true,\n      floatingFilter: true,\n    };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n  },\n  mounted() {\n    this.gridApi = this.gridOptions.api;\n    this.gridColumnApi = this.gridOptions.columnApi;\n  },\n  methods: {\n    autoSizeAll(skipHeader) {\n      var allColumnIds = [];\n      this.gridColumnApi.getAllColumns().forEach(function(column) {\n        allColumnIds.push(column.colId);\n      });\n      this.gridColumnApi.autoSizeColumns(allColumnIds, skipHeader);\n    },\n    async cellValueChanged(event) {     \n      let endpoint = `/api/model/${event.node.data.id}/`;\n      console.log(event.node.data.id)\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtModelName: event.node.data.txtModelName,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    onGridReady(params) { \n      // this.autoSizeAll(false);\n    },\n    getTemplates() {\n      if (!this.error) {\n        let endpoint = `/api/device-template/`;\n        apiService(endpoint)\n          .then(data => {\n            this.templates.push(...data.results);\n          })\n      }\n    },\n    // addTemplates() {\n    //   if (this.MName) {\n    //     let endpoint = `/api/device-template/`;\n    //     apiService(endpoint, \"POST\", { \n    //       txtModelName: this.MName,\n    //       idManufacturer: this.Manufacturer,\n    //       idSupplier: this.Supplier,\n    //       })\n    //       .then(data => {\n    //         if (data) {\n    //           console.log(data)\n    //           this.models.unshift(data)\n    //         } else {\n    //           this.error = true;\n    //         }\n    //       })\n    //     this.emptyInput();\n    //     if (this.error) {\n    //       this.error = false;\n    //     }\n    //     } else {\n    //       this.error = true;\n    //     }\n    // },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Template?\", {\n          title: \"Please Confirm\",\n          size: \"sm\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteModel();\n          }\n        })\n    },\n    async deleteModel() {\n      var selectedRows = this.gridApi.getSelectedRows();\n      let endpoint = `/api/device-template/${selectedRows[0].id}/`;\n      try {\n        var index = this.templates.map(function(e) { return e.id; }).indexOf(selectedRows[0].id);\n        this.$delete(this.templates, index)\n        await apiService(endpoint, \"DELETE\")\n        this.show = this.show ? false : true\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    // emptyInput() {\n    //   this.MName = '',\n    //   this.Manufacturer = [],\n    //   this.Supplier = [],\n\n    //   this.$root.$emit('bv::toggle::collapse', 'collapse-e')\n    // },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n  },\n  created() {\n    this.getTemplates();\n    this.getDateToday();\n  },\n};\n",null]}