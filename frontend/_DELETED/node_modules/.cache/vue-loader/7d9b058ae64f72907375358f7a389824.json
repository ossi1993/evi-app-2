{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\item\\item-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\item\\item-list.vue","mtime":1602249105274},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\nimport InputTag from 'vue-input-tag'\n\nexport default {\n  metaInfo: {    \n    title: \"Item\"\n  },\n  components: {\n    AgGridVue, InputTag\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      gridColumnApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: AllModules,\n\n      // AG-GRID ATTRIBUTES VARIABLES\n      gridOptions1: null,\n      gridApi1: null,\n      gridColumnApi1: null,\n      defaultColDef1: null,\n      columnDefs1: null,\n      rowData1: null,\n      defaultColDef1: null,\n      paginationPageSize1: 0,\n\n      // VUE ATTRIBUTE VARIABLES\n      updateAttributeId: null,\n      updateAttributeStatus: false,\n      KeyAtt: null,\n      NameAtt: null,\n      ValueAtt: null,\n      ValueType: null,\n      Parameter: null,\n      ParameterTags: [],\n      optionsTypes: [\n        { value: 'Integer', text: 'Counter' },\n        { value: 'Float', text: 'Measure' },\n        { value: 'String', text: 'Text' },\n        { value: 'Boolean', text: 'True/False' },\n        { value: 'Select', text: 'Select' },\n      ],\n      optionsUnits: [\n        { value: 'µm', text: 'µm' },\n        { value: 'mm', text: 'mm' },\n        { value: 'cm', text: 'cm' },\n        { value: 'mg', text: 'mg' },\n        { value: 'g', text: 'g' },\n        { value: 'ml', text: 'ml' },\n        { value: 'inch', text: 'inch' },\n        { value: 'oz', text: 'oz' },\n      ],\n      \n      // VUE VARIABLES\n      items: [],\n      attributes: [],\n      tempAttributes: [],\n      models: [],\n      standardAttributes: [],\n      filteredStandardAttributes: [],\n      itemTypes: [],\n      itemGroups: [],\n      show: false,\n      selectedModels: null,\n      selectedAttributes: [],\n      filteredAttributes: [],\n      attValue: null,\n\n      ArtNum: null,\n      Description: null,\n      ItemType: null,\n      Version: null,\n      Cost: null,\n      GtinEan: null,\n      ItemGroup:null,\n      Link: null,\n      Comment: null,\n      date: null,\n      error: false,\n      updateStatus: false,\n      updateId: null,\n      selectedItem: false,\n      optionsItemGroup: [\n        { code: '2D', label: '2D' },\n        { code: '3D', label: '3D' },\n        { code: 'FC', label: 'Full Cover' },\n      ],\n      optionsModels: [],\n      optionAttributes: [],\n      optionBoolean: [\n        { code: 'true', label: 'Yes' },\n        { code: 'false', label: 'No' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.gridOptions1 = {};\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.columnDefs = [\n      {headerName: \"Article Number\", field: \"txtArticleNumber\", filter: 'agTextColumnFilter', cellRenderer: 'agGroupCellRenderer', checkboxSelection: true,},\n      {headerName: \"Item Description\", field: \"txtDescription\", filter: 'agTextColumnFilter', width: 300,},\n      {headerName: \"Item Type\", field: \"idItemType.txtItemType\", filter: 'agTextColumnFilter', editable: false, },\n      {headerName: \"Item Group\", field: \"idItemGroup.txtItemGroup\", filter: 'agTextColumnFilter',},\n      {headerName: \"Version\", field: \"txtVersion\", filter: 'agTextColumnFilter',},\n      {headerName: \"Cost\", field: \"curCost\", filter: 'agTextColumnFilter', hide: true,},\n      {headerName: \"GTIN / EAN\", field: \"txtGtinEan\", filter: 'agTextColumnFilter',},\n      {headerName: \"Link\", field: \"txtLink\", filter: 'agTextColumnFilter', editable: false,},\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ],\n    this.columnDefs1 = [\n      {headerName: \"Key Attribute\", field: \"txtKeyAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Name Attribute\", field: \"txtNameAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Attribute\", field: \"txtValueAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Type\", field: \"txtValueType\", filter: 'agTextColumnFilter', },\n      {headerName: \"Parameter\", field: \"txtParameter\", filter: 'agTextColumnFilter', },\n    ],\n    this.defaultColDef = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef1 = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.detailCellRendererParams = {\n      detailGridOptions: {\n        rowSelection: 'single',\n        suppressRowClickSelection: true,\n        enableRangeSelection: true,\n        pagination: true,\n        paginationAutoPageSize: true,\n        columnDefs: [\n          { field: 'txtModelName', headerName: 'Model Name' },\n          { field: 'txtModelStatus', headerName: 'Model Status' },\n          { field: 'txtComment', headerName: 'Memo' },\n          ],\n        defaultColDef: { flex: 1, resizable: true, },\n      },\n      getDetailRowData: (params) => {\n        params.successCallback(params.data.idModel);\n      },\n    }\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.paginationPageSize1 = 10;\n  },\n  mounted() {\n    if(localStorage.getItem('selModel')) {\n      this.emptyInput('add');\n      this.selectedModels = JSON.parse(localStorage.getItem('selModel'));\n    }\n    if (JSON.parse(localStorage.getItem('itemList_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('itemList_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  beforeRouteLeave (to, from, next) {\n      localStorage.removeItem('selModel')\n      next();\n  },\n  computed: {\n    disabled: function () {\n      return !this.ArtNum ? true : !this.Description ? true : !this.ItemType ? true : !this.Version ? true : !this.ItemGroup ? true : !this.selectedModels ? true : false; \n    },\n  },\n  methods: {\n    saveState() {\n      localStorage.setItem('itemList_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('itemList_columnStats', null);\n    },\n    getModelIds() {\n      let el = this.selectedModels.map(e => e.id);\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onSubmit() {\n      if(!this.updateStatus) { this.addItem();\n      } else { this.updateItem(); }\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onRowSelectedItem(event) {\n      this.rowData1 = null;\n      this.selectedItem = this.selectedItem ? false : true\n      if(event.node.selected == true) {\n        this.getAttributes(event.data.id);\n        window.localStorage.setItem('selItem', event.node.data.id)\n      } else {\n        this.attributes = [];\n      }\n    },\n    onGridReady(params) { \n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi\n    },\n    onGridReady1(params) {\n      this.gridApi1 = params.api;\n      this.gridColumnApi1 = params.columnApi\n    },\n    getParameter(params) {\n      if(params.node.data.txtValueType == 'Select') {\n        this.ParameterTags = params.node.data.txtParameter.split(',');\n      } else {\n        this.Parameter = params.node.data.txtParameter;\n      }\n    },\n    setParameter() {\n      let val;\n      if(this.ValueType == 'Select') {\n        return val = this.ParameterTags.toString();\n      } else if(this.ValueType == 'Boolean') {\n        this.ValueAtt = 'false'\n        return val = null;\n      } else if(this.ValueType == 'String') {\n        return val = null;\n      } else {\n        return val = this.Parameter.toString();\n      }\n    },\n    addItem() {\n      if (this.ArtNum) {\n        let models = this.selectedModels.map(e => e.id)\n        console.log(models)\n        console.log(this.ItemType.id)\n        console.log(this.ItemGroup.id)\n        let endpoint = `/api/item/`;\n        apiService(endpoint, \"POST\", {\n          idItemType: this.ItemType.id,\n          idItemGroup: this.ItemGroup.id,\n          txtArticleNumber: this.ArtNum,\n          txtDescription: this.Description,\n          txtVersion: this.Version,\n          curCost: this.Cost,\n          txtGtinEan: this.GtinEan,\n          txtLink: this.Link,\n          txtComment: this.Comment,\n          idModel: models,\n          })\n          .then(response => {\n            if (response != 'ERROR'){\n              for (let i = 0; i < this.selectedAttributes.length; i++) {\n                const el = this.selectedAttributes[i];\n                let endpointAttributes = `/api/item-attribute/`;\n                apiService(endpointAttributes, \"POST\", { \n                  txtKeyAttribute: el.txtKeyAttribute, \n                  txtNameAttribute: el.txtNameAttribute, \n                  txtValueAttribute: el.txtValueDefault, \n                  txtValueType: el.txtValueType, \n                  txtParameter: el.txtParameter,\n                  idItem: response.id,\n                })\n              };\n              this.getItems();\n              this.emptyInput()\n            } else {\n              this.error = true;\n            }\n          })\n          .catch(err => console.log(err));\n        if (this.error) {\n          this.error = false;\n        }\n      }\n    },\n    editItemMenu(params) {\n      this.emptyInput();\n      let sel = params.node.data;\n      let models = sel.idModel;\n      this.selectedModels = models;\n      this.ItemType = sel.idItemType;\n      this.ItemGroup = sel.idItemGroup;\n      this.ArtNum = sel.txtArticleNumber;\n      this.Description = sel.txtDescription;\n      this.Version = sel.txtVersion;\n      this.Cost = sel.curCost;\n      this.GtinEan = sel.txtGtinEan;\n      this.Link = sel.Link;\n      this.Comment = sel.Comment;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.getAttributes()\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    editAttributeMenu(params) {\n      this.emptyAttributeInput();\n      let sel = params.node.data;\n      this.getParameter(params);\n      this.KeyAtt = sel.txtKeyAttribute;\n      this.NameAtt = sel.txtNameAttribute;\n      this.ValueAtt = sel.txtValueAttribute;\n      this.ValueType = sel.txtValueType;\n      this.updateAttributeStatus = true;\n      this.updateAttributeId = sel.id;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateItemGrid(event) {     \n      let endpoint = `/api/item/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtArticleNumber: event.node.data.txtArticleNumber,\n          txtDescription: event.node.data.txtDescription,\n          idItemType: event.node.data.idItemType,\n          idItemGroup: event.node.data.idItemGroup,\n          txtVersion: event.node.data.txtVersion,\n          curCost: event.node.data.curCost,\n          txtGtinEan: event.node.data.txtGtinEan,\n          txtLink: event.node.data.txtLink,\n          txtComment: event.node.data.txtComment,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async updateAttributeGrid(event) {     \n      let endpoint = `/api/item-attribute/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtKeyAttribute: event.node.data.txtKeyAttribute,\n          txtNameAttribute: event.node.data.txtNameAttribute,\n          txtValueAttribute: event.node.data.txtValueAttribute,\n          txtValueType: event.node.data.txtValueType,\n          txtParameter: event.node.data.txtParameter,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async updateItem() {\n      let models = this.selectedModels.map(e => e.id);\n      let endpoint = `/api/item/${this.updateId}/`;\n      await apiService(endpoint, \"PUT\", { \n        txtArticleNumber: this.ArtNum,\n        txtDescription: this.Description,\n        idItemType: this.ItemType.id,\n        idItemGroup: this.ItemGroup.id,\n        txtVersion: this.Version,\n        curCost: this.Cost,\n        txtGtinEan: this.GtinEan,\n        txtLink: this.Link,\n        txtComment: this.Comment,\n        idModel: models,})\n        .then(response => {\n          if (response != 'ERROR'){\n            // ADD ATTRIBUTE\n            for (let i = 0; i < this.selectedAttributes.length; i++) {\n              let el = this.selectedAttributes[i];\n              let endpointAttributes = `/api/item-attribute/`;\n              apiService(endpointAttributes, \"POST\", { \n                txtKeyAttribute: el.txtKeyAttribute, \n                txtNameAttribute: el.txtNameAttribute, \n                txtValueAttribute: el.txtValueDefault, \n                txtValueType: el.txtValueType, \n                txtParameter: el.txtParameter,\n                idItem: response.id,\n              })\n            }\n            // UPDATE ATTRIBUTE\n            for (let i = 0; i < this.filteredAttributes.length; i++) {\n              let el = this.filteredAttributes[i];\n              let endpointAttributes = `/api/item-attribute/${el.id}/`;\n              apiService(endpointAttributes, \"PUT\", { \n                txtKeyAttribute: el.txtKeyAttribute, \n                txtNameAttribute: el.txtNameAttribute, \n                txtValueAttribute: el.txtValueAttribute, \n                txtValueType: el.txtValueType, \n                txtParameter: el.txtParameter,\n                idItem: response.id,\n              })\n            };\n            this.selectedItem = false;\n            this.attributes = [];\n            this.emptyInput();\n            this.getItems();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    async updateItemAttribute() {\n      let endpoint = `/api/item-attribute/${this.updateAttributeId}/`;\n      await apiService(endpoint, \"PATCH\", { txtParameter: this.setParameter(), txtKeyAttribute: this.KeyAtt,\n        txtNameAttribute: this.NameAtt, txtValueAttribute: this.ValueAtt, txtValueType: this.ValueType, })\n        .then(response => {\n          this.rowData = null;\n          this.rowData1 = null;\n          this.emptyAttributeInput();\n          this.getItems();\n        })\n        .catch(err => console.log(err));\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Item? => \" + params.node.data.txtArticleNumber, {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { if (value) { this.deleteItem(params); }})\n        .catch(err => console.log(err));\n    },\n    openModal1(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Do you really want to delete the Attribute? => \" + params.node.data.txtNameAttribute, {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { if (value) { this.deleteAttribute(params); }})\n        .catch(err => console.log(err));\n    },\n    async deleteItem(params) {\n      let endpoint = `/api/item/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getItems();\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false\n            })\n          }\n        })\n    },\n    async deleteAttribute(params) {\n      let endpoint = `/api/item-attribute/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            let id = window.localStorage.getItem('selItem');\n            this.getAttributes(id);\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false\n            })\n          }\n        })\n    },\n    emptyInput(event) {\n      this.ItemType = this.ItemGroup = this.selectedModels = this.selectedAttributes = [];\n      this.ArtNum = this.Description = this.Version = this.Cost = this.GtinEan = this.Link = this.Comment = null;\n      if(event != 'add') {\n        this.show = false;\n      } else {\n        this.updateStatus = false;\n        this.show = !this.show;\n      }\n    },  \n    emptyAttributeInput(event) {\n      this.KeyAtt = this.NameAtt = this.ValueAtt = this.ValueType = this.Parameter = null;\n      this.ParameterTags = [];\n      this.updateAttributeStatus = false;\n    },\n    emptyLastValueType(event) {\n      this.ValueDef = this.Parameter = null;\n      this.ParameterTags = [];\n    },\n    getParameterTags(params) {\n      return params.split(',');\n    },\n    getStandardAttributes(type) {\n      this.standardAttributes = []\n      this.selectedAttributes = [];\n      if(type != null && !this.updateStatus) {\n        let endpoint = `/api/standard-attribute-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.standardAttributes.push(...data.results);\n            for (let i = 0; i < this.standardAttributes.length; i++) {\n              let el = this.standardAttributes[i];\n              if(el.idItemType.txtItemType == type.txtItemType) {\n                this.selectedAttributes.push(el.idKeyAttribute)\n              }\n            }\n          })\n      }\n    },\n    getItems() {\n      if (!this.error) {\n        this.items = [];\n        let endpoint = `/api/item-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.items.push(...data.results);\n            this.rowData = this.items\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getItemTypes() {\n      this.itemTypes = [];\n      let endpoint = `/api/item-type/`;\n      apiService(endpoint)\n        .then(data => { this.itemTypes.push(...data.results); })\n        .catch(err => console.log(err));\n    },\n    getItemGroups(type) {\n      this.itemGroups = [];\n      if(type != null && !this.updateStatus) {\n        this.itemGroups = [];\n        let endpoint = `/api/item-group/`;\n        apiService(endpoint)\n          .then(data => { \n            this.itemGroups.push(...data.results);\n            this.itemGroups = this.itemGroups.filter(e => e.idItemType === type.id);\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getAttributes(val) {\n      if (!this.error) {\n        this.attributes = [];\n        let endpoint = `/api/item-attribute/`;\n        apiService(endpoint)\n          .then(data => {\n            this.attributes.push(...data.results);\n            if(this.updateId != null) {\n              this.filteredAttributes = this.attributes.filter(e => e.idItem == this.updateId)\n            }\n            if(val != null) {\n              this.rowData1 = this.attributes.filter(e => e.idItem == val)\n            }\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getTemplateAttributes() {\n      if (!this.error) {\n        this.tempAttributes = [];\n        let endpoint = `/api/item-template-attribute/`;\n        apiService(endpoint)\n          .then(data => {\n            this.tempAttributes.push(...data.results);\n            this.optionAttributes = this.tempAttributes\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getModels() {\n      if (!this.error) {\n        this.models = [];\n        let endpoint = `/api/model/`;\n        apiService(endpoint)\n          .then(data => {\n            this.models.push(...data.results);\n            this.optionsModels = this.models\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Item',\n          action: () => this.editItemMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Item',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n    getContextMenu1(params) {\n      var result = [\n        {\n          name: 'Edit Attribute',\n          action: () => this.editAttributeMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Attribute',\n          action: () => this.openModal1(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getItems();\n    this.getModels();\n    this.getDateToday();\n    this.getTemplateAttributes();\n    this.getItemTypes();\n  },\n};\n\n",null]}