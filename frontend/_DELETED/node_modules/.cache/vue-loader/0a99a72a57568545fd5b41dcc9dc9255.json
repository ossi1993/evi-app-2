{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\templates.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\templates.vue","mtime":1600268237970},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Template\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      columnDefsAtt: null,\n      rowData: null,\n      rowDataMod: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      excelStyles: null,\n      modules: AllModules,\n\n      // VUE VARIABLES\n      templates: [],\n      attributes: [],\n      typeAttributes: [],\n      selectedAttributes: [],\n      selAtt1: [],\n      selAtt2: [],\n      selAtt3: [],\n      selAtt4: [],\n      show: false,\n      visible: false,\n      TempName: '',\n      Type: '',\n      IType: null,\n      date: null,\n      next: null,\n      error: false,\n      optionsItemTypes: [\n        { value: 'Glass', text: 'Glass' },\n        { value: 'Case', text: 'Case' },\n        { value: 'Frame Standard', text: 'Frame Standard' },\n        { value: 'Frame Eco', text: 'Frame Eco' },\n      ],\n      optionsType: [\n        { value: 'MF', text: 'Mess & Funktionsprüfung' },\n        { value: 'CH', text: 'Chemische Prüfung' },\n        { value: 'PH', text: 'Physikalische Prüfung' },\n        { value: 'CA', text: 'Case Prüfung' },\n        { value: 'FR', text: 'Frame Prüfung' },\n      ],\n      optionsAttributes: [],\n      optionAttsGlass: [],\n      optionAttsCase: [],\n      optionAttsFrameStandard: [],\n      optionAttsFrameEco: [],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Template Name\", field: \"txtInspectionTemplateName\", filter: 'agTextColumnFilter', cellRenderer: 'agGroupCellRenderer', checkboxSelection: true,},\n      {headerName: \"Template Type\", field: \"txtInspectionTemplateType\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', \n        cellEditorParams: { cellHeight: 50, values: ['MF', 'CH', 'PH', 'CA', 'FR']}, },\n    ],\n    this.defaultColDef = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.detailCellRendererParams = {\n      detailGridOptions: {\n        rowSelection: 'single',\n        suppressRowClickSelection: true,\n        enableRangeSelection: true,\n        pagination: true,\n        paginationAutoPageSize: 20,\n        columnDefs: [\n          {headerName: \"Item Type\", field: \"txtItemType\",},\n          {headerName: \"Attribute Key\", field: \"txtKeyAttribute\",},\n          {headerName: \"Attribute Name\", field: \"txtNameAttribute\",},\n          {headerName: \"Default Value\", field: \"txtValueDefault\",},\n          {headerName: \"Value Type\", field: \"txtValueType\",},\n          {headerName: \"Measure Unit\", field: \"txtMeasureUnit\",},\n        ],\n        defaultColDef: { flex: 1, editable: true, resizable: true, },\n      },\n      getDetailRowData: params => {\n        params.successCallback(params.data.idInspectionTemplateAttribute);\n      },\n    }\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n  },\n  mounted() {\n    if (window.InspectionTemplateColState)\n       this.gridOptions.columnApi.setColumnState(window.InspectionTemplateColState);\n    else\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n  },\n  computed: {\n    disabled: function () {\n      return !this.TempName ? true : !this.Type ? true : !this.IType ? true : false; \n    },\n  },\n  methods: {\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    saveState() {\n      window.InspectionTemplateColState = this.gridOptions.columnApi.getColumnState();\n    },\n    restoreState() {\n      window.InspectionTemplateColState = null;\n    },\n    onChange(event) {\n      this.typeAttributes = [];\n      this.optionAttsGlass = [];\n      this.optionAttsCase = [];\n      this.optionAttsFrame = [];\n      let endpoint = `/api/inspection-template-attribute/`;\n      apiService(endpoint)\n      .then(data => {\n        this.typeAttributes.push(...data.results);\n        for (let i = 0; i < event.length; i++) {\n          let element = event[i];\n          if(element.value == 'Glass' && this.optionAttsGlass == '') {\n            this.optionAttsGlass = this.typeAttributes.filter(el => el.txtItemType == element.value)\n          } else if(element.value == 'Case' && this.optionAttsCase == '') {\n            this.optionAttsCase = this.typeAttributes.filter(el => el.txtItemType == element.value)\n          } else if(element.value == 'Frame Standard' && this.optionAttsFrame == '') {\n            this.optionAttsFrameStandard = this.typeAttributes.filter(el => el.txtItemType == element.value)\n          } else if(element.value == 'Frame Eco' && this.optionAttsFrame == '') {\n            this.optionAttsFrameEco = this.typeAttributes.filter(el => el.txtItemType == element.value)\n          }\n        }\n      })\n    },\n    async cellValueChanged(event) {     \n      let endpoint = `/api/inspection-template/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtInspectionTemplateName: event.node.data.txtInspectionTemplateName,\n          txtInspectionTemplateType: event.node.data.txtInspectionTemplateType,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    getTemplates() {\n      if (!this.error) {\n        this.templates = [];\n        let endpoint = `/api/inspection-template-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.templates.push(...data.results);\n            this.rowData = this.templates\n          })\n      }\n    },\n    getAttributes() {\n      if (!this.error) {\n        this.attributes = [];\n        let endpoint = `/api/inspection-template-attribute/`;\n        apiService(endpoint)\n          .then(data => {\n            this.attributes.push(...data.results);\n          })\n      }\n    },\n    addTemplate() {\n      let selectedAttributes = this.selAtt1.concat(this.selAtt2, this.selAtt3, this.selAtt4)\n      let endpoint = `/api/inspection-template/`;\n      apiService(endpoint, \"POST\", { \n        txtInspectionTemplateName: this.TempName,\n        txtInspectionTemplateType: this.Type.value,\n        idInspectionTemplateAttribute: selectedAttributes, })\n        .then(response => {\n          if (response){\n            this.getTemplates();\n            this.emptyInput();\n          } else {\n            this.error = true;\n          }\n        })\n      if (this.error) {\n        this.error = false;\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Template?\", {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteTemplate();\n          }\n        })\n    },\n    async deleteTemplate() {\n      var selectedRows = this.gridApi.getSelectedRows();\n      let endpoint = `/api/inspection-template/${selectedRows[0].id}/`;\n      try {\n        var index = this.items.map(function(e) { return e.id; }).indexOf(selectedRows[0].id);\n        this.$delete(this.templates, index)\n        await apiService(endpoint, \"DELETE\")\n        this.show = this.show ? false : true\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    createInspection() {\n      var selectedRows = this.gridApi.getSelectedRows();\n      localStorage.setItem('ITempID', selectedRows[0].id)\n      this.$router.push('inspection')\n    },\n    deleteTempId() {\n      localStorage.removeItem('ITempID')\n    },\n    emptyInput() {\n      this.TempName = '',\n      this.Type = null,\n      this.IType = null,\n      this.selAtt = null,\n      this.optionAttsGlass = [],\n      this.optionAttsCase = [],\n      this.optionAttsFrame = [],\n      this.$root.$emit('bv::toggle::collapse', 'collapse-e')\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n  },\n  created() {\n    this.getTemplates();\n    this.getAttributes();\n    this.getDateToday();\n    this.deleteTempId();\n  },\n};\n",null]}