{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\results.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\results.vue","mtime":1602182772853},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Inspection\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID INSPECTION VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      modules: AllModules,\n      domLayout: null,\n      paginationPageSize: 0,\n      params: null,\n      eGui: null,\n\n      // VUE VARIABLES\n      results: [],\n      orderItems: [],\n      samples: [],\n      optionSamples: [],\n      models: [],\n      inspections: [],\n      suppliers: [],\n\n      Directory: null,\n      ReleasedBy: null,\n      ReleaseDate: null,\n      ReleaseStatus: null,\n      Reference: false,\n      Link: null,\n      Comment: null,\n      OrderItem: null,\n      Sample: null,\n      Model: null,\n      Inspection: null,\n      Supplier: null,\n      show: false,\n      date: null,\n      error: false,\n      selectSample: false,\n      updateStatus: false,\n      updateId: null,\n      optionReference: [\n        { code: true, label: 'Yes' },\n        { code: false, label: 'No' },\n      ],\n      optionReleaseStatus: [\n        { code: 'Approved', label: 'Approved' },\n        { code: 'Not Approved', label: 'Not Approved' },\n        { code: 'Cancelled', label: 'Cancelled' },\n      ]\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Released by\", field: \"txtReleasedBy\", filter: 'agTextColumnFilter', },\n      {headerName: \"Release Date\", field: \"datReleaseDate\", filter: 'agTextColumnFilter', editable: false, },\n      {headerName: \"Release Status\", field: \"txtReleaseStatus\", filter: 'agTextColumnFilter', \n      cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Approved', 'Not Approved', 'Cancelled']}},\n      {headerName: \"Reference\", field: \"blnReference\", filter: 'agTextColumnFilter', valueGetter: blnValueGetter, editable: false, },\n      {headerName: \"Model\", field: \"idModel.txtModelName\", filter: 'agTextColumnFilter', editable: false, },\n      {headerName: \"Supplier\", field: \"idSample.idOrderItem.idOrder.idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false, },\n      {headerName: \"Sample\", field: \"idSample.idOrderItem.idItem.txtDescription\", filter: 'agTextColumnFilter', editable: false, },\n      {headerName: \"Inspection\", field: \"idSample.idInspection.txtInspectionNumber\", filter: 'agTextColumnFilter', editable: false, },\n      {headerName: \"Link\", field: \"txtLink\", filter: 'agTextColumnFilter', editable: false, },\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', editable: false, },\n    ],\n    this.defaultColDef = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('result_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('result_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  computed: {\n    disabled: function() {\n      return !this.ReleasedBy ? true : !this.ReleaseDate ? true : !this.ReleaseStatus ? true : !this.Sample ? true : !this.Model ? true : false;\n    },\n  },\n  methods: {\n    getSample() {\n      if(this.OrderItem != null && this.Inspection != null) {\n        this.getSamples(this.OrderItem.id, this.Inspection.id);\n        if(this.optionSamples != null)\n          this.selectSample = true;\n      } else {\n        this.selectSample = false;\n        this.samples = [];\n      }\n    },\n    saveState() {\n      localStorage.setItem('result_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('result_columnStats', null);\n    },\n    excelExportResult() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onSubmit() {\n      if(!this.updateStatus) { this.addResult();\n      } else { this.updateResult(); }\n    },\n    onGridReady(params) { \n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridOptions.paginationSetPageSize(Number(value));\n    },\n    addResult() {\n      let endpoint = `/api/result/`;\n      apiService(endpoint, \"POST\", { \n        txtReleasedBy: this.ReleasedBy,\n        datReleaseDate: this.ReleaseDate,\n        txtReleaseStatus: this.ReleaseStatus,\n        blnReference: this.Reference,\n        txtLink: this.Link,\n        txtComment: this.Comment,\n        idSample: this.Sample.id,\n        idModel: this.Model.id,\n        })\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getResults();\n            this.emptyInput()\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    editResultMenu(params) {\n      this.emptyInput();\n      let sel = params.node.data;\n      this.ReleasedBy = sel.txtReleasedBy;\n      this.ReleaseDate = sel.datReleaseDate;\n      this.ReleaseStatus = sel.txtReleaseStatus;\n      this.Reference = sel.blnReference;\n      this.Link = sel.txtLink;\n      this.Comment = sel.txtComment;\n      this.Sample = sel.idSample;\n      this.Model = sel.idModel;\n      this.OrderItem = sel.idSample.idOrderItem;\n      this.Inspection = sel.idSample.idInspection;\n      this.Supplier = sel.idSample.idOrderItem.idOrder.idSupplier;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateResult() {\n      let endpoint = `/api/result/${this.updateId}/`;\n      await apiService(endpoint, \"PATCH\", { \n        txtReleasedBy: this.ReleasedBy,\n        datReleaseDate: this.ReleaseDate,\n        txtReleaseStatus: this.ReleaseStatus,\n        blnReference: this.Reference,\n        txtLink: this.Link,\n        txtComment: this.Comment,\n        idSample: this.Sample.id,\n        idModel: this.Model.id,\n        })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.emptyInput();\n            this.getResults();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    async updateResultGrid(event) {     \n      let endpoint = `/api/result/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtReleasedBy: event.node.data.txtReleasedBy,\n          datReleaseDate: event.node.data.datReleaseDate,\n          txtReleaseStatus: event.node.data.txtReleaseStatus,\n          blnReference: event.node.data.blnReference,\n          txtLink: event.node.data.txtLink,\n          txtComment: event.node.data.txtComment,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Result?\", {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { if (value) { this.deleteResult(params); } })\n        .catch(err => console.log(err));\n    },\n    async deleteResult(params) {\n      let endpoint = `/api/result/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getResults();\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false\n            })\n          }\n        })\n    },\n    emptyInput(event) {\n      this.ReleasedBy = this.ReleaseDate = this.ReleaseStatus = this.Reference = this.Link = null;\n      this.Comment = this.Sample = this.Model = this.Inspection = this.OrderItem = this.Supplier = null;\n      if(event != 'add') {\n        this.show = false;\n      } else {\n        this.updateStatus = false;\n        this.show = !this.show;\n      }\n    },\n    getResults() {\n      this.results = [];\n      let endpoint = `/api/result-list/`;\n      apiService(endpoint)\n        .then(data => {\n          this.results.push(...data.results);\n          this.rowData = this.results\n        })\n        .catch(err => console.log(err));\n    },\n    getSamples(id1, id2) {\n      this.samples = [];\n      let endpoint = `/api/sample-list/`;\n      apiService(endpoint)\n        .then(data => {\n          this.samples.push(...data.results);\n          this.optionSamples = this.samples.filter(e => e.idOrderItem.id === id1 && e.idInspection.id === id2);\n        })\n        .catch(err => console.log(err));\n    },\n    getOrderItem() {\n      this.orderItems = [];\n      let endpoint = `/api/order-item-list/`;\n      apiService(endpoint)\n        .then(data => {this.orderItems.push(...data.results);})\n        .catch(err => console.log(err));\n    },\n    getModels() {\n      this.models = [];\n      let endpoint = `/api/model/`;\n      apiService(endpoint)\n        .then(data => {this.models.push(...data.results);})\n        .catch(err => console.log(err));\n    },\n    getInspections() {\n      this.inspections = [];\n      let endpoint = `/api/inspection/`;\n      apiService(endpoint)\n        .then(data => {this.inspections.push(...data.results);})\n        .catch(err => console.log(err));\n    },\n    getSuppliers() {\n      this.suppliers = [];\n      let endpoint = `/api/supplier/`;\n      apiService(endpoint)\n        .then(data => {this.suppliers.push(...data.results);})\n        .catch(err => console.log(err));\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Result',\n          action: () => this.editResultMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Result',\n          action: () => this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getDateToday();\n    this.getResults();\n    this.getModels();\n    this.getInspections();\n    this.getSuppliers();\n    this.getOrderItem();\n  },\n};\n\nwindow.blnValueGetter = function(params) {\n  return !params.data.blnReference ? 'No' : 'Yes'\n}\n\n",null]}