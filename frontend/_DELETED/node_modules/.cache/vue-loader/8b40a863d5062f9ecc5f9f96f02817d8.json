{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\order\\order-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\order\\order-list.vue","mtime":1602160651878},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\nimport InputTag from 'vue-input-tag'\n\nexport default {\n  metaInfo: {    \n    title: \"Orders\"\n  },\n  components: {\n    AgGridVue, InputTag\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: AllModules,\n      paginationPageSize: null,\n\n      // AG-GRID ITEM VARIABLES\n      gridOptions1: null,\n      gridApi1: null,\n      columnApi1: null,\n      columnDefs1: null,\n      rowData1: null,\n      defaultColDef1: null,\n\n      // AG-GRID DEVICE VARIABLES\n      gridOptions2: null,\n      gridApi2: null,\n      columnApi2: null,\n      columnDefs2: null,\n      rowData2: null,\n      defaultColDef2: null,\n\n      // AG-GRID ITEM ATTRIBUTES VARIABLES\n      gridOptions3: null,\n      gridApi3: null,\n      columnApi3: null,\n      columnDefs3: null,\n      rowData3: null,\n      defaultColDef3: null,\n\n      // VUE ATTRIBUTE VARIABLES\n      updateAttributeId: null,\n      updateAttributeStatus: false,\n      KeyAtt: null,\n      NameAtt: null,\n      ValueAtt: null,\n      ValueType: null,\n      Parameter: null,\n      ParameterTags: [],\n      optionsTypes: [\n        { value: 'Integer', text: 'Counter' },\n        { value: 'Float', text: 'Measure' },\n        { value: 'String', text: 'Text' },\n        { value: 'Boolean', text: 'True/False' },\n        { value: 'Select', text: 'Select' },\n      ],\n      optionsUnits: [\n        { value: 'µm', text: 'µm' },\n        { value: 'mm', text: 'mm' },\n        { value: 'cm', text: 'cm' },\n        { value: 'mg', text: 'mg' },\n        { value: 'g', text: 'g' },\n        { value: 'ml', text: 'ml' },\n        { value: 'inch', text: 'inch' },\n        { value: 'oz', text: 'oz' },\n      ],\n      optionsBoolean: [\n        { value: 'true', text: 'True' },\n        { value: 'false', text: 'False' },\n      ],\n\n      // VUE GENERAL VARIABLES\n      suppliers: [],\n      items: [],\n      devices: [],\n      orderItems: [],\n      orderDevices: [],\n      itemAttributes: [],\n      filteredItemAttributes: [],\n      orderItemAttributes: [],\n      orders: [],\n      show: false,\n      show1: false,\n      show2: false,\n      show3: false,\n      name: null,\n      ONumber: null,\n      DatOrder: null,\n      DatDelivery: null,\n      OType: null,\n      CNumber: null,\n      DelStatus: null,\n      Supplier: null,\n      Comment: null,\n      OrderAmount: null,\n      SupplierReference: false,\n      orderedItem: null,\n      orderedDevice: null,\n      filteredItems: null,\n      filteredDevices: null,\n      selectedItems: null,\n      selectedDevices: null,\n      selectedOrderDevice: false,\n      date: null,\n      error: false,\n      updateStatus: false,\n      updateItemStatus: false,\n      updateDeviceStatus: false,\n      updateId: null,\n      updateItemId: null,\n      updateDeviceId: null,\n      extFilter: null,\n      optionSupplier: [],\n      optionItems: [],\n      optionDevices: [],\n      optionType: [\n        { code: 'Sample Item', label: 'Sample Item' },\n        { code: 'Sample Device', label: 'Sample Device' },\n        { code: 'Customer', label: 'Customer' },\n      ],\n      optionStatus: [\n        { code: null, label: 'Choose Delivery Status' },\n        { code: 'Delivered', label: 'Delivered' },\n        { code: 'Not Delivered', label: 'Not Delivered' },\n      ],\n      optionReference: [\n        { code: null, label: 'Choose Supplier Reference' },\n        { code: 'Yes', label: 'Yes' },\n        { code: 'No', label: 'No' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.gridOptions1 = {};\n    this.gridOptions2 = {};\n    this.gridOptions3 = {};\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.defaultColDef = { editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef1 = { flex: 1, editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef2 = { flex: 1, editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef3 = { flex: 1, editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.columnDefs = [\n      {headerName: \"Order Number\", field: \"txtOrderNumber\", filter: 'agTextColumnFilter', checkboxSelection: true,},\n      {headerName: \"Order Date\", field: \"datOrder\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Delivery Date\", field: \"datDelivery\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Order Type\", field: \"txtOrderType\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Sample Item', 'Sample Device', 'Customer']}},\n      {headerName: \"Charge Number\", field: \"txtChargeNumber\", filter: 'agTextColumnFilter',},\n      {headerName: \"Delivery Status\", field: \"txtDeliveryStatus\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Delivered', 'Not Delivered']}},\n      {headerName: \"Supplier\", field: \"idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ],\n    this.columnDefs1 = [\n      {headerName: \"Article Number\", field: \"idItem.txtArticleNumber\", filter: 'agTextColumnFilter', checkboxSelection: true,},\n      {headerName: \"Description\", field: \"idItem.txtDescription\", filter: 'agTextColumnFilter', },\n      {headerName: \"Order Amount\", field: \"numOrderAmount\", filter: 'agTextColumnFilter', },\n      {headerName: \"Order Date\", field: \"datOrder\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivery Date\", field: \"datDelivery\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivery Status\", field: \"txtDeliveryStatus\", filter: 'agTextColumnFilter', },\n      {headerName: \"Supplier Reference\", field: \"txtSupplierReference\", filter: 'agTextColumnFilter', },\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ]\n    this.columnDefs2 = [\n      {headerName: \"Serial Number\", field: \"idDevice.txtSerialNumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"Model Name\", field: \"idDevice.idModel.txtModelName\", filter: 'agTextColumnFilter', },\n      {headerName: \"Order Amount\", field: \"numOrderAmount\", filter: 'agTextColumnFilter', },\n      {headerName: \"Order Date\", field: \"datOrder\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivery Date\", field: \"datDelivery\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivery Status\", field: \"txtDeliveryStatus\", filter: 'agTextColumnFilter', },\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ]\n    this.columnDefs3 = [\n      {headerName: \"Key Attribute\", field: \"txtKeyAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Name Attribute\", field: \"txtNameAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Attribute\", field: \"txtValueAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Type\", field: \"txtValueType\", filter: 'agTextColumnFilter',},\n      {headerName: \"Parameter\", field: \"txtParameter\", filter: 'agTextColumnFilter',},\n    ]\n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('orders_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('orders_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  computed: {\n    disabled: function () {\n      if(this.OType == 'Sample Item' && this.updateStatus != true) {\n        return !this.Supplier ? true : !this.ONumber ? true : !this.DatOrder ? true : !this.OType ? true : !this.selectedItems ? true : false; \n      } else if(this.OType == 'Sample Device' && this.updateStatus != true) {\n        return !this.Supplier ? true : !this.ONumber ? true : !this.DatOrder ? true : !this.OType ? true : !this.selectedDevices? true : false; \n      } else {\n        return !this.Supplier ? true : !this.ONumber ? true : !this.DatOrder ? true : !this.OType ? true : false; \n      }\n    },\n    disabledDelivery: function () {\n      return !this.DatDelivery ? true : false\n    },\n  },\n  methods: {\n    saveState() {\n      localStorage.setItem('orders_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('orders_columnStats', null);\n    },\n    customItemLabel({ txtArticleNumber, txtDescription, txtVersion }) {\n      return `${txtArticleNumber} - ${txtDescription} - v${txtVersion}`\n    },\n    customDeviceLabel({ idModel, txtSerialNumber, txtDevicePosition }) {\n      return `${idModel.txtModelName} - ${txtSerialNumber} - ${txtDevicePosition}`\n    },\n    changeExternalFilter(val) {\n      this.extFilter = val;\n      this.gridApi.onFilterChanged();\n    },\n    isExternalFilterPresent() {\n      return this.extFilter !== null;\n    },\n    doesExternalFilterPass(node) {\n      switch (this.extFilter) {\n        case 'all':\n          return true;\n        case 'delivered':\n          return node.data.txtDeliveryStatus === 'Delivered';\n        case 'not delivered':\n          return node.data.txtDeliveryStatus === 'Not Delivered';\n        default:\n          return true;\n      }\n    },\n    getParameter(params) {\n      if(params.node.data.txtValueType == 'Select') {\n        this.ParameterTags = params.node.data.txtParameter.split(',');\n      } else {\n        this.Parameter = params.node.data.txtParameter;\n      }\n    },\n    setParameter() {\n      let val;\n      if(this.ValueType == 'Select') {\n        return val = this.ParameterTags.toString();\n      } else if(this.ValueType == 'Boolean') {\n        this.ValueAtt = 'false'\n        return val = null;\n      } else if(this.ValueType == 'String') {\n        return val = null;\n      } else {\n        return val = this.Parameter.toString();\n      }\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onSubmit() {\n      if(!this.updateStatus) { this.addOrder();\n      } else { this.updateOrder(); }\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onRowSelected(event) {\n      this.rowData1 = null;\n      this.rowData2 = null;\n      if(event.node.selected == true) {\n        if(event.data.txtOrderType == 'Sample Item') {\n          this.getOrderItem(event.data.id);\n        } else if(event.data.txtOrderType == 'Sample Device') {\n          this.getOrderDevice(event.data.id);\n        }\n      }\n    },\n    onRowSelectedAttribute(event) {\n      this.rowData3 = null;\n      if(event.node.selected == true) {\n        this.getOrderItemAttributes(event.data.id);\n      }\n    },\n    onGridReady(params) {\n      setTimeout(() => { this.getSelectedOrder(params) }, 500);\n    },\n    onGridReady1(params) {\n      this.gridApi1 = params.api;\n      this.gridColumnApi1 = params.columnApi\n    },\n    onGridReady2(params) {\n      this.gridApi2 = params.api;\n      this.gridColumnApi2 = params.columnApi\n    },\n    onGridReady3(params) {\n      this.gridApi3 = params.api;\n      this.gridColumnApi3 = params.columnApi\n    },\n    addOrder() {\n      let endpoint = `/api/order/`;\n      apiService(endpoint, \"POST\", { txtOrderNumber: this.ONumber, datOrder: this.DatOrder, datDelivery: this.DatDelivery, \n        txtOrderType: this.OType, txtChargeNumber: null, txtDeliveryStatus: this.DelStatus, txtComment: this.Comment, idSupplier: this.Supplier })\n        .then(response => {\n          if (this.OType == 'Sample Item' && response != 'ERROR') {\n            for (let i = 0; i < this.selectedItems.length; i++) {\n              let el = this.selectedItems[i];\n              this.addOrderItem(response, el);\n            }\n          } else if (this.OType == 'Sample Device' && response != 'ERROR') {\n            for (let i = 0; i < this.selectedDevices.length; i++) {\n              let el = this.selectedDevices[i];\n              this.addOrderDevice(response, el);\n            }\n          }\n          this.getOrder();\n          this.emptyInput();\n          })\n          .catch(err => console.log(err));\n    },\n    addOrderItem(response, el) {\n      this.getItemAttributes(el.id);\n      let endpoint = `/api/order-item/`;\n      apiService(endpoint, \"POST\", { datOrder: this.DatOrder, datDelivery: this.DatDelivery, numOrderAmount: parseInt(el.numOrderAmount), \n        txtDeliveryStatus: this.DelStatus, idItem: el.id, idOrder: response.id, })\n      .then(response => {\n        for (let e = 0; e < this.filteredItemAttributes.length; e++) {\n          let ia = this.filteredItemAttributes[e];\n          this.addOrderItemAttribute(response, ia);\n        }\n      })\n      .catch(err => console.log(err));\n    },\n    addOrderItemAttribute(response, ia) {\n      let endpoint = `/api/order-item-attribute/`;\n      apiService(endpoint, \"POST\", { \n        txtKeyAttribute: ia.txtKeyAttribute, \n        txtNameAttribute: ia.txtNameAttribute, \n        txtValueAttribute: ia.txtValueAttribute, \n        txtValueType: ia.txtValueType, \n        txtParameter: ia.txtParameter, \n        idOrderItem: response.id, })\n    },\n    addOrderDevice(response, el) {\n      let endpoint = `/api/order-device/`;\n      apiService(endpoint, \"POST\", { datOrder: this.DatOrder, datDelivery: this.DatDelivery, numOrderAmount: parseInt(el.numOrderAmount), \n        txtDeliveryStatus: this.DelStatus, idDevice: el.id, idOrder: response.id, })\n      .catch(err => console.log(err));\n    },\n    fillEditorFields(sel) {\n      this.DatOrder = sel.datOrder;\n      this.DatDelivery = sel.datDelivery;\n      this.DelStatus = sel.txtDeliveryStatus;\n      this.Comment = sel.txtComment;\n    },\n    editOrderMenu(params) {\n      this.emptyInput();\n      this.getOrderItem();\n      this.getOrderDevice();\n      let sel = params.node.data;\n      this.fillEditorFields(sel);\n      this.ONumber = sel.txtOrderNumber;\n      this.OType = sel.txtOrderType;\n      this.CNumber = sel.txtChargeNumber;\n      this.Supplier = sel.idSupplier;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    editOrderItemMenu(params) {\n      this.emptyItemInput();\n      let sel = params.node.data;\n      this.fillEditorFields(sel);\n      this.orderedItem = sel.idItem;\n      this.OrderAmount = sel.numOrderAmount;\n      this.SupplierReference = sel.txtSupplierReference;\n      this.updateItemStatus = true;\n      this.updateItemId = sel.id;\n      this.show1 = true;\n      document.documentElement.scrollTop = 0;\n    },\n    editOrderDeviceMenu(params) {\n      this.emptyItemInput();\n      let sel = params.node.data;\n      this.fillEditorFields(sel);\n      this.orderedDevice = sel.idDevice;\n      this.OrderAmount = sel.numOrderAmount;\n      this.updateDeviceStatus = true;\n      this.updateDeviceId = sel.id;\n      this.show2 = true;\n      document.documentElement.scrollTop = 0;\n    },\n    editAttributeMenu(params) {\n      this.emptyAttributeInput();\n      let sel = params.node.data;\n      this.getParameter(params);\n      this.KeyAtt = sel.txtKeyAttribute;\n      this.NameAtt = sel.txtNameAttribute;\n      this.ValueAtt = sel.txtValueAttribute;\n      this.ValueType = sel.txtValueType;\n      this.updateAttributeStatus = true;\n      this.updateAttributeId = sel.id;\n      this.show3 = true;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateOrderGrid(event) {     \n      let endpoint = `/api/order/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtOrderNumber: event.node.data.txtOrderNumber,\n          datOrder: event.node.data.datOrder,\n          datDelivery: event.node.data.datDelivery,\n          txtOrderType: event.node.data.txtOrderType,\n          txtChargeNumber: event.node.data.txtChargeNumber,\n          txtDeliveryStatus: event.node.data.txtDeliveryStatus,\n          txtComment: event.node.data.txtComment,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async updateItemOrderAttributeGrid(event) {     \n      let endpoint = `/api/order-item-attribute/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtKeyAttribute: event.node.data.txtKeyAttribute,\n          txtNameAttribute: event.node.data.txtNameAttribute,\n          txtValueAttribute: event.node.data.txtValueAttribute,\n          txtValueType: event.node.data.txtValueType,\n          txtParameter: event.node.data.txtParameter,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) { console.log(err) }\n    },\n    async updateOrder() {\n      let endpoint = `/api/order/${this.updateId}/`;\n      await apiService(endpoint, \"PATCH\", { txtOrderNumber: this.ONumber, datOrder: this.DatOrder, datDelivery: this.DatDelivery, txtOrderType: this.OType,\n        txtChargeNumber: this.CNumber, txtDeliveryStatus: this.DelStatus, txtComment: this.Comment, idSupplier: this.Supplier.id })\n        .then(response => {\n          if (this.OType == 'Sample Item' && response != 'ERROR') {\n            if(this.selectedItems === true || this.selectedItems !== null) {\n              for (let i = 0; i < this.selectedItems.length; i++) {\n                let el = this.selectedItems[i];\n                this.addOrderItem(response, el);\n              };\n            }\n            if(this.filteredItems || this.filteredItems != null) {\n              for (let i = 0; i < this.filteredItems.length; i++) {\n                let el = this.filteredItems[i];\n                let endpointItem = `/api/order-item/${el.id}/`;\n                apiService(endpointItem, \"PATCH\", { datOrder: this.DatOrder, datDelivery: null, numOrderAmount: parseInt(el.numOrderAmount), \n                txtDeliveryStatus: this.DelStatus, txtSupplierReference: null, txtComment: null, idItem: el.id, idOrder: response.id })\n              };\n            }\n            this.getOrder();\n            this.emptyInput();\n          } else if (this.OType == 'Sample Device' && response != 'ERROR') {\n            if(this.selectedDevices || this.selectedDevices != null) {\n              for (let i = 0; i < this.selectedDevices.length; i++) {\n                let el = this.selectedDevices[i];\n                this.addOrderDevice(response, el);\n              }\n            }\n            if(this.filteredDevices || this.filteredDevices != null) {\n              for (let i = 0; i < this.filteredDevices.length; i++) {\n                let el = this.filteredDevices[i];\n                let endpointDevice = `/api/order-device/${el.id}/`;\n                apiService(endpointDevice, \"PATCH\", { datOrder: this.DatOrder, datDelivery: null, numOrderAmount: parseInt(el.numOrderAmount),\n                idDevice: el.idDevice.id, idOrder: response.id })\n              }\n            }\n            this.getOrder();\n            this.emptyInput();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    async updateItemOrder() {\n      let endpoint = `/api/order-item/${this.updateItemId}/`;\n      await apiService(endpoint, \"PATCH\", {\n        datOrder: this.DatOrder,\n        datDelivery: this.DatDelivery,\n        numOrderAmount: this.OrderAmount,\n        txtDeliveryStatus: this.DelStatus,\n        txtSupplierReference: this.SupplierReference, \n        txtComment: this.Comment, \n        idItem: this.orderedItem.id })\n          .then(response => {\n            this.getOrder();\n            this.emptyItemInput();\n            this.rowData1 = null;\n          })\n    },\n    async updateDeviceOrder() {\n      let endpoint = `/api/order-device/${this.updateDeviceId}/`;\n      await apiService(endpoint, \"PATCH\", {\n        datOrder: this.DatOrder,\n        datDelivery: this.DatDelivery,\n        numOrderAmount: this.OrderAmount,\n        txtDeliveryStatus: this.DelStatus,\n        txtComment: this.Comment, \n        idDevice: this.orderedDevice.id })\n          .then(response => {\n            this.getOrder();\n            this.emptyDeviceInput();\n            this.rowData2 = null;\n          })\n    },\n    async updateItemAttribute() {\n      let endpoint = `/api/order-item-attribute/${this.updateAttributeId}/`;\n      await apiService(endpoint, \"PATCH\", { txtParameter: this.setParameter(), txtKeyAttribute: this.KeyAtt,\n        txtNameAttribute: this.NameAtt, txtValueAttribute: this.ValueAtt, txtValueType: this.ValueType, })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.getOrder();\n            this.emptyAttributeInput();\n            this.rowData = null;\n            this.rowData1 = null;\n            this.rowData3 = null;\n            this.error = false;\n          } else {\n            this.error = true;\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Order? => \" + params.node.data.txtOrderNumber, {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { if (value) { this.deleteOrder(params); }})\n        .catch(err => console.log(err));\n    },\n    openModal1(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Item Order?\", {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { if (value) { this.deleteItemOrder(params); }})\n        .catch(err => console.log(err));\n    },\n    openModal2(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Device Order?\", {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { if (value) { this.deleteDeviceOrder(params); }})\n        .catch(err => console.log(err));\n    },\n    openModal3(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Item Order Attribute?\", {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\",\n          okTitle: \"YES\", cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { if (value) { this.deleteItemOrderAttribute(params); } })\n        .catch(err => console.log(err));\n    },\n    async deleteOrder(params) {\n      let endpoint = `/api/order/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getOrder();\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false })\n          }\n        })\n    },\n    async deleteItemOrder(params) {\n      let endpoint = `/api/order-item/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getOrder();\n            this.rowData1 = null;\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false })\n          }\n        })\n    },\n    async deleteDeviceOrder(params) {\n      let endpoint = `/api/order-device/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getOrder();\n            this.rowData2 = null;\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false })\n          }\n        })\n    },\n    async deleteItemOrderAttribute(params) {\n      let endpoint = `/api/order-item-attribute/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getOrder();\n            this.getOrderItem();\n            this.rowData3 = null;\n          } else {\n            this.$bvToast.toast(`You can't delete this instance. Please check if all connections to this instance are deleted.`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false\n            })\n          }\n        })\n    },\n    emptyInput(event) {\n      this.DelStatus = 'Not Delivered';\n      this.ONumber = this.DatOrder = this.DatDelivery = this.OType = this.CNumber = this.Supplier = this.Comment = this.selectedItems = this.selectedDevices = null;\n      if(event != 'add') {\n        this.show = false;\n      } else {\n        this.updateStatus = false;\n        this.show = !this.show;\n      }\n    },\n    emptyItemInput(event) {\n      this.DatOrder = this.DatDelivery = this.OrderAmount = this.DelStatus = this.Comment = null;\n      this.SupplierReference = false;\n      this.orderedItem = [];\n      this.show1 = !this.show1;\n      this.updateItemStatus = false;\n    },\n    emptyDeviceInput(event) {\n      this.DatOrder = this.DatDelivery = this.OrderAmount = this.DelStatus = this.Comment = null;\n      this.orderedDevice = [];\n      this.show2 = !this.show2;\n      this.updateDeviceStatus = false;\n    },\n    emptyAttributeInput(event) {\n      this.KeyAtt = this.NameAtt = this.ValueAtt = this.ValueType = this.Parameter = null;\n      this.ParameterTags = [];\n      this.show3 = !this.show3;\n      this.updateAttributeStatus = false;\n    },\n    emptyLastValueType(event) {\n      this.ValueDef = this.Parameter = null;\n      this.ParameterTags = [];\n    },\n    getOrder() {\n      if (!this.error) {\n        this.orders = [];\n        let endpoint = `/api/order-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orders.push(...data.results);\n            this.rowData = this.orders\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getSup() {\n      if (!this.error) {\n        this.suppliers = [];\n        let endpoint = `/api/supplier/`;\n        apiService(endpoint)\n          .then(data => {\n            this.suppliers.push(...data.results);\n            this.optionSupplier = this.suppliers\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getItem() {\n      if (!this.error) {\n        this.items = [];\n        let endpoint = `/api/item/`;\n        apiService(endpoint)\n          .then(data => {\n            this.items.push(...data.results);\n            this.optionItems = this.items\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getItemAttributes(ItemId) {\n      if (!this.error) {\n        console.log('getItemAttributes')\n        this.itemAttributes = [];\n        let endpoint = `/api/item-attribute/`;\n        apiService(endpoint)\n          .then(data => {\n            this.itemAttributes.push(...data.results);\n            this.filteredItemAttributes = this.itemAttributes.filter(e => e.idItem == ItemId)\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getOrderItemAttributes(OrderItemId) {\n      if (!this.error) {\n        this.orderItemAttributes = [];\n        let endpoint = `/api/order-item-attribute/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orderItemAttributes.push(...data.results);\n            this.rowData3 = this.orderItemAttributes.filter(e => e.idOrderItem == OrderItemId)\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getOrderItem(val) {\n      if (!this.error) {\n        this.orderItems = [];\n        let endpoint = `/api/order-item-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orderItems.push(...data.results);\n            if(this.updateId != null) {\n              this.filteredItems = this.orderItems.filter(e => e.idOrder.id == this.updateId)\n            }\n            if(val != null) {\n              this.rowData1 = this.orderItems.filter(e => e.idOrder.id == val)\n            }\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDevice() {\n      if (!this.error) {\n        this.devices = [];\n        let endpoint = `/api/device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.devices.push(...data.results);\n            this.optionDevices = this.devices\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getOrderDevice(val) {\n      if (!this.error) {\n        this.orderDevices = [];\n        let endpoint = `/api/order-device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orderDevices.push(...data.results);\n            if(this.updateId != null) {\n              this.filteredDevices = this.orderDevices.filter(e => e.idOrder.id == this.updateId)\n            }\n            if(val != null) {\n              this.rowData2 = this.orderDevices.filter(e => e.idOrder.id == val)\n            }\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Order',\n          action: () => this.editOrderMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Order',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n    getContextMenu1(params) {\n      var result = [\n        {\n          name: 'Edit Order Item',\n          action: () => this.editOrderItemMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Order Item',\n          action: () =>  this.openModal1(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n    getContextMenu2(params) {\n      var result = [\n        {\n          name: 'Edit Order Device',\n          action: () => this.editOrderDeviceMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Order Device',\n          action: () =>  this.openModal2(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n    getContextMenu3(params) {\n      var result = [\n        {\n          name: 'Edit Attribute',\n          action: () => this.editAttributeMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Item Order Attribute',\n          action: () =>  this.openModal3(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n      this.DelStatus = 'Not Delivered'\n    },\n    getSelectedOrder(event) {\n      if(window.localStorage.getItem('selOrder') != null) {\n        let el = parseInt(localStorage.getItem('selOrder'));\n        event.api.forEachNode(rowNode => { rowNode.setSelected(rowNode.data.id === el) });\n      }\n    },\n  },\n  created() {\n    this.getSup();\n    this.getOrder();\n    this.getDateToday();\n    this.getOrderDevice();\n    this.getOrderItem();\n    this.getDevice();\n    this.getItem();\n  },\n  beforeRouteLeave (to, from, next) {\n    window.localStorage.removeItem('selOrder');\n    next()\n  }\n};\n",null]}