{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\containers\\layouts\\largeSidebar\\Sidebar.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\containers\\layouts\\largeSidebar\\Sidebar.vue","mtime":1602172457493},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Topnav from \"./TopNav\";\nimport { isMobile } from \"mobile-device-detect\";\n\nimport { mapGetters, mapActions } from \"vuex\";\n\nexport default {\n  components: {\n    Topnav\n  },\n\n  data() {\n    return {\n      isDisplay: true,\n      isMenuOver: false,\n      isStyle: true,\n      selectedParentMenu: \"\",\n      isMobile,\n      show: false,\n    };\n  },\n  mounted() {\n    this.toggleSelectedParentMenu();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n    document.addEventListener(\"click\", this.returnSelectedParentMenu);\n    this.handleWindowResize();\n  },\n\n  beforeDestroy() {\n    document.removeEventListener(\"click\", this.returnSelectedParentMenu);\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n  },\n  computed: {\n    ...mapGetters([\"getSideBarToggleProperties\"])\n  },\n\n  methods: {\n    ...mapActions([\n      \"changeSecondarySidebarProperties\",\n      \"changeSecondarySidebarPropertiesViaMenuItem\",\n      \"changeSecondarySidebarPropertiesViaOverlay\",\n      \"changeSidebarProperties\"\n    ]),\n\n    handleWindowResize() {\n      //  console.log('not working is Mobile');\n      if (window.innerWidth <= 1200) {\n        if (this.getSideBarToggleProperties.isSideNavOpen) {\n          this.changeSidebarProperties();\n        }\n        if (this.getSideBarToggleProperties.isSecondarySideNavOpen) {\n          this.changeSecondarySidebarProperties();\n        }\n      } else {\n        if (!this.getSideBarToggleProperties.isSideNavOpen) {\n          this.changeSidebarProperties();\n        }\n      }\n    },\n    toggleSelectedParentMenu() {\n      const currentParentUrl = this.$route.path\n        .split(\"/\")\n        .filter(x => x !== \"\")[1];\n\n      if (currentParentUrl !== undefined || currentParentUrl !== null) {\n        this.selectedParentMenu = currentParentUrl.toLowerCase();\n      } else {\n        this.selectedParentMenu = \"dashboards\";\n      }\n    },\n    toggleSubMenu(e) {\n      let childrens = this.$refs.sidebarChild.children;\n      let parent = e.target.dataset.item;\n      this.selectedParentMenu = parent;\n      this.changeSecondarySidebarPropertiesViaMenuItem(true);\n    },\n    toggleTriangle(e) {\n      let parent = e.target.dataset.item;\n      this.selectedParentMenu = parent;\n      this.changeSecondarySidebarPropertiesViaMenuItem(false);\n    },\n    toggleTriangleReset(e) {\n      this.toggleSelectedParentMenu();\n    },\n    removeOverlay() {\n      this.changeSecondarySidebarPropertiesViaOverlay();\n      if (window.innerWidth <= 1200) {\n        this.changeSidebarProperties();\n      }\n      this.toggleSelectedParentMenu();\n    },\n    returnSelectedParentMenu() {\n      if (!this.isMenuOver) {\n        this.toggleSelectedParentMenu();\n      }\n    },\n\n    toggleSidebarDropdwon(event) {\n      let dropdownMenus = this.$el.querySelectorAll(\".dropdown-sidemenu.open\");\n\n      event.currentTarget.classList.toggle(\"open\");\n\n      dropdownMenus.forEach(dropdown => {\n        dropdown.classList.remove(\"open\");\n      });\n    }\n  }\n};\n",null]}