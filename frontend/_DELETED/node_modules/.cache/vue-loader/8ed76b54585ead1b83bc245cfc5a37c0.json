{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\item\\item-import.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\item\\item-import.vue","mtime":1600268375670},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni:focus,\ninput:focus,\nselect:focus,\ntextarea:focus,\nbutton:focus {\n    outline: none;\n}\n",{"version":3,"sources":["item-import.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4RA;AACA;AACA;AACA;AACA;AACA;AACA","file":"item-import.vue","sourceRoot":"src/views/app/item","sourcesContent":["<template>\n  <!-- ============ Body content start ============= -->\n  <div class=\"main-content\">\n    <breadcumb :page=\"'Import'\" :folder=\"'Item'\" />\n\n    <div class=\"row mt-5\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0\">\n            <AgGridVue class=\"ag-theme-alpine\"\n                id=\"gridImport\"\n                :defaultColDef=\"defaultColDef\"\n                :columnDefs=\"columnDefs\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData\"\n                :gridOptions=\"gridOptions\"\n                :suppressRowClickSelection=\"true\"\n                @grid-ready=\"onGridReady\"\n                @row-selected=\"onRowSelected\"\n                :masterDetail=\"true\"\n                :detailCellRendererParams=\"detailCellRendererParams\"\n                :pagination=\"true\"\n                :paginationPageSize=\"paginationPageSize\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n            <div class=\"ml-3 mr-3 mt-2 mb-2 text-right\">\n                Page Size:\n                <select v-on:change=\"onPageSizeChanged()\" id=\"page-size\">\n                    <option value=\"10\" selected=\"\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                </select>\n                <b-button @click=\"createItems\" class=\"ml-3\" size=\"sm\" variant=\"outline-info\">Create Items</b-button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <b-row class=\"ml-1 mr-3 mb-3\">\n      <b-collapse v-model=\"show\">\n        <b-button class=\"mr-4\" @click=\"deleteInspection\" variant=\"outline-danger\">Delete Item Selection</b-button>\n      </b-collapse>\n    </b-row>\n    <b-row class=\"mt-3 ml-1 mr-3 mb-3\">\n      <b-col md=\"4\">\n        <vue-csv-import class=\"ml-1 mr-3 mt-5\"\n          v-model=\"rowData\" \n          :autoMatchFields=\"true\"\n          :headers=\"true\"\n          :canIgnore=\"true\"\n          :map-fields=\"['MANUFACTURER', 'MODEL', 'SUPPLIER', 'ARTICLE_NUMBER', 'DESCRIPTION',  'TYPE',  'VERSION', 'GLUE_TYPE', \n          'PROTECTION_TYPE', 'OUTLINE', 'MEDIUM', 'WIDTH_IN_MM', 'LENGTH_IN_MM', 'THICKNESS_GLASS_IN_MYM', 'COST_IN_USD', 'GTIN_EAN' ]\">\n          <template slot=\"hasHeaders\" slot-scope=\"{headers, toggle}\">\n            <label>\n              <input type=\"checkbox\" id=\"hasHeaders\" :value=\"headers\" @change=\"toggle\">\n              Headers?\n            </label>\n          </template>\n          <template slot=\"next\" slot-scope=\"{load}\">\n            <b-button block variant=\"primary\" @click.prevent=\"load\">Load CSV</b-button>\n          </template>    \n          <template slot=\"submit\" slot-scope=\"{submit}\">\n            <b-button variant=\"primary\" @click.prevent=\"submit\">Submit</b-button>\n          </template>    \n        </vue-csv-import>\n      </b-col>\n    </b-row>\n  </div>\n  <!-- ============ Body content End ============= -->\n</template>\n\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\nimport XLSX from 'xlsx';\n\nexport default {\n  metaInfo: {    \n    title: \"Import\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      columnDefsMod: null,\n      rowData: null,\n      rowDataImport: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: AllModules,\n      // VUE VARIABLES\n      rowDataStructured: null,\n      templates: [],\n      show: false,\n      visible: false,\n      date: null,\n      next: null,\n      error: false,\n      file: null,\n      excelFile: null,\n      dataImport: '',\n      csv: null,\n      checked: true,\n    };\n  },\n  beforeMount() {\n    this.rowData = [];\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Manufacturer\", field: \"MANUFACTURER\", filter: 'agTextColumnFilter', checkboxSelection: true, headerCheckboxSelection: true,},\n      {headerName: \"Model\", field: \"MODEL\", filter: 'agTextColumnFilter', },\n      {headerName: \"Supplier\", field: \"SUPPLIER\", filter: 'agTextColumnFilter', },\n      {headerName: \"Article Number\", field: \"ARTICLE_NUMBER\", filter: 'agTextColumnFilter', },\n      {headerName: \"Description\", field: \"DESCRIPTION\", filter: 'agTextColumnFilter', },\n      {headerName: \"Type\", field: \"TYPE\", filter: 'agTextColumnFilter', },\n      {headerName: \"Version\", field: \"VERSION\", filter: 'agTextColumnFilter', },\n      {headerName: \"Glue Type\", field: \"GLUE_TYPE\", filter: 'agTextColumnFilter', },\n      {headerName: \"Protection Type\", field: \"PROTECTION_TYPE\", filter: 'agTextColumnFilter', },\n      {headerName: \"Outline\", field: \"OUTLINE\", filter: 'agTextColumnFilter', },\n      {headerName: \"Medium\", field: \"MEDIUM\", filter: 'agTextColumnFilter', },\n      {headerName: \"Width in mm\", field: \"WIDTH_IN_MM\", filter: 'agTextColumnFilter', },\n      {headerName: \"Length in mm\", field: \"LENGTH_IN_MM\", filter: 'agTextColumnFilter', },\n      {headerName: \"Thickness Glass in Âµm\", field: \"THICKNESS_GLASS_IN_MYM\", filter: 'agTextColumnFilter', },\n      {headerName: \"Cost in USD\", field: \"COST_IN_USD\", filter: 'agTextColumnFilter', },\n      {headerName: \"GTIN/EAN\", field: \"GTIN_EAN\", filter: 'agTextColumnFilter', },\n    ],\n    this.defaultColDef = {\n      editable: true,\n      resizable: true,\n      sortable: true,\n      filter: true,\n      floatingFilter: true,\n    };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n  },\n  mounted() {\n    this.gridApi = this.gridOptions.api;\n    this.gridColumnApi = this.gridOptions.columnApi;\n    this.show = false;\n  },\n  methods: {\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    deleteInspection() {\n      var index = this.gridApi.getSelectedNodes()[0].childIndex;\n      this.$delete(this.rowData, index)\n      this.show = this.show ? false : true\n    },\n    onGridReady(params) { \n    },\n    onChangeInput(e) {\n      this.importExcel(e);\n    },\n    structureGridItems() {\n      let element = this.rowData\n      let obj = [];\n      let arr = {};\n      for (let i = 0; i < element.length; i++) {\n        let el = element[i]\n        arr = {\n          txtArticlenumber: el.ARTICLE_NUMBER,\n          txtDescription: el.DESCRIPTION,\n          txtType: el.TYPE,\n          txtVersion: el.VERSION,\n          curCost: el.COST_IN_USD,\n          txtGtinEan: el.GTIN_EAN,\n          txtOutline: el.OUTLINE,\n          attributes: [], }\n        let attGL = {\n              txtKeyAttribute: 'IT_GL_TY',\n              txtNameAttribute: 'Glue Type',\n              txtValueAttribute: el.GLUE_TYPE,\n              txtValueType: 'STRING',\n              txtMeasureUnit: '', }\n        let attPT = {\n              txtKeyAttribute: 'IT_PT_TY',\n              txtNameAttribute: 'Protection Type',\n              txtValueAttribute: el.PROTECTION_TYPE,\n              txtValueType: 'STRING',\n              txtMeasureUnit: '', }\n        let attMD = {\n              txtKeyAttribute: 'IT_MD',\n              txtNameAttribute: 'Medium',\n              txtValueAttribute: el.MEDIUM,\n              txtValueType: 'STRING',\n              txtMeasureUnit: '', }\n        let attWD = {\n              txtKeyAttribute: 'IT_WD',\n              txtNameAttribute: 'Width',\n              txtValueAttribute: el.WIDTH_IN_MM,\n              txtValueType: 'FLOAT',\n              txtMeasureUnit: 'mm', }\n        let attLE = {\n              txtKeyAttribute: 'IT_LE',\n              txtNameAttribute: 'Length',\n              txtValueAttribute: el.LENGTH_IN_MM,\n              txtValueType: 'FLOAT',\n              txtMeasureUnit: 'mm', }\n        let attTH = {\n              txtKeyAttribute: 'IT_TH',\n              txtNameAttribute: 'Thickness',\n              txtValueAttribute: el.THICKNESS_GLASS_IN_MYM,\n              txtValueType: 'FLOAT',\n              txtMeasureUnit: 'Âµm', }\n\n        if(el.GLUE_TYPE != '')\n          arr.attributes.push(attGL)\n        if(el.PROTECTION_TYPE != '')\n          arr.attributes.push(attPT)\n        if(el.MEDIUM != '')\n          arr.attributes.push(attMD)\n        if(el.WIDTH_IN_MM != '')\n          arr.attributes.push(attWD)\n        if(el.LENGTH_IN_MM != '')\n          arr.attributes.push(attLE)\n        if(el.THICKNESS_GLASS_IN_MYM != '')\n          arr.attributes.push(attTH)\n\n        obj.push(arr);\n      }\n      this.rowDataStructured = obj;\n    },\n    async createItems() {\n      await this.structureGridItems();\n      let element = this.rowDataStructured\n      console.log(this.rowDataStructured)\n      console.log(element)\n\n      for (let i = 0; i < element.length; i++) {\n        const el = element[i];\n        console.log(el.txtArticlenumber)\n        let endpoint = `/api/item/`;\n        apiService(endpoint, \"POST\", {\n          txtArticlenumber: el.txtArticlenumber,\n          txtDescription: el.txtDescription,\n          txtType: el.txtType,\n          txtVersion: el.txtVersion,\n          curCost: el.curCost,\n          txtGtinEan: el.txtGtinEan,\n          txtOutline: el.txtOutline,\n          txtLink: null,\n          deviceModels: [], })\n          .then(response => {\n            if(response != 'ERROR')\n              for (let g = 0; g < el.attributes.length; g++) {\n                let att = el.attributes[g];\n                let endpointAttribute = `/api/item-attribute/`;\n                apiService(endpointAttribute, \"POST\", {\n                  txtKeyAttribute: att.txtKeyAttribute,\n                  txtNameAttribute: att.txtNameAttribute,\n                  txtValueAttribute: att.txtValueAttribute,\n                  txtValueType: att.txtValueType,\n                  txtMeasureUnit: att.txtMeasureUnit,\n                  idItem: response.id, })\n              }\n          })\n      }\n      this.$router.push('item-list');\n    },\n  },\n};\n</script>\n\n<style>\n  i:focus,\n  input:focus,\n  select:focus,\n  textarea:focus,\n  button:focus {\n      outline: none;\n  }\n</style>\n"]}]}