{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\dashboards\\dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\dashboards\\dashboard.vue","mtime":1601446406789},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {\n    title: \"Dashboard\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES \"OPEN ORDERS\"\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      domLayout: null,\n      modules: AllModules,\n      paginationPageSize: null,\n\n      // AG-GRID VARIABLES \"ACTIVE INSPECTIONS\"\n      gridOptions1: null,\n      gridApi1: null,\n      columnApi1: null,\n      columnDefs1: null,\n      rowData1: null,\n      defaultColDef1: null,\n      excelStyles1: null,\n      paginationPageSize1: null,\n      selectedInspection: false,\n      \n      // AG-GRID VARIABLES \"DEVICES LAST 30 DAYS\"\n      gridOptions2: null,\n      gridApi2: null,\n      columnApi2: null,\n      columnDefs2: null,\n      rowData2: null,\n      defaultColDef2: null,\n      excelStyles2: null,\n      paginationPageSize2: null,\n      \n      // VUE VARIABLES\n      suppliers: [],\n      devices: [],\n      orders: [],\n      inspections: [],\n      ONumber: null,\n      DatOrder: null,\n      DatDelivery: null,\n      OType: null,\n      CNumber: null,\n      DelStatus: null,\n      Supplier: null,\n      date: null,\n      error: false,\n      optionSuppliers: [],\n      optionInspections: [],\n      optionTypes: [\n        { value: 'Sample', text: 'Sample' },\n        { value: 'Customer', text: 'Customer' },\n      ],\n      optionStatus: [\n        { value: 'Delivered', text: 'Delivered' },\n        { value: 'Not Delivered', text: 'Not Delivered' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.gridOptions1 = {};\n    this.gridOptions2 = {};\n    this.columnDefs = [\n      {headerName: \"Order Number\", field: \"txtOrderNumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"Order Date\", field: \"datOrder\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivery Date\", field: \"datDelivery\", filter: 'agTextColumnFilter', },\n      {headerName: \"Order Type\", field: \"txtOrderType\", filter: 'agTextColumnFilter', },\n      {headerName: \"Charge Number\", field: \"txtChargeNumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivery Status\", field: \"txtDeliveryStatus\", filter: 'agTextColumnFilter', editable: true, cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Delivered', 'Not Delivered']}, },\n      {headerName: \"Supplier\", field: \"idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false, },\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', editable: false, },\n    ],\n    this.columnDefs1 = [\n      {headerName: \"Inspection Number\", field: \"txtInspectionNumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"Status\", field: \"txtInspectionStatus\", filter: 'agTextColumnFilter', editable: true, cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Work In Progress', 'On Hold', 'Complete', 'Declined']},},\n      {headerName: \"Type\", field: \"txtInspectionType\", filter: 'agTextColumnFilter', },\n      {headerName: \"Inspector\", field: \"txtInspector\", filter: 'agTextColumnFilter',},\n      {headerName: \"Date\", field: \"datInspection\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivered on\", field: \"datDeliveredOn\", filter: 'agTextColumnFilter', },\n      {headerName: \"Requested on\", field: \"datRequestedOn\", filter: 'agTextColumnFilter', },\n      {headerName: \"Requested by\", field: \"txtRequestedBy\", filter: 'agTextColumnFilter', },\n      {headerName: \"Release\", field: \"txtRelease\", filter: 'agTextColumnFilter', },\n      {headerName: \"Release by\", field: \"txtReleaseBy\", filter: 'agTextColumnFilter', },\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ],\n    this.columnDefs2 = [\n      {headerName: \"Model Name\", field: \"idModel.txtModelName\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Serial Number\", field: \"txtSerialNumber\", filter: 'agTextColumnFilter',},\n      {headerName: \"Device Position\", field: \"txtDevicePosition\", filter: 'agTextColumnFilter',},\n      {headerName: \"Manufacturer\", field: \"idModel.idManufacturer.txtManufacturerName\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Supplier\", field: \"idModel.idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false},\n    ],\n    this.defaultColDef = { editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef1 = { editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef2 = { flex: 1, editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.paginationPageSize1 = 10;\n    this.paginationPageSize2 = 10;\n  },\n  methods: {\n    saveState(params) {\n      localStorage.setItem('openOrders_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    saveState1(params) {\n      localStorage.setItem('activeInspections_columnStats', JSON.stringify(this.gridOptions1.columnApi.getColumnState()));\n    },\n    saveState2(params) {\n      localStorage.setItem('lastDevices_columnStats', JSON.stringify(this.gridOptions2.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('openOrders_columnStats', null);\n    },\n    restoreState1() {\n      localStorage.setItem('activeInspections_columnStats', null);\n    },\n    restoreState2() {\n      localStorage.setItem('lastDevices_columnStats', null);\n    },\n    // OPEN ORDERS\n    onGridReady(params) {\n      if(JSON.parse(localStorage.getItem('openOrders_columnStats')) != null) {\n        this.gridApi = params.api;\n        params.columnApi.setColumnState(JSON.parse(localStorage.getItem('openOrders_columnStats')));\n        this.gridApi.setQuickFilter(\"Not Delivered\")\n      } else {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi\n        this.gridApi.setQuickFilter(\"Not Delivered\")\n      }\n    },\n    // ACTIVE INSPECTIONS\n    onGridReady1(params) {\n      if(JSON.parse(localStorage.getItem('activeInspections_columnStats')) != null) {\n        this.gridApi1 = params.api;\n        params.columnApi.setColumnState(JSON.parse(localStorage.getItem('activeInspections_columnStats')));\n      } else {\n        this.gridApi1 = params.api;\n        this.gridColumnApi1 = params.columnApi\n      }\n    },\n    // DEVICES LAST 30 DAYS\n    onGridReady2(params) {\n      if(JSON.parse(localStorage.getItem('lastDevices_columnStats')) != null || JSON.parse(localStorage.getItem('lastDevices_columnStats')) != undefined) {\n        this.gridApi2 = params.api;\n        params.columnApi.setColumnState(JSON.parse(localStorage.getItem('lastDevices_columnStats')));\n      } else {\n        this.gridApi2 = params.api;\n        this.gridColumnApi2 = params.columnApi\n      }\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onBtExport1() {\n      this.gridApi1.exportDataAsExcel({});\n    },\n    onBtExport2() {\n      this.gridApi2.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onPageSizeChanged1(newPageSize) {\n      var value = document.getElementById('page-size-1').value;\n      this.gridApi1.paginationSetPageSize(Number(value));\n    },\n    onPageSizeChanged2(newPageSize) {\n      var value = document.getElementById('page-size-2').value;\n      this.gridApi2.paginationSetPageSize(Number(value));\n    },\n    editInspectionMenu(params) {\n      window.localStorage.setItem('selInspect', params.node.data.id)\n      this.$router.push('inspection/inspection-list')\n    },\n    editOrderMenu(params) {\n      window.localStorage.setItem('selOrder', params.node.data.id)\n      this.$router.push('order/order-list')\n    },\n    editDeviceMenu(params) {\n      window.localStorage.setItem('selDevice', params.node.data.id)\n      this.$router.push('device/device-list')\n    },\n    async updateOrderGrid(event) {     \n      let endpoint = `/api/order/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtOrderNumber: event.node.data.txtOrderNumber,\n          datOrder: event.node.data.datOrder,\n          datDelivery: event.node.data.datDelivery,\n          txtOrderType: event.node.data.txtOrderType,\n          txtChargeNumber: event.node.data.txtChargeNumber,\n          txtDeliveryStatus: event.node.data.txtDeliveryStatus,\n          txtComment: event.node.data.txtComment,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async updateInspectionGrid(event) {     \n      let endpoint = `/api/inspection/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtInspectionNumber: event.node.data.txtInspectionNumber,\n          txtInspectionStatus: event.node.data.txtInspectionStatus,\n          txtInspectionType: event.node.data.txtInspectionType,\n          txtInspector: event.node.data.txtInspector,\n          datInspection: event.node.data.datInspection,\n          datDeliveredOn: event.node.data.datDeliveredOn,\n          datRequestedOn: event.node.data.datRequestedOn,\n          txtRequestedBy: event.node.data.txtRequestedBy,\n          txtLink: event.node.data.txtLink,\n          txtComment: event.node.data.txtComment,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async getUserInfo() {\n      // add the username of the logged in user to localStorage\n      let endpoint = `/api/user/`;\n      let data = await apiService(endpoint);\n      let requestUser = data[\"username\"];\n      let requestSuperuser = data[\"is_superuser\"]\n      window.localStorage.setItem(\"username\", requestUser);\n      window.localStorage.setItem(\"superuser\", requestSuperuser);\n    },\n    getOrder() {\n      if (!this.error) {\n        this.orders = [];\n        let endpoint = `/api/order-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orders.push(...data.results);\n            this.rowData = this.orders\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getSup() {\n      if (!this.error) {\n        this.suppliers = [];\n        let endpoint = `/api/supplier/`;\n        apiService(endpoint)\n          .then(data => {\n            this.suppliers.push(...data.results);\n            this.optionSuppliers = this.suppliers\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDevices() {\n      if (!this.error) {\n        this.devices = [];\n        let endpoint = `/api/device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.devices.push(...data.results);\n            this.rowData2 = this.devices\n              .filter(el => {\n                let diff = new Date() - new Date(el.datCreated);\n                const diffDays = Math.ceil(diff / (1000 * 60 * 60 * 24));\n                return (Number(diffDays) <= 30) ? el.datCreated : false;\n              })\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getInspections() {\n      if (!this.error) {\n        this.inspections = [];\n        let endpoint = `/api/inspection/`;\n        apiService(endpoint)\n          .then(data => {\n            this.inspections.push(...data.results);\n            this.rowData1 = this.inspections.filter(el => el.txtInspectionStatus == 'Work In Progress' || el.txtInspectionStatus == 'On Hold')\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Order',\n          action: () => this.editOrderMenu(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n    getContextMenu1(params) {\n      var result = [\n        {\n          name: 'Edit Inspection',\n          action: () => this.editInspectionMenu(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n    getContextMenu2(params) {\n      var result = [\n        {\n          name: 'Edit Device',\n          action: () => this.editDeviceMenu(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getSup();\n    this.getOrder();\n    this.getDevices();\n    this.getInspections();\n    this.getUserInfo();\n  },\n};\n",{"version":3,"sources":["dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"dashboard.vue","sourceRoot":"src/views/app/dashboards","sourcesContent":["<template>\n  <div class=\"main-content\">\n    <breadcumb :page=\"'Dashboard'\" :folder=\"'App'\" />\n    \n    <!-- ACTIVE INSPECTIONS GRID -->\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30 bg-1\">\n          <div class=\"card-body p-0\">\n            <b-row class=\"row flex justify-content-start\">\n              <b-col md=\"auto\">\n                <h5 class=\"card-title p-3 pb-0 mb-3 mt-3\">Active Inspections</h5>\n              </b-col>\n              <b-col md=\"auto\">\n                <b-button v-if=\"selectedInspection\" class=\"mt-4\" @click=\"editInspection\" size=\"sm\" variant=\"outline-warning\">Edit Inspection</b-button>\n              </b-col>\n            </b-row>\n            <AgGridVue class=\"ag-theme-material\"\n                id=\"gridActiveInspections\"\n                :defaultColDef=\"defaultColDef1\"\n                :columnDefs=\"columnDefs1\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData1\"\n                :gridOptions=\"gridOptions1\"\n                :suppressRowClickSelection=\"true\"\n                :excelStyles=\"excelStyles1\"\n                @cellValueChanged=\"updateInspectionGrid\"\n                @grid-ready=\"onGridReady1\"\n                :pagination=\"true\"\n                :paginationPageSize=\"paginationPageSize1\"\n                :getContextMenuItems=\"getContextMenu1\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n            <b-row class=\"ml-3 mr-3 mt-2 mb-2\">\n              <b-col md=\"6\" class=\"text-left\">\n                <b-button class=\"mr-3\" @click=\"saveState1\" variant=\"primary\">Save Grid State</b-button>\n                <b-button @click=\"restoreState1\" variant=\"light\">Reset Grid State</b-button>\n              </b-col>\n              <b-col md=\"6\" class=\"text-right\">\n                Page Size:\n                <select @change=\"onPageSizeChanged1\" id=\"page-size-1\">\n                    <option value=\"10\" selected=\"\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                </select>\n                <b-button @click=\"onBtExport1\" class=\"ml-3\" size=\"sm\" variant=\"outline-success\">Export Excel</b-button>\n              </b-col>\n            </b-row>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- OPEN ORDERS GRID -->\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30 bg-2\">\n          <div class=\"card-body p-0\">\n            <h5 class=\"card-title p-3 pb-0 mb-3 mt-3\">Open Orders</h5>\n            <AgGridVue class=\"ag-theme-material\"\n                id=\"gridOrders\"\n                :defaultColDef=\"defaultColDef\"\n                :columnDefs=\"columnDefs\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData\"\n                :gridOptions=\"gridOptions\"\n                :suppressRowClickSelection=\"true\"\n                :excelStyles=\"excelStyles\"\n                @cellValueChanged=\"updateOrderGrid\"\n                @grid-ready=\"onGridReady\"\n                :pagination=\"true\"\n                :paginationPageSize=\"paginationPageSize\"\n                :getContextMenuItems=\"getContextMenu\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n            <b-row class=\"ml-3 mr-3 mt-2 mb-2\">\n              <b-col md=\"6\" class=\"text-left\">\n                <b-button class=\"mr-3\" @click=\"saveState\" variant=\"primary\">Save Grid State</b-button>\n                <b-button @click=\"restoreState\" variant=\"light\">Reset Grid State</b-button>\n              </b-col>\n              <b-col md=\"6\" class=\"text-right\">\n                Page Size:\n                <select @change=\"onPageSizeChanged\" id=\"page-size\">\n                    <option value=\"10\" selected=\"\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                </select>\n                <b-button @click=\"onBtExport\" class=\"ml-3\" size=\"sm\" variant=\"outline-success\">Export Excel</b-button>\n              </b-col>\n            </b-row>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- NEWLY RECORDED DEVICES -->\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30 bg-3\">\n          <div class=\"card-body p-0\">\n            <h5 class=\"card-title p-3 pb-0 mb-3 mt-3\">New Devices (last 30 days)</h5>\n            <AgGridVue class=\"ag-theme-material\"\n                id=\"gridDevices\"\n                :defaultColDef=\"defaultColDef2\"\n                :columnDefs=\"columnDefs2\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData2\"\n                :gridOptions=\"gridOptions2\"\n                :excelStyles=\"excelStyles2\"\n                :suppressRowClickSelection=\"true\"\n                @grid-ready=\"onGridReady2\"\n                :pagination=\"true\"\n                :paginationPageSize=\"paginationPageSize2\"\n                :getContextMenuItems=\"getContextMenu2\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n            <b-row class=\"ml-3 mr-3 mt-2 mb-2\">\n              <b-col md=\"6\" class=\"text-left\">\n                <b-button class=\"mr-3\" @click=\"saveState2\" variant=\"primary\">Save Grid State</b-button>\n                <b-button @click=\"restoreState2\" variant=\"light\">Reset Grid State</b-button>\n              </b-col>\n              <b-col md=\"6\" class=\"text-right\">\n                Page Size:\n                <select @change=\"onPageSizeChanged2\" id=\"page-size-2\">\n                    <option value=\"10\" selected=\"\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                </select>\n                <b-button @click=\"onBtExport2\" class=\"ml-3\" size=\"sm\" variant=\"outline-success\">Export Excel</b-button>\n              </b-col>\n            </b-row>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- INSPECTIONS NOT YET CARRIED OUT -->\n    <!-- <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30 bg-4\">\n          <div class=\"card-body p-0\">\n            <h5 class=\"card-title p-3 pb-0 mb-0\">Inspections not yet carried out</h5>\n              <b-row class=\"mr-3 p-3 pt-0\">\n                <b-col md=\"12\" class=\"mt-3\">\n                  <p style=\"font-style: italic;\">NOT IMPLEMENTED YET</p>\n                </b-col>\n              </b-row>\n          </div>\n        </div>\n      </div>\n    </div> -->\n\n  </div>\n</template>\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {\n    title: \"Dashboard\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES \"OPEN ORDERS\"\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      domLayout: null,\n      modules: AllModules,\n      paginationPageSize: null,\n\n      // AG-GRID VARIABLES \"ACTIVE INSPECTIONS\"\n      gridOptions1: null,\n      gridApi1: null,\n      columnApi1: null,\n      columnDefs1: null,\n      rowData1: null,\n      defaultColDef1: null,\n      excelStyles1: null,\n      paginationPageSize1: null,\n      selectedInspection: false,\n      \n      // AG-GRID VARIABLES \"DEVICES LAST 30 DAYS\"\n      gridOptions2: null,\n      gridApi2: null,\n      columnApi2: null,\n      columnDefs2: null,\n      rowData2: null,\n      defaultColDef2: null,\n      excelStyles2: null,\n      paginationPageSize2: null,\n      \n      // VUE VARIABLES\n      suppliers: [],\n      devices: [],\n      orders: [],\n      inspections: [],\n      ONumber: null,\n      DatOrder: null,\n      DatDelivery: null,\n      OType: null,\n      CNumber: null,\n      DelStatus: null,\n      Supplier: null,\n      date: null,\n      error: false,\n      optionSuppliers: [],\n      optionInspections: [],\n      optionTypes: [\n        { value: 'Sample', text: 'Sample' },\n        { value: 'Customer', text: 'Customer' },\n      ],\n      optionStatus: [\n        { value: 'Delivered', text: 'Delivered' },\n        { value: 'Not Delivered', text: 'Not Delivered' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.gridOptions1 = {};\n    this.gridOptions2 = {};\n    this.columnDefs = [\n      {headerName: \"Order Number\", field: \"txtOrderNumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"Order Date\", field: \"datOrder\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivery Date\", field: \"datDelivery\", filter: 'agTextColumnFilter', },\n      {headerName: \"Order Type\", field: \"txtOrderType\", filter: 'agTextColumnFilter', },\n      {headerName: \"Charge Number\", field: \"txtChargeNumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivery Status\", field: \"txtDeliveryStatus\", filter: 'agTextColumnFilter', editable: true, cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Delivered', 'Not Delivered']}, },\n      {headerName: \"Supplier\", field: \"idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false, },\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', editable: false, },\n    ],\n    this.columnDefs1 = [\n      {headerName: \"Inspection Number\", field: \"txtInspectionNumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"Status\", field: \"txtInspectionStatus\", filter: 'agTextColumnFilter', editable: true, cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Work In Progress', 'On Hold', 'Complete', 'Declined']},},\n      {headerName: \"Type\", field: \"txtInspectionType\", filter: 'agTextColumnFilter', },\n      {headerName: \"Inspector\", field: \"txtInspector\", filter: 'agTextColumnFilter',},\n      {headerName: \"Date\", field: \"datInspection\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivered on\", field: \"datDeliveredOn\", filter: 'agTextColumnFilter', },\n      {headerName: \"Requested on\", field: \"datRequestedOn\", filter: 'agTextColumnFilter', },\n      {headerName: \"Requested by\", field: \"txtRequestedBy\", filter: 'agTextColumnFilter', },\n      {headerName: \"Release\", field: \"txtRelease\", filter: 'agTextColumnFilter', },\n      {headerName: \"Release by\", field: \"txtReleaseBy\", filter: 'agTextColumnFilter', },\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ],\n    this.columnDefs2 = [\n      {headerName: \"Model Name\", field: \"idModel.txtModelName\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Serial Number\", field: \"txtSerialNumber\", filter: 'agTextColumnFilter',},\n      {headerName: \"Device Position\", field: \"txtDevicePosition\", filter: 'agTextColumnFilter',},\n      {headerName: \"Manufacturer\", field: \"idModel.idManufacturer.txtManufacturerName\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Supplier\", field: \"idModel.idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false},\n    ],\n    this.defaultColDef = { editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef1 = { editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef2 = { flex: 1, editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.paginationPageSize1 = 10;\n    this.paginationPageSize2 = 10;\n  },\n  methods: {\n    saveState(params) {\n      localStorage.setItem('openOrders_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    saveState1(params) {\n      localStorage.setItem('activeInspections_columnStats', JSON.stringify(this.gridOptions1.columnApi.getColumnState()));\n    },\n    saveState2(params) {\n      localStorage.setItem('lastDevices_columnStats', JSON.stringify(this.gridOptions2.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('openOrders_columnStats', null);\n    },\n    restoreState1() {\n      localStorage.setItem('activeInspections_columnStats', null);\n    },\n    restoreState2() {\n      localStorage.setItem('lastDevices_columnStats', null);\n    },\n    // OPEN ORDERS\n    onGridReady(params) {\n      if(JSON.parse(localStorage.getItem('openOrders_columnStats')) != null) {\n        this.gridApi = params.api;\n        params.columnApi.setColumnState(JSON.parse(localStorage.getItem('openOrders_columnStats')));\n        this.gridApi.setQuickFilter(\"Not Delivered\")\n      } else {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi\n        this.gridApi.setQuickFilter(\"Not Delivered\")\n      }\n    },\n    // ACTIVE INSPECTIONS\n    onGridReady1(params) {\n      if(JSON.parse(localStorage.getItem('activeInspections_columnStats')) != null) {\n        this.gridApi1 = params.api;\n        params.columnApi.setColumnState(JSON.parse(localStorage.getItem('activeInspections_columnStats')));\n      } else {\n        this.gridApi1 = params.api;\n        this.gridColumnApi1 = params.columnApi\n      }\n    },\n    // DEVICES LAST 30 DAYS\n    onGridReady2(params) {\n      if(JSON.parse(localStorage.getItem('lastDevices_columnStats')) != null || JSON.parse(localStorage.getItem('lastDevices_columnStats')) != undefined) {\n        this.gridApi2 = params.api;\n        params.columnApi.setColumnState(JSON.parse(localStorage.getItem('lastDevices_columnStats')));\n      } else {\n        this.gridApi2 = params.api;\n        this.gridColumnApi2 = params.columnApi\n      }\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onBtExport1() {\n      this.gridApi1.exportDataAsExcel({});\n    },\n    onBtExport2() {\n      this.gridApi2.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onPageSizeChanged1(newPageSize) {\n      var value = document.getElementById('page-size-1').value;\n      this.gridApi1.paginationSetPageSize(Number(value));\n    },\n    onPageSizeChanged2(newPageSize) {\n      var value = document.getElementById('page-size-2').value;\n      this.gridApi2.paginationSetPageSize(Number(value));\n    },\n    editInspectionMenu(params) {\n      window.localStorage.setItem('selInspect', params.node.data.id)\n      this.$router.push('inspection/inspection-list')\n    },\n    editOrderMenu(params) {\n      window.localStorage.setItem('selOrder', params.node.data.id)\n      this.$router.push('order/order-list')\n    },\n    editDeviceMenu(params) {\n      window.localStorage.setItem('selDevice', params.node.data.id)\n      this.$router.push('device/device-list')\n    },\n    async updateOrderGrid(event) {     \n      let endpoint = `/api/order/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtOrderNumber: event.node.data.txtOrderNumber,\n          datOrder: event.node.data.datOrder,\n          datDelivery: event.node.data.datDelivery,\n          txtOrderType: event.node.data.txtOrderType,\n          txtChargeNumber: event.node.data.txtChargeNumber,\n          txtDeliveryStatus: event.node.data.txtDeliveryStatus,\n          txtComment: event.node.data.txtComment,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async updateInspectionGrid(event) {     \n      let endpoint = `/api/inspection/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtInspectionNumber: event.node.data.txtInspectionNumber,\n          txtInspectionStatus: event.node.data.txtInspectionStatus,\n          txtInspectionType: event.node.data.txtInspectionType,\n          txtInspector: event.node.data.txtInspector,\n          datInspection: event.node.data.datInspection,\n          datDeliveredOn: event.node.data.datDeliveredOn,\n          datRequestedOn: event.node.data.datRequestedOn,\n          txtRequestedBy: event.node.data.txtRequestedBy,\n          txtLink: event.node.data.txtLink,\n          txtComment: event.node.data.txtComment,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async getUserInfo() {\n      // add the username of the logged in user to localStorage\n      let endpoint = `/api/user/`;\n      let data = await apiService(endpoint);\n      let requestUser = data[\"username\"];\n      let requestSuperuser = data[\"is_superuser\"]\n      window.localStorage.setItem(\"username\", requestUser);\n      window.localStorage.setItem(\"superuser\", requestSuperuser);\n    },\n    getOrder() {\n      if (!this.error) {\n        this.orders = [];\n        let endpoint = `/api/order-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orders.push(...data.results);\n            this.rowData = this.orders\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getSup() {\n      if (!this.error) {\n        this.suppliers = [];\n        let endpoint = `/api/supplier/`;\n        apiService(endpoint)\n          .then(data => {\n            this.suppliers.push(...data.results);\n            this.optionSuppliers = this.suppliers\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDevices() {\n      if (!this.error) {\n        this.devices = [];\n        let endpoint = `/api/device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.devices.push(...data.results);\n            this.rowData2 = this.devices\n              .filter(el => {\n                let diff = new Date() - new Date(el.datCreated);\n                const diffDays = Math.ceil(diff / (1000 * 60 * 60 * 24));\n                return (Number(diffDays) <= 30) ? el.datCreated : false;\n              })\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getInspections() {\n      if (!this.error) {\n        this.inspections = [];\n        let endpoint = `/api/inspection/`;\n        apiService(endpoint)\n          .then(data => {\n            this.inspections.push(...data.results);\n            this.rowData1 = this.inspections.filter(el => el.txtInspectionStatus == 'Work In Progress' || el.txtInspectionStatus == 'On Hold')\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Order',\n          action: () => this.editOrderMenu(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n    getContextMenu1(params) {\n      var result = [\n        {\n          name: 'Edit Inspection',\n          action: () => this.editInspectionMenu(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n    getContextMenu2(params) {\n      var result = [\n        {\n          name: 'Edit Device',\n          action: () => this.editDeviceMenu(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getSup();\n    this.getOrder();\n    this.getDevices();\n    this.getInspections();\n    this.getUserInfo();\n  },\n};\n</script>\n\n<style>\n\n.bg-1 {\n  background-color: rgba(139, 166, 255, 0.5);\n}\n.bg-2 {\n  background-color: rgba(209, 139, 255, 0.5);\n}\n.bg-3 {\n  background-color: rgba(139, 241, 255, 0.5);\n}\n.bg-4 {\n  background-color: rgba(139, 255, 207, 0.5);\n}\n\n</style>\n\n\n"]}]}