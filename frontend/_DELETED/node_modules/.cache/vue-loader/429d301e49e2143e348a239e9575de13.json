{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\device\\model-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\device\\model-list.vue","mtime":1598425749785},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\";\nimport { RichSelectModule } from '@ag-grid-enterprise/rich-select';\nimport { MenuModule } from '@ag-grid-enterprise/menu';\nimport { ColumnsToolPanelModule } from '@ag-grid-enterprise/column-tool-panel';\nimport { SetFilterModule } from '@ag-grid-enterprise/set-filter';\nimport { AllCommunityModules } from '@ag-grid-community/all-modules';\nimport { MasterDetailModule } from '@ag-grid-enterprise/master-detail';\n\nexport default {\n  metaInfo: {    \n    title: \"Model\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      columnDefsMod: null,\n      rowData: null,\n      rowDataMod: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: [\n        ClientSideRowModelModule,\n        SetFilterModule,\n        RichSelectModule,\n        MenuModule,\n        ColumnsToolPanelModule,\n        MasterDetailModule,\n      ],\n      suppliers: [],\n      manufacturers: [],\n      models: [],\n      show: false,\n      visible: false,\n      MName: '',\n      Manufacturer: '',\n      Supplier: '',\n      date: null,\n      next: null,\n      error: false,\n      optionsSupplier: [],\n      optionsManufacturer: [],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Model Name\", field: \"txtModelName\", filter: 'agTextColumnFilter', checkboxSelection: true,},\n      {headerName: \"Manufacturer\", field: \"idManufacturer.txtManufacturerName\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Supplier\", field: \"idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false},\n    ],\n    this.defaultColDef = {\n      // flex: 1,\n      editable: true,\n      resizable: true,\n      sortable: true,\n      filter: true,\n      floatingFilter: true,\n    };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n  },\n  mounted() {\n    this.gridApi = this.gridOptions.api;\n    this.gridColumnApi = this.gridOptions.columnApi;\n  },\n  methods: {\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    async cellValueChanged(event) {     \n      let endpoint = `/api/model/${event.node.data.id}/`;\n      console.log(event.node.data.id)\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtModelName: event.node.data.txtModelName,\n          // idManufacturer: event.node.data.idManufacturer,\n          // idSupplier: event.node.data.idSupplier,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    onGridReady(params) { \n      // this.autoSizeAll(false);\n    },\n    getManufacturer() {\n      if (!this.error) {\n        let endpoint = `/api/manufacturer/`;\n        apiService(endpoint)\n          .then(data => {\n            this.manufacturers.push(...data.results);\n            this.optionsManufacturer = this.manufacturers\n          })\n      }\n    },\n    getSupplier() {\n      if (!this.error) {\n        let endpoint = `/api/supplier/`;\n        apiService(endpoint)\n          .then(data => {\n            this.suppliers.push(...data.results);\n            this.optionsSupplier = this.suppliers\n          })\n      }\n    },\n    getModels() {\n      if (!this.error) {\n        let endpoint = `/api/model-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.models.push(...data.results);\n            this.rowData = this.models\n          })\n      }\n    },\n    addModel() {\n      if (this.MName) {\n        let endpoint = `/api/model/`;\n        apiService(endpoint, \"POST\", { \n          txtModelName: this.MName,\n          idManufacturer: this.Manufacturer,\n          idSupplier: this.Supplier,\n          })\n          .then(data => {\n            if (data) {\n              console.log(data)\n              this.models.unshift(data)\n            } else {\n              this.error = true;\n            }\n          })\n        this.emptyInput();\n        if (this.error) {\n          this.error = false;\n        }\n        } else {\n          this.error = true;\n        }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Model?\", {\n          title: \"Please Confirm\",\n          size: \"sm\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteModel();\n          }\n        })\n    },\n    async deleteModel() {\n      var selectedRows = this.gridApi.getSelectedRows();\n      let endpoint = `/api/model/${selectedRows[0].id}/`;\n      try {\n        var index = this.models.map(function(e) { return e.id; }).indexOf(selectedRows[0].id);\n        this.$delete(this.models, index)\n        await apiService(endpoint, \"DELETE\")\n        this.show = this.show ? false : true\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    emptyInput() {\n      this.MName = '',\n      this.Manufacturer = [],\n      this.Supplier = [],\n\n      this.$root.$emit('bv::toggle::collapse', 'collapse-e')\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n  },\n  created() {\n    this.getManufacturer();\n    this.getSupplier();\n    this.getModels();\n    this.getDateToday();\n  },\n};\n",{"version":3,"sources":["model-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"model-list.vue","sourceRoot":"src/views/app/device","sourcesContent":["<template>\n  <!-- ============ Body content start ============= -->\n  <div class=\"main-content\">\n    <breadcumb :page=\"'Model List'\" :folder=\"'Device'\" />\n    <b-row>\n      <!-- ICON BG -->\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card\n          class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\"\n        >\n          <i class=\"i-Tag\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Models</p>\n            <p class=\"inline text-primary text-24 line-height-1 mb-2\">{{ this.models.length }}</p>\n          </div>\n        </b-card>\n      </b-col>\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card\n          class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\"\n        >\n          <i class=\"i-Calendar\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Date</p>\n            <p class=\"text-primary text-24 line-height-1 mb-2\"><nobr>{{ this.date }}</nobr></p>\n          </div>\n        </b-card>\n      </b-col>\n    </b-row>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0 mb-3\">\n            <b-row class=\"ml-3\">\n              <i class=\"nav-icon i-Add mt-3\" style=\"font-size: 20px\" v-b-toggle.collapse-e></i>\n              <h5 class=\"card-title border-bottom p-3 mb-2\">New Model</h5>\n            </b-row>\n            <b-collapse id=\"collapse-e\" class=\"mt-3\">\n              <b-row class=\"ml-3 mt-3 mr-3\">\n                <b-col md=\"4\">\n                  <b-form-input id=\"input-1\" v-model=\"MName\" type=\"text\" required placeholder=\"Model Name\" ></b-form-input>\n                </b-col>\n                <b-col md=\"4\">\n                  <b-form-select  id=\"select-1\" v-model=\"Manufacturer\" :options=\"optionsManufacturer\" required value-field=\"id\" text-field=\"txtManufacturerName\"></b-form-select>\n                </b-col>\n                <b-col md=\"4\">\n                  <b-form-select  id=\"select-2\" v-model=\"Supplier\" :options=\"optionsSupplier\" required value-field=\"id\" text-field=\"txtSupplierName\"></b-form-select>\n                </b-col>\n              </b-row>\n              <b-row class=\"ml-3 mt-3 mr-3\">\n                <b-col md=\"6\">\n                  <b-button @click=\"emptyInput\" block variant=\"outline-primary\">Delete Input</b-button>\n                </b-col>\n                <b-col md=\"6\">\n                  <b-button @click=\"addModel\" block variant=\"primary\">Add Model</b-button>\n                </b-col>\n              </b-row>\n              <b-row class=\"ml-3 mt-3 mr-3\">\n                <b-col md=\"12\">\n                  <b-alert v-if=\"error\" show variant=\"alert alert-card alert-danger\" dismissible>\n                    <strong class=\"text-capitalize\">Error!</strong> The Input is not valid.\n                  </b-alert>\n                </b-col>\n              </b-row>\n            </b-collapse>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0\">\n            <AgGridVue class=\"ag-theme-alpine\"\n                id=\"gridModel\"\n                :defaultColDef=\"defaultColDef\"\n                :columnDefs=\"columnDefs\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData\"\n                :gridOptions=\"gridOptions\"\n                :suppressRowClickSelection=\"true\"\n                @grid-ready=\"onGridReady\"\n                @cellValueChanged=\"cellValueChanged\"\n                @row-selected=\"onRowSelected\"\n                :masterDetail=\"true\"\n                :detailCellRendererParams=\"detailCellRendererParams\"\n                :pagination=\"true\"\n                :paginationPageSize=\"10\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n            <div class=\"ml-3 mr-3 mt-2 mb-2 text-right\">\n                Page Size:\n                <select v-on:change=\"onPageSizeChanged()\" id=\"page-size\">\n                    <option value=\"10\" selected=\"\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                </select>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <b-collapse v-model=\"show\" class=\"ml-1 mr-3\">\n      <b-button @click=\"openModal\" variant=\"primary\">Delete Model</b-button>\n    </b-collapse>\n  </div>\n  <!-- ============ Body content End ============= -->\n</template>\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\";\nimport { RichSelectModule } from '@ag-grid-enterprise/rich-select';\nimport { MenuModule } from '@ag-grid-enterprise/menu';\nimport { ColumnsToolPanelModule } from '@ag-grid-enterprise/column-tool-panel';\nimport { SetFilterModule } from '@ag-grid-enterprise/set-filter';\nimport { AllCommunityModules } from '@ag-grid-community/all-modules';\nimport { MasterDetailModule } from '@ag-grid-enterprise/master-detail';\n\nexport default {\n  metaInfo: {    \n    title: \"Model\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      columnDefsMod: null,\n      rowData: null,\n      rowDataMod: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: [\n        ClientSideRowModelModule,\n        SetFilterModule,\n        RichSelectModule,\n        MenuModule,\n        ColumnsToolPanelModule,\n        MasterDetailModule,\n      ],\n      suppliers: [],\n      manufacturers: [],\n      models: [],\n      show: false,\n      visible: false,\n      MName: '',\n      Manufacturer: '',\n      Supplier: '',\n      date: null,\n      next: null,\n      error: false,\n      optionsSupplier: [],\n      optionsManufacturer: [],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Model Name\", field: \"txtModelName\", filter: 'agTextColumnFilter', checkboxSelection: true,},\n      {headerName: \"Manufacturer\", field: \"idManufacturer.txtManufacturerName\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Supplier\", field: \"idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false},\n    ],\n    this.defaultColDef = {\n      // flex: 1,\n      editable: true,\n      resizable: true,\n      sortable: true,\n      filter: true,\n      floatingFilter: true,\n    };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n  },\n  mounted() {\n    this.gridApi = this.gridOptions.api;\n    this.gridColumnApi = this.gridOptions.columnApi;\n  },\n  methods: {\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    async cellValueChanged(event) {     \n      let endpoint = `/api/model/${event.node.data.id}/`;\n      console.log(event.node.data.id)\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtModelName: event.node.data.txtModelName,\n          // idManufacturer: event.node.data.idManufacturer,\n          // idSupplier: event.node.data.idSupplier,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    onGridReady(params) { \n      // this.autoSizeAll(false);\n    },\n    getManufacturer() {\n      if (!this.error) {\n        let endpoint = `/api/manufacturer/`;\n        apiService(endpoint)\n          .then(data => {\n            this.manufacturers.push(...data.results);\n            this.optionsManufacturer = this.manufacturers\n          })\n      }\n    },\n    getSupplier() {\n      if (!this.error) {\n        let endpoint = `/api/supplier/`;\n        apiService(endpoint)\n          .then(data => {\n            this.suppliers.push(...data.results);\n            this.optionsSupplier = this.suppliers\n          })\n      }\n    },\n    getModels() {\n      if (!this.error) {\n        let endpoint = `/api/model-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.models.push(...data.results);\n            this.rowData = this.models\n          })\n      }\n    },\n    addModel() {\n      if (this.MName) {\n        let endpoint = `/api/model/`;\n        apiService(endpoint, \"POST\", { \n          txtModelName: this.MName,\n          idManufacturer: this.Manufacturer,\n          idSupplier: this.Supplier,\n          })\n          .then(data => {\n            if (data) {\n              console.log(data)\n              this.models.unshift(data)\n            } else {\n              this.error = true;\n            }\n          })\n        this.emptyInput();\n        if (this.error) {\n          this.error = false;\n        }\n        } else {\n          this.error = true;\n        }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Model?\", {\n          title: \"Please Confirm\",\n          size: \"sm\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteModel();\n          }\n        })\n    },\n    async deleteModel() {\n      var selectedRows = this.gridApi.getSelectedRows();\n      let endpoint = `/api/model/${selectedRows[0].id}/`;\n      try {\n        var index = this.models.map(function(e) { return e.id; }).indexOf(selectedRows[0].id);\n        this.$delete(this.models, index)\n        await apiService(endpoint, \"DELETE\")\n        this.show = this.show ? false : true\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    emptyInput() {\n      this.MName = '',\n      this.Manufacturer = [],\n      this.Supplier = [],\n\n      this.$root.$emit('bv::toggle::collapse', 'collapse-e')\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n  },\n  created() {\n    this.getManufacturer();\n    this.getSupplier();\n    this.getModels();\n    this.getDateToday();\n  },\n};\n</script>\n<style>\n  i:focus,\n  input:focus,\n  select:focus,\n  textarea:focus,\n  button:focus {\n      outline: none;\n  }\n</style>\n"]}]}