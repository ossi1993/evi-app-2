{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\inspection-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\inspection-list.vue","mtime":1600269795700},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Inspection\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID INSPECTION VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      modules: AllModules,\n      domLayout: null,\n      paginationPageSize: 0,\n\n      // AG-GRID SAMPLE VARIABLES\n      gridOptions1: null,\n      gridApi1: null,\n      columnApi1: null,\n      columnDefs1: null,\n      rowData1: null,\n      defaultColDef1: null,\n      paginationPageSize1: 0,\n\n      // AG-GRID ATTRIBUTES VARIABLES\n      gridOptions2: null,\n      gridApi2: null,\n      columnApi2: null,\n      columnDefs2: null,\n      rowData2: null,\n      defaultColDef2: null,\n      paginationPageSize2: 0,\n\n      // VUE VARIABLES\n      editRelease: false,\n      inspections: [],\n      samples: [],\n      attributes: [],\n      show: false,\n      date: null,\n      error: false,\n      selectedSample: false,\n      selectedInspection: false,\n      optionsInspectionStatus: [\n        { value: 'Work In Progress', text: 'Work In Progress' },\n        { value: 'On Hold', text: 'On Hold' },\n        { value: 'Complete', text: 'Complete' },\n        { value: 'Declined', text: 'Declined' },\n      ]\n    };\n  },\n  beforeMount() {\n    this.checkSuperuser();\n    this.gridOptions = {};\n    this.gridOptions1 = {};\n    this.gridOptions2 = {};\n    this.columnDefs = [\n      {headerName: \"Inspection Number\", field: \"txtInspectionNumber\", filter: 'agTextColumnFilter', checkboxSelection: true, minWidth: 200, },\n      {headerName: \"Inspection Status\", field: \"txtInspectionStatus\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Work In Progress', 'On Hold', 'Complete', 'Declined']}},\n      {headerName: \"Inspection Type\", field: \"txtInspectionType\", filter: 'agTextColumnFilter', minWidth: 100,},\n      {headerName: \"Inspector\", field: \"txtInspector\", filter: 'agTextColumnFilter', minWidth: 100,},\n      {headerName: \"Inspection Date\", field: \"datInspection\", filter: 'agTextColumnFilter', minWidth: 100,},\n      {headerName: \"Delivered On\", field: \"datDeliveredOn\", filter: 'agTextColumnFilter', minWidth: 100,},\n      {headerName: \"Requested On\", field: \"datRequestedOn\", filter: 'agTextColumnFilter', minWidth: 100,},\n      {headerName: \"Release\", field: \"txtRelease\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['NO', 'YES', 'CONDITIONALLY']}, editable: this.editRelease, minWidth: 100,},\n      {headerName: \"Release by\", field: \"txtReleaseBy\", filter: 'agTextColumnFilter', editable: this.editRelease, minWidth: 100,},\n      {headerName: \"Comment\", field: \"txtComment\", filter: 'agTextColumnFilter', minWidth: 100,},\n    ],\n    this.columnDefs1 = [\n      {headerName: \"Inspection Number\", field: \"idInspection.txtInspectionNumber\", filter: 'agTextColumnFilter', checkboxSelection: true,  minWidth: 100,},\n      {headerName: \"Item Description\", field: \"idOrderItem.idItem.txtDescription\", filter: 'agTextColumnFilter', minWidth: 100,},\n      {headerName: \"Article Number\", field: \"idOrderItem.idItem.txtArticlenumber\", filter: 'agTextColumnFilter', minWidth: 100,},\n    ],\n    this.columnDefs2 = [\n      {headerName: \"Key Attribute\", field: \"txtKeyAttribute\", filter: 'agTextColumnFilter',  minWidth: 100,},\n      {headerName: \"Name Attribute\", field: \"txtNameAttribute\", filter: 'agTextColumnFilter',  minWidth: 100,},\n      {headerName: \"Value Attribute\", field: \"txtValueAttribute\", filter: 'agTextColumnFilter', minWidth: 100,},\n      {headerName: \"Value Type\", field: \"txtValueType\", filter: 'agTextColumnFilter', minWidth: 100,},\n      {headerName: \"Measure Unit\", field: \"txtMeasureUnit\", filter: 'agTextColumnFilter', minWidth: 100,},\n      {headerName: \"Value Min\", field: \"txtValueMin\", filter: 'agTextColumnFilter',  minWidth: 100,},\n      {headerName: \"Value Max\", field: \"txtValueMax\", filter: 'agTextColumnFilter', minWidth: 100,},\n      {headerName: \"Value Tolerance\", field: \"txtValueTolerance\", filter: 'agTextColumnFilter', minWidth: 100,},\n    ],\n    this.defaultColDef = { editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef1 = { flex: 1, editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef2 = { editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.paginationPageSize1 = 10;\n    this.paginationPageSize2 = 10;  \n  },\n  methods: {\n    checkSuperuser() {\n      if(localStorage.getItem('superuser') == 'true') {\n        this.editRelease = true\n      } else {\n        this.editRelease = false\n      }\n    },\n    excelExportInspection() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onGridReady(params) { \n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi\n      setTimeout(() => {\n        this.getSelectedInspection(params)\n      }, 500);\n    },\n    onGridReady1(params) {\n      this.gridApi1 = params.api;\n      this.gridColumnApi1 = params.columnApi\n    },\n    onGridReady2(params) {\n      this.gridApi2 = params.api;\n      this.gridColumnApi2 = params.columnApi\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridOptions.paginationSetPageSize(Number(value));\n    },\n    onPageSizeChanged1(newPageSize) {\n      var value = document.getElementById('page-size-1').value;\n      this.gridOptions1.paginationSetPageSize(Number(value));\n    },\n    onPageSizeChanged2(newPageSize) {\n      var value = document.getElementById('page-size-2').value;\n      this.gridOptions2.paginationSetPageSize(Number(value));\n    },\n    onRowSelected(event) {\n      this.selectedInspection = this.selectedInspection ? false : true;\n      this.selectedSample = false;\n      if(event.node.selected == true) {\n        this.getSamples(event.data.id);\n      } else {\n        this.samples = [];\n        this.attributes = [];\n      }\n    },\n    onRowSelected1(event) {\n      this.selectedSample = this.selectedSample ? false : true\n      if(event.node.selected == true) {\n        this.getAttributes(event.data.id);\n      }\n    },\n    editInspection() {\n      this.$route.push('inspection')\n    },\n    async updateInspectionGrid(event) {     \n      let endpoint = `/api/inspection/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtInspectionNumber: event.node.data.txtInspectionNumber,\n          txtInspectionStatus: event.node.data.txtInspectionStatus,\n          txtInspectionType: event.node.data.txtInspectionType,\n          txtInspector: event.node.data.txtInspector,\n          datInspection: event.node.data.datInspection,\n          datDeliveredOn: event.node.data.datDeliveredOn,\n          datRequestedOn: event.node.data.datRequestedOn,\n          txtRequestedBy: event.node.data.txtRequestedBy,\n          txtRelease: event.node.data.txtRelease,\n          txtReleaseBy: event.node.data.txtReleaseBy,\n          txtComment: event.node.data.txtComment,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async updateAttributesGrid(event) {     \n      let endpoint = `/api/sample-attribute/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtKeyAttribute: event.node.data.txtKeyAttribute,\n          txtNameAttribute: event.node.data.txtNameAttribute,\n          txtValueAttribute: event.node.data.txtValueAttribute,\n          txtValueType: event.node.data.txtValueType,\n          txtMeasureUnit: event.node.data.txtMeasureUnit,\n          txtValueMin: event.node.data.txtValueMin,\n          txtValueMax: event.node.data.txtValueMax,\n          txtValueTolerance: event.node.data.txtValueTolerance,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Inspection? => \" + params.node.data.txtInspectionNumber, {\n          title: \"Please Confirm\",\n          size: \"sm\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteInspection(params);\n          }\n        })\n    },\n    openModal2(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Do you really want to delete the Attribute? => \" + params.node.data.txtNameAttribute, {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true })\n        .then(value => {\n          if (value) {\n            this.deleteAttribute(params);\n          }\n        })\n    },\n    async deleteInspection(params) {\n      let endpoint = `/api/inspection/${params.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\")\n        this.getInspections();\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async deleteAttribute(params) {\n      let endpoint = `/api/sample-attribute/${params.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\")\n        this.getAttributes(params.node.data.idSample);\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    getInspections() {\n      this.inspections = [];\n      let endpointInspection = `/api/inspection/`;\n      apiService(endpointInspection)\n        .then(data => {\n          this.inspections.push(...data.results);\n          this.rowData = this.inspections\n        })\n    },\n    getSamples(id) {\n      this.samples = [];\n      let endpointSample = `/api/sample-list/`;\n      apiService(endpointSample)\n        .then(data => {\n          this.samples.push(...data.results);\n          let el = this.samples.filter(e => e.idInspection.id == id)\n          this.rowData1 = el\n        })\n    },\n    getAttributes(id) {\n      this.attributes = [];\n      let endpointAttributes = `/api/sample-attribute/`;\n      apiService(endpointAttributes)\n        .then(data => {\n          this.attributes.push(...data.results);\n          let el = this.attributes.filter(e => e.idSample == id)\n          this.rowData2 = el\n        })\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getSelectedInspection(event) {\n      if(window.localStorage.getItem('selInspect') != null) {\n        let el = parseInt(localStorage.getItem('selInspect'));\n        event.api.forEachNode(rowNode => { rowNode.setSelected(rowNode.data.id === el) });\n      }\n    },\n    getContextMenu2(params) {\n      var result = [\n        {\n          name: 'Delete Attribute',\n          action: () => this.openModal2(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getInspections();\n    this.getDateToday();\n  },\n  beforeRouteLeave (to, from, next) {\n    window.localStorage.removeItem('selInspect');\n    next()\n  }\n};\n",null]}