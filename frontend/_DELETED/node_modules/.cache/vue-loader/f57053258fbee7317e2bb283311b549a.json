{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\item\\item-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\item\\item-list.vue","mtime":1600760109471},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Item\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      gridColumnApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: AllModules,\n\n      // AG-GRID ATTRIBUTES VARIABLES\n      gridOptions1: null,\n      gridApi1: null,\n      gridColumnApi1: null,\n      defaultColDef1: null,\n      columnDefs1: null,\n      rowData1: null,\n      defaultColDef1: null,\n      paginationPageSize1: 0,\n      \n      // VUE VARIABLES\n      items: [],\n      attributes: [],\n      tempAttributes: [],\n      models: [],\n      show: false,\n      selectedModels: [],\n      selectedAttributes: [],\n      attValue: null,\n      ArtNum: null,\n      Description: null,\n      Type: null,\n      Version: null,\n      Cost: null,\n      GtinEan: null,\n      Outline:null,\n      Link: null,\n      date: null,\n      error: false,\n      updateStatus: false,\n      updateId: null,\n      selectedItem: false,\n      optionsType: [\n        { code: 'Glass', label: 'Glass' },\n        { code: 'Case', label: 'Case' },\n        { code: 'Frame', label: 'Frame' },\n      ],\n      optionsOutline: [\n        { code: '2D', label: '2D' },\n        { code: '3D', label: '3D' },\n        { code: 'FC', label: 'Full Cover' },\n      ],\n      optionsModels: [],\n      optionAttributes: [],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.gridOptions1 = {};\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.columnDefs = [\n      {headerName: \"Article Number\", field: \"txtArticlenumber\", filter: 'agTextColumnFilter', cellRenderer: 'agGroupCellRenderer', checkboxSelection: true,},\n      {headerName: \"Item Description\", field: \"txtDescription\", filter: 'agTextColumnFilter', width: 300,},\n      {headerName: \"Type\", field: \"txtType\", filter: 'agTextColumnFilter', editable: true, cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Glass', 'Case', 'Frame']}, },\n      {headerName: \"Version\", field: \"txtVersion\", filter: 'agTextColumnFilter',},\n      {headerName: \"Cost\", field: \"curCost\", filter: 'agTextColumnFilter', hide: true,},\n      {headerName: \"GTIN / EAN\", field: \"txtGtinEan\", filter: 'agTextColumnFilter',},\n      {headerName: \"Outline\", field: \"txtOutline\", filter: 'agTextColumnFilter',},\n      {headerName: \"Link\", field: \"txtLink\", filter: 'agTextColumnFilter', hide: true, editable: false,},\n    ],\n    this.columnDefs1 = [\n      {headerName: \"Key Attribute\", field: \"txtKeyAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Name Attribute\", field: \"txtNameAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Attribute\", field: \"txtValueAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Type\", field: \"txtValueType\", filter: 'agTextColumnFilter', },\n      {headerName: \"Measure Unit\", field: \"txtMeasureUnit\", filter: 'agTextColumnFilter', },\n    ],\n    this.defaultColDef = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef1 = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.detailCellRendererParams = {\n      detailGridOptions: {\n        rowSelection: 'single',\n        suppressRowClickSelection: true,\n        enableRangeSelection: true,\n        pagination: true,\n        paginationAutoPageSize: true,\n        columnDefs: [\n          {\n            field: 'txtModelName',\n            headerName: 'Model Name'\n          },\n        ],\n        defaultColDef: { flex: 1, resizable: true, },\n      },\n      getDetailRowData: params => {\n        params.successCallback(params.data.deviceModels);\n      },\n    }\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.paginationPageSize1 = 10;\n  },\n  mounted() {\n    // if (window.ItemColState)\n    //    this.gridOptions.columnApi.setColumnState(window.ItemColState);\n    // else\n    //   this.gridApi = this.gridOptions.api;\n    //   this.gridColumnApi = this.gridOptions.columnApi;\n  },\n  computed: {\n    disabled: function () {\n      return !this.ArtNum ? true : !this.Description ? true : !this.Type ? true : !this.Version ? true : !this.Outline ? true : !this.selectedModels ? true : false; \n    },\n  },\n  methods: {\n    redrawRows() {\n      this.rowData = null;\n      this.items = [];\n      this.show = false;\n      this.getItems();\n    },\n    getModelIds() {\n      let el = this.selectedModels.map(e => e.id);\n    },\n    saveState() {\n      window.ItemColState = this.gridOptions.columnApi.getColumnState();\n    },\n    restoreState() {\n      window.ItemColState = null;\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    async updateItemGrid(event) {     \n      let endpoint = `/api/item/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtArticlenumber: event.node.data.txtArticlenumber,\n          txtDescription: event.node.data.txtDescription,\n          txtType: event.node.data.txtType,\n          txtVersion: event.node.data.txtVersion,\n          curCost: event.node.data.curCost,\n          txtGtinEan: event.node.data.txtGtinEan,\n          txtOutline: event.node.data.txtOutline,\n          txtLink: event.node.data.txtLink,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async updateAttributeGrid(event) {     \n      let endpoint = `/api/item-attribute/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtKeyAttribute: event.node.data.txtKeyAttribute,\n          txtNameAttribute: event.node.data.txtNameAttribute,\n          txtValueAttribute: event.node.data.txtValueAttribute,\n          txtValueType: event.node.data.txtValueType,\n          txtMeasureUnit: event.node.data.txtMeasureUnit,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    onRowSelectedItem(event) {\n      this.selectedItem = this.selectedItem ? false : true\n      if(event.node.selected == true) {\n        this.getAttributes(event.data.id);\n        window.localStorage.setItem('selItem', event.node.data.id)\n      } else {\n        this.gridApi.redrawRows();\n        this.attributes = [];\n      }\n    },\n    onGridReady(params) { \n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi\n    },\n    onGridReady1(params) {\n      this.gridApi1 = params.api;\n      this.gridColumnApi1 = params.columnApi\n    },\n    addItem() {\n      if (this.ArtNum) {\n        let models = this.selectedModels.map(e => e.id)\n        let endpoint = `/api/item/`;\n        apiService(endpoint, \"POST\", { \n          txtArticlenumber: this.ArtNum,\n          txtDescription: this.Description,\n          txtType: this.Type,\n          txtVersion: this.Version,\n          curCost: this.Cost,\n          txtGtinEan: this.GtinEan,\n          txtOutline: this.Outline,\n          txtLink: this.Link,\n          deviceModels: models,\n          })\n          .then(response => {\n            if (response != 'ERROR'){\n              for (let i = 0; i < this.selectedAttributes.length; i++) {\n                const el = this.selectedAttributes[i];\n                let endpointAttributes = `/api/item-attribute/`;\n                apiService(endpointAttributes, \"POST\", { \n                  txtKeyAttribute: el.txtKeyAttribute, \n                  txtNameAttribute: el.txtNameAttribute, \n                  txtValueAttribute: el.txtValueDefault, \n                  txtValueType: el.txtValueType, \n                  txtMeasureUnit: el.txtMeasureUnit,\n                  idItem: response.id,\n                })\n              };\n              this.getItems();\n              this.emptyInput()\n            } else {\n              this.error = true;\n            }\n          })\n        if (this.error) {\n          this.error = false;\n        }\n      }\n    },\n    editItemMenu(params) {\n      let sel = params.node.data;\n      let models = sel.deviceModels;\n      this.selectedModels = models;\n      this.ArtNum = sel.txtArticlenumber;\n      this.Description = sel.txtDescription;\n      this.Type = sel.txtType;\n      this.Version = sel.txtVersion;\n      this.Cost = sel.curCost;\n      this.GtinEan = sel.txtGtinEan;\n      this.Outline = sel.txtOutline;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.$root.$emit('bv::toggle::collapse', 'collapse-e');\n      document.documentElement.scrollTop = 0;\n    },\n    async updateItem() {     \n      let models = this.selectedModels.map(e => e.id);\n      let endpoint = `/api/item/${this.updateId}/`;\n      await apiService(endpoint, \"PATCH\", { \n        txtArticlenumber: this.ArtNum,\n        txtDescription: this.Description,\n        txtType: this.Type,\n        txtVersion: this.Version,\n        curCost: this.Cost,\n        txtGtinEan: this.GtinEan,\n        txtOutline: this.Outline,\n        deviceModels: models,})\n        .then(response => {\n          if (response != 'ERROR'){\n            for (let i = 0; i < this.selectedAttributes.length; i++) {\n              const el = this.selectedAttributes[i];\n              let endpointAttributes = `/api/item-attribute/`;\n              apiService(endpointAttributes, \"POST\", { \n                txtKeyAttribute: el.txtKeyAttribute, \n                txtNameAttribute: el.txtNameAttribute, \n                txtValueAttribute: el.txtValueDefault, \n                txtValueType: el.txtValueType, \n                txtMeasureUnit: el.txtMeasureUnit,\n                idItem: response.id,\n              })\n            };\n            this.selectedItem = this.selectedItem ? false : true\n            this.attributes = [];\n            this.emptyInput();\n            this.getItems();\n          } else {\n            this.error = true;\n          }\n        })\n      if (this.error) {\n        this.error = false;\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Item? => \" + params.node.data.txtArticlenumber, {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true })\n        .then(value => {\n          if (value) {\n            this.deleteItem(params);\n          }\n        })\n    },\n    openModal1(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Do you really want to delete the Attribute? => \" + params.node.data.txtNameAttribute, {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true })\n        .then(value => {\n          if (value) {\n            this.deleteAttribute(params);\n          }\n        })\n    },\n    async deleteItem(params) {\n      let endpoint = `/api/item/${params.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\")\n        this.getItems();\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async deleteAttribute(params) {\n      let endpoint = `/api/item-attribute/${params.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\")\n        this.show = this.show ? false : true\n        let id = window.localStorage.getItem('selItem');\n        this.getAttributes(id);\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    emptyInput() {\n      this.ArtNum = '',\n      this.Description = '',\n      this.Type = [],\n      this.Version = '',\n      this.Cost = '',\n      this.GtinEan = '',\n      this.Outline = [],\n      this.Link = '',\n      this.selectedModels = [],\n      this.selectedAttributes = [],\n      this.$root.$emit('bv::toggle::collapse', 'collapse-e')\n    },\n    getItems() {\n      if (!this.error) {\n        this.items = [];\n        let endpoint = `/api/item-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.items.push(...data.results);\n            this.rowData = this.items\n          })\n      }\n    },\n    getAttributes(id) {\n      if (!this.error) {\n        this.attributes = [];\n        let endpoint = `/api/item-attribute/`;\n        apiService(endpoint)\n          .then(data => {\n            this.attributes.push(...data.results);\n            let el = this.attributes.filter(e => e.idItem == id)\n            this.rowData1 = el\n          })\n      }\n    },\n    getTemplateAttributes() {\n      if (!this.error) {\n        this.tempAttributes = [];\n        let endpoint = `/api/item-template-attribute/`;\n        apiService(endpoint)\n          .then(data => {\n            this.tempAttributes.push(...data.results);\n            this.optionAttributes = this.tempAttributes\n          })\n      }\n    },\n    getDeviceModels() {\n      if (!this.error) {\n        this.models = [];\n        let endpoint = `/api/model/`;\n        apiService(endpoint)\n          .then(data => {\n            this.models.push(...data.results);\n            this.optionsModels = this.models\n          })\n      }\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Item',\n          action: () => this.editItemMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Item',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n    getContextMenu1(params) {\n      var result = [\n        {\n          name: 'Delete Attribute',\n          action: () => this.openModal1(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getItems();\n    this.getDeviceModels();\n    this.getDateToday();\n    this.getTemplateAttributes();\n  },\n};\n",null]}