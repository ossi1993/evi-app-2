{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\source\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\source\\src\\views\\app\\extraKits\\imageCropper.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\source\\src\\views\\app\\extraKits\\imageCropper.vue","mtime":1568332422000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\source\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\source\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\source\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\source\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport VueCropper from \"vue-cropperjs\";\nimport \"cropperjs/dist/cropper.css\";\n\nexport default {\n  components: {\n    VueCropper\n  },\n  metaInfo: {\n    // if no subcomponents specify a metaInfo.title, this title will be used\n    title: \"Image Cropper\"\n  },\n\n  data() {\n    return {\n      imgSrc: \"\",\n      cropImg: \"\"\n    };\n  },\n  methods: {\n    setImage(e) {\n      const file = e.target.files[0];\n      if (!file.type.includes(\"image/\")) {\n        alert(\"Please select an image file\");\n        return;\n      }\n      if (typeof FileReader === \"function\") {\n        const reader = new FileReader();\n        reader.onload = event => {\n          this.imgSrc = event.target.result;\n          // rebuild cropperjs with the updated source\n          this.$refs.cropper.replace(event.target.result);\n        };\n        reader.readAsDataURL(file);\n      } else {\n        alert(\"Sorry, FileReader API not supported\");\n      }\n    },\n    cropImage() {\n      // get image data for post processing, e.g. upload or setting image src\n      this.cropImg = this.$refs.cropper.getCroppedCanvas().toDataURL();\n    },\n    rotate() {\n      // guess what this does :)\n      this.$refs.cropper.rotate(90);\n    }\n  }\n};\n",{"version":3,"sources":["imageCropper.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"imageCropper.vue","sourceRoot":"src/views/app/extraKits","sourcesContent":["<template>\n  <div class=\"main-content\">\n    <breadcumb :page=\"'Image Cropper'\" :folder=\"'Extra Kits'\" />\n\n    <!-- imageCropper -->\n    <b-row>\n      <b-col md=\"6 mb-30\">\n        <b-card title=\"Input Crop Image\">\n          <input\n            type=\"file\"\n            name=\"image\"\n            accept=\"image/*\"\n            style=\"font-size: 1.2em; padding: 10px 0;\"\n            @change=\"setImage\"\n          />\n\n          <br />\n          <div\n            style=\"width: 100%; height:100%; border: 1px solid gray; display: inline-block;\"\n          >\n            <h4>Insert Image</h4>\n            <vue-cropper\n              ref=\"cropper\"\n              :guides=\"true\"\n              :view-mode=\"2\"\n              drag-mode=\"crop\"\n              :auto-crop-area=\"0.5\"\n              :min-container-width=\"250\"\n              :min-container-height=\"180\"\n              :background=\"true\"\n              :rotatable=\"true\"\n              :src=\"imgSrc\"\n              alt=\"Source Image\"\n              :img-style=\"{ width: '400px', height: '300px' }\"\n            >\n            </vue-cropper>\n          </div>\n\n          <br />\n          <br />\n\n          <div class=\"mt-4\">\n            <b-button\n              class=\"m-2\"\n              variant=\"primary\"\n              @click=\"cropImage\"\n              v-if=\"imgSrc != ''\"\n              >Crop</b-button\n            >\n            <b-button\n              class=\"m-2\"\n              variant=\"success\"\n              @click=\"rotate\"\n              v-if=\"imgSrc != ''\"\n              >Rotate</b-button\n            >\n          </div>\n        </b-card>\n      </b-col>\n      <b-col md=\"6\">\n        <b-card title=\"Output Crop Image\">\n          <img\n            :src=\"cropImg\"\n            style=\"width: 100%; height: 100%; border: 1px solid gray\"\n            alt=\"Cropped Image\"\n          />\n        </b-card>\n      </b-col>\n    </b-row>\n  </div>\n</template>\n<script>\nimport VueCropper from \"vue-cropperjs\";\nimport \"cropperjs/dist/cropper.css\";\n\nexport default {\n  components: {\n    VueCropper\n  },\n  metaInfo: {\n    // if no subcomponents specify a metaInfo.title, this title will be used\n    title: \"Image Cropper\"\n  },\n\n  data() {\n    return {\n      imgSrc: \"\",\n      cropImg: \"\"\n    };\n  },\n  methods: {\n    setImage(e) {\n      const file = e.target.files[0];\n      if (!file.type.includes(\"image/\")) {\n        alert(\"Please select an image file\");\n        return;\n      }\n      if (typeof FileReader === \"function\") {\n        const reader = new FileReader();\n        reader.onload = event => {\n          this.imgSrc = event.target.result;\n          // rebuild cropperjs with the updated source\n          this.$refs.cropper.replace(event.target.result);\n        };\n        reader.readAsDataURL(file);\n      } else {\n        alert(\"Sorry, FileReader API not supported\");\n      }\n    },\n    cropImage() {\n      // get image data for post processing, e.g. upload or setting image src\n      this.cropImg = this.$refs.cropper.getCroppedCanvas().toDataURL();\n    },\n    rotate() {\n      // guess what this does :)\n      this.$refs.cropper.rotate(90);\n    }\n  }\n};\n</script>\n\n"]}]}