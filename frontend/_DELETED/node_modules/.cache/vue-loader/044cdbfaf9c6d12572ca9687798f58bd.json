{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\order\\order-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\order\\order-list.vue","mtime":1601470552212},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Orders\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: AllModules,\n      paginationPageSize: null,\n\n      // AG-GRID ITEM VARIABLES\n      gridOptions1: null,\n      gridApi1: null,\n      columnApi1: null,\n      columnDefs1: null,\n      rowData1: null,\n      defaultColDef1: null,\n      paginationPageSize1: 0,\n\n      // AG-GRID DEVICE VARIABLES\n      gridOptions2: null,\n      gridApi2: null,\n      columnApi2: null,\n      columnDefs2: null,\n      rowData2: null,\n      defaultColDef2: null,\n      paginationPageSize2: 0,\n\n      // VUE VARIABLES\n      suppliers: [],\n      items: [],\n      devices: [],\n      orderItems: [],\n      orderDevices: [],\n      orders: [],\n      show: false,\n      name: null,\n      ONumber: null,\n      DatOrder: null,\n      DatDelivery: null,\n      OType: null,\n      CNumber: null,\n      DelStatus: null,\n      Supplier: null,\n      Comment: null,\n      Comment1: null,\n      Comment2: null,\n      addedItems: null,\n      filteredItems: null,\n      filteredDevices: null,\n      selectedItems: null,\n      selectedItemsId: null,\n      selectedDevices: null,\n      selectedDevicesId: null,\n      selectedOrderDevice: false,\n      selectedOrderId: null,\n      date: null,\n      error: false,\n      updateStatus: false,\n      updateId: null,\n      optionSupplier: [],\n      optionItems: [],\n      optionDevices: [],\n      optionType: [\n        { code: 'Sample Item', label: 'Sample Item' },\n        { code: 'Sample Device', label: 'Sample Device' },\n        { code: 'Customer', label: 'Customer' },\n      ],\n      optionStatus: [\n        { code: 'Delivered', label: 'Delivered' },\n        { code: 'Not Delivered', label: 'Not Delivered' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.gridOptions1 = {};\n    this.gridOptions2 = {};\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.paginationPageSize1 = 10;\n    this.paginationPageSize2 = 10;\n    this.defaultColDef = { editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef1 = { flex: 1, editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef2 = { flex: 1, editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.columnDefs = [\n      {headerName: \"Order Number\", field: \"txtOrderNumber\", filter: 'agTextColumnFilter', checkboxSelection: true,},\n      {headerName: \"Order Date\", field: \"datOrder\", filter: 'agTextColumnFilter',},\n      {headerName: \"Delivery Date\", field: \"datDelivery\", filter: 'agTextColumnFilter',},\n      {headerName: \"Order Type\", field: \"txtOrderType\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Sample Item', 'Sample Device', 'Customer']}},\n      {headerName: \"Charge Number\", field: \"txtChargeNumber\", filter: 'agTextColumnFilter',},\n      {headerName: \"Delivery Status\", field: \"txtDeliveryStatus\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Delivered', 'Not Delivered']}},\n      {headerName: \"Supplier\", field: \"idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ],\n    this.columnDefs1 = [\n      {headerName: \"Article Number\", field: \"idItem.txtArticlenumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"Description\", field: \"idItem.txtDescription\", filter: 'agTextColumnFilter', },\n      {headerName: \"Order Amount\", field: \"numOrderAmount\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivery Date\", field: \"datDelivery\", filter: 'agTextColumnFilter', },\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ]\n    this.columnDefs2 = [\n      {headerName: \"Serial Number\", field: \"idDevice.txtSerialNumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"Model Name\", field: \"idDevice.idModel.txtModelName\", filter: 'agTextColumnFilter', },\n      {headerName: \"Order Amount\", field: \"numOrderAmount\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivery Date\", field: \"datDelivery\", filter: 'agTextColumnFilter', },\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ]\n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('orders_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('orders_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  computed: {\n    disabled: function () {\n      if(this.OType == 'Sample Item') {\n        return !this.Supplier ? true : !this.ONumber ? true : !this.DatOrder ? true : !this.OType ? true : !this.DelStatus ? true : false; \n      } else if(this.OType == 'Sample Device') {\n        return !this.Supplier ? true : !this.ONumber ? true : !this.DatOrder ? true : !this.OType ? true : !this.DelStatus ? true : false; \n      } else {\n        return !this.Supplier ? true : !this.ONumber ? true : !this.DatOrder ? true : !this.OType ? true : !this.DelStatus ? true : false; \n      }\n    },\n    disabledDelivery: function () {\n      return !this.DatDelivery ? true : false\n    },\n  },\n  methods: {\n    saveState() {\n      localStorage.setItem('orders_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('orders_columnStats', null);\n    },\n    customItemLabel({ txtArticlenumber, txtDescription, txtVersion }) {\n      return `${txtArticlenumber} || ${txtDescription} || v${txtVersion}`\n    },\n    customDeviceLabel({ idModel, txtSerialNumber, txtDevicePosition }) {\n      return `${idModel.txtModelName} || ${txtSerialNumber} || ${txtDevicePosition}`\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onRowSelected(event) {\n      this.rowData1 = null;\n      this.rowData2 = null;\n      if(event.node.selected == true) {\n        if(event.data.txtOrderType == 'Sample Item') {\n          this.getOrderItem(event.data.id);\n          this.selectedOrderDevice = false;\n          this.selectedOrderItem = true;\n        } else if(event.data.txtOrderType == 'Sample Device') {\n          this.getOrderDevice(event.data.id);\n          this.selectedOrderItem = false;\n          this.selectedOrderDevice = true;\n        }\n      }\n    },\n    onGridReady(params) {\n      setTimeout(() => {\n        this.getSelectedOrder(params)\n      }, 500);\n    },\n    onGridReady1(params) {\n      this.gridApi1 = params.api;\n      this.gridColumnApi1 = params.columnApi\n    },\n    onGridReady2(params) {\n      this.gridApi1 = params.api;\n      this.gridColumnApi1 = params.columnApi\n    },\n    addOrder() {\n      let endpointOrder = `/api/order/`;\n      apiService(endpointOrder, \"POST\", { txtOrderNumber: this.ONumber, datOrder: this.DatOrder, datDelivery: this.DatDelivery, \n        txtOrderType: this.OType, txtChargeNumber: null, txtDeliveryStatus: this.DelStatus, txtComment: this.Comment, idSupplier: this.Supplier })\n        .then(response => {\n          if (this.OType == 'Sample Item' && response != 'ERROR') {\n            for (let i = 0; i < this.selectedItems.length; i++) {\n              let el = this.selectedItems[i];\n              let endpointItem = `/api/order-item/`;\n              apiService(endpointItem, \"POST\", { datOrder: this.DatOrder, datDelivery: this.DatDelivery, numOrderAmount: parseInt(el.numOrderAmount), \n              txtDeliveryStatus: this.DelStatus, idItem: el.id, idOrder: response.id, txtComment: this.Comment1, })\n              .catch(err => console.log(err));\n            };\n            this.getOrder();\n            this.emptyInput();\n          } else if (this.OType == 'Sample Device' && response != 'ERROR') {\n            for (let i = 0; i < this.selectedDevices.length; i++) {\n              const el = this.selectedDevices[i];\n              let endpointDevice = `/api/order-device/`;\n              apiService(endpointDevice, \"POST\", { datOrder: this.DatOrder, datDelivery: this.DatDelivery, numOrderAmount: parseInt(el.numOrderAmount), \n              txtDeliveryStatus: this.DelStatus, idDevice: el.id, idOrder: response.id, txtComment: this.Comment2, })\n              .catch(err => console.log(err));\n            }\n            this.getOrder();\n            this.emptyInput();\n          }})\n          .catch(err => console.log(err));\n    },\n    editOrderMenu(params) {\n      this.getOrderItem();\n      this.getOrderDevice();\n      let sel = params.node.data;\n      this.ONumber = sel.txtOrderNumber;\n      this.DatOrder = sel.datOrder;\n      this.DatDelivery = sel.datDelivery;\n      this.OType = sel.txtOrderType;\n      this.CNumber = sel.txtChargeNumber;\n      this.DelStatus = sel.txtDeliveryStatus;\n      this.Supplier = sel.idSupplier;\n      this.Comment = sel.Comment;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateOrderGrid(event) {     \n      let endpoint = `/api/order/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtOrderNumber: event.node.data.txtOrderNumber,\n          datOrder: event.node.data.datOrder,\n          datDelivery: event.node.data.datDelivery,\n          txtOrderType: event.node.data.txtOrderType,\n          txtChargeNumber: event.node.data.txtChargeNumber,\n          txtDeliveryStatus: event.node.data.txtDeliveryStatus,\n          txtComment: event.node.data.txtComment,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async updateOrder() {\n      let endpoint = `/api/order/${this.updateId}/`;\n      await apiService(endpoint, \"PATCH\", {\n        txtOrderNumber: this.ONumber,\n        datOrder: this.DatOrder,\n        datDelivery: this.DatDelivery,\n        txtOrderType: this.OType,\n        txtChargeNumber: this.CNumber,\n        txtDeliveryStatus: this.DelStatus, \n        txtComment: this.Comment, \n        idSupplier: this.Supplier.id })\n        .then(response => {\n          if (this.OType == 'Sample Item' && response != 'ERROR') {\n            if(this.selectedItems === true || this.selectedItems !== null) {\n              for (let i = 0; i < this.selectedItems.length; i++) {\n                const el = this.selectedItems[i];\n                let endpointItem = `/api/order-item/`;\n                apiService(endpointItem, \"POST\", { datOrder: this.DatOrder, datDelivery: null, numOrderAmount: parseInt(el.numOrderAmount), \n                idItem: el.id, idOrder: response.id })\n              };\n            }\n            if(this.filteredItems || this.filteredItems != null) {\n              for (let i = 0; i < this.filteredItems.length; i++) {\n                const el = this.filteredItems[i];\n                let endpointItem = `/api/order-item/${el.id}/`;\n                apiService(endpointItem, \"PATCH\", { datOrder: this.DatOrder, datDelivery: null, numOrderAmount: parseInt(el.numOrderAmount), \n                idItem: el.id, idOrder: response.id })\n              };\n            }\n            this.getOrder();\n            this.emptyInput();\n          } else if (this.OType == 'Sample Device' && response != 'ERROR') {\n            if(this.selectedDevices || this.selectedDevices != null) {\n              for (let i = 0; i < this.selectedDevices.length; i++) {\n                const el = this.selectedDevices[i];\n                let endpointDevice = `/api/order-device/`;\n                apiService(endpointDevice, \"POST\", { datOrder: this.DatOrder, datDelivery: null, numOrderAmount: parseInt(el.numOrderAmount), \n                idDevice: el.id, idOrder: response.id })\n              }\n            }\n            if(this.filteredDevices || this.filteredDevices != null) {\n              for (let i = 0; i < this.filteredDevices.length; i++) {\n                const el = this.filteredDevices[i];\n                let endpointDevice = `/api/order-device/${el.id}/`;\n                apiService(endpointDevice, \"PATCH\", { datOrder: this.DatOrder, datDelivery: null, numOrderAmount: parseInt(el.numOrderAmount), \n                idDevice: el.idDevice.id, idOrder: response.id })\n              }\n            }\n            this.getOrder();\n            this.emptyInput();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Order? => \" + params.node.data.txtOrderNumber, {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => { if (value) { this.deleteOrder(params); }})\n        .catch(err => console.log(err));\n    },\n    async deleteOrder(params) {\n      let endpoint = `/api/order/${params.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\")\n        this.getOrder();\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    emptyInput() {\n      this.ONumber = '',\n      this.DatOrder = '',\n      this.DatDelivery = '',\n      this.OType = [],\n      this.CNumber = '',\n      this.DelStatus = [],\n      this.Supplier = '',\n      this.Comment = '',\n      this.selectedItems = [],\n      this.selectedDevices = [],\n      this.show = false;\n    },\n    getOrder() {\n      if (!this.error) {\n        this.orders = [];\n        let endpoint = `/api/order-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orders.push(...data.results);\n            this.rowData = this.orders\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getSup() {\n      if (!this.error) {\n        this.suppliers = [];\n        let endpoint = `/api/supplier/`;\n        apiService(endpoint)\n          .then(data => {\n            this.suppliers.push(...data.results);\n            this.optionSupplier = this.suppliers\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getItem() {\n      if (!this.error) {\n        this.items = [];\n        let endpoint = `/api/item/`;\n        apiService(endpoint)\n          .then(data => {\n            this.items.push(...data.results);\n            this.optionItems = this.items\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getOrderItem(val) {\n      if (!this.error) {\n        this.orderItems = [];\n        let endpoint = `/api/order-item-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orderItems.push(...data.results);\n            if(this.updateId != null) {\n              this.filteredItems = this.orderItems.filter(e => e.idOrder.id == this.updateId)\n            }\n            if(val != null) {\n              this.rowData1 = this.orderItems.filter(e => e.idOrder.id == val)\n            }\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDevice() {\n      if (!this.error) {\n        this.devices = [];\n        let endpoint = `/api/device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.devices.push(...data.results);\n            this.optionDevices = this.devices\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getOrderDevice(val) {\n      if (!this.error) {\n        this.orderDevices = [];\n        let endpoint = `/api/order-device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orderDevices.push(...data.results);\n            if(this.updateId != null) {\n              this.filteredDevices = this.orderDevices.filter(e => e.idOrder.id == this.updateId)\n            }\n            if(val != null) {\n              this.rowData2 = this.orderDevices.filter(e => e.idOrder.id == val)\n            }\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Order',\n          action: () => this.editOrderMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Order',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getSelectedItemId(el) {\n      this.selectedItemsId = el.map(item => item.id)\n    },\n    getSelectedDeviceId(el) {\n      this.selectedDevicesId = el.map(device => device.id)\n    },\n    getSelectedOrder(event) {\n      if(window.localStorage.getItem('selOrder') != null) {\n        let el = parseInt(localStorage.getItem('selOrder'));\n        event.api.forEachNode(rowNode => { rowNode.setSelected(rowNode.data.id === el) });\n      }\n    },\n  },\n  created() {\n    this.getSup();\n    this.getOrder();\n    this.getDateToday();\n    this.getOrderDevice();\n    this.getOrderItem();\n    this.getDevice();\n    this.getItem();\n  },\n  beforeRouteLeave (to, from, next) {\n    window.localStorage.removeItem('selOrder');\n    next()\n  }\n};\n",{"version":3,"sources":["order-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"order-list.vue","sourceRoot":"src/views/app/order","sourcesContent":["<template>\n  <!-- ============ Body content start ============= -->\n  <div class=\"main-content\">\n    <breadcumb :page=\"'List Orders'\" :folder=\"'Order'\" />\n    <b-row>\n      <!-- ICON BG -->\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card\n          class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\"\n        >\n          <i class=\"i-Add-Cart\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Orders</p>\n            <p class=\"inline text-primary text-24 line-height-1 mb-2\">{{ this.orders.length }}</p>\n          </div>\n        </b-card>\n      </b-col>\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card\n          class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\"\n        >\n          <i class=\"i-Calendar\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Date</p>\n            <p class=\"text-primary text-24 line-height-1 mb-2\"><nobr>{{ this.date }}</nobr></p>\n          </div>\n        </b-card>\n      </b-col>\n    </b-row>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0 mb-3\">\n            <b-row class=\"ml-3\">\n              <i class=\"nav-icon i-Add mt-3\" style=\"font-size: 20px\" id=\"new-order-section\" @click=\"show = !show; updateStatus = false\"></i>\n              <h5 class=\"card-title border-bottom p-3 mb-2\">New Order</h5>\n            </b-row>\n            <div class=\"mt-3\" v-show=\"show\">\n              <!-- ORDER INPUT -->\n              <b-row class=\"mt-4 ml-3 mr-3\">\n                <b-col md=\"12\">\n                  <v-select  id=\"select-1\" v-model=\"OType\" :options=\"optionType\" required placeholder=\"Choose Order Type\" \n                  :disabled=\"updateStatus\" :reduce=\"OType => OType.code\"></v-select>\n                </b-col>\n              </b-row>\n              <b-row class=\"mt-3 ml-3 mr-3\" v-if=\"OType == 'Customer'\">\n                <b-col md=\"12\">\n                  <b-form-input id=\"input-1\" v-model=\"CNumber\" type=\"text\" placeholder=\"Charge Number\" ></b-form-input>\n                </b-col>\n              </b-row>\n              <b-row class=\"mt-3 ml-3 mr-3\">\n                <b-col md=\"4\">\n                  <b-form-input id=\"input-2\" v-model=\"ONumber\" type=\"text\" required placeholder=\"Order Number\" ></b-form-input>\n                </b-col>\n                <b-col md=\"4\">\n                  <b-form-datepicker  id=\"date-1\" v-model=\"DatOrder\" type=\"text\" placeholder=\"Order Date\" ></b-form-datepicker >\n                </b-col>\n                <b-col md=\"4\">\n                  <b-form-datepicker  id=\"date-2\" v-model=\"DatDelivery\" type=\"text\" placeholder=\"Delivery Date\" ></b-form-datepicker >\n                </b-col>\n              </b-row>\n              <b-row class=\"mt-3 ml-3 mr-3 mb-4\">\n                <b-col md=\"6\">\n                  <v-select  id=\"select-3\" v-model=\"Supplier\" :options=\"optionSupplier\" label=\"txtSupplierName\" required placeholder=\"Choose Supplier\" \n                  :reduce=\"Supplier => Supplier.id\"></v-select>\n                </b-col>\n                <b-col md=\"6\">\n                  <v-select  id=\"select-2\" v-model=\"DelStatus\" :options=\"optionStatus\" required placeholder=\"Choose Delivery Status\" \n                  :reduce=\"DelStatus => DelStatus.code\" :disabled=\"disabledDelivery\"></v-select>\n                </b-col>\n              </b-row>\n\n              <!-- ADD ITEMS -->\n              <div>\n                <b-row class=\"ml-3 mr-3 mt-3 border-top\" v-if=\"OType == 'Sample Item'\">\n                  <b-col md=\"12\">\n                    <h5 class=\"typo__label mt-4 mb-3\">Add Items to Order</h5>\n                    <multiselect\n                      v-model=\"selectedItems\" tag-placeholder=\"Choose Items\" placeholder=\"Search or add a item\" label=\"txtDescription\" \n                      track-by=\"id\" :options=\"optionItems\" :multiple=\"true\" :taggable=\"true\" :close-on-select=\"false\"\n                      :searchable=\"true\" open-direction=\"bottom\" :custom-label=\"customItemLabel\">\n                    </multiselect>\n                  </b-col>\n                </b-row>\n                <h5 class=\"mt-4 ml-4 mr-3\" v-show=\"selectedItems != null\">Order Amount of Items</h5>\n                <b-row class=\"ml-3 mr-3 mt-2\" v-for=\"item in selectedItems\" :key=\"item.id\">\n                  <b-input-group \n                      class=\"mt-2 ml-3 mr-3\" \n                      :prepend=\"item.txtArticlenumber + ' - ' + item.txtDescription\" >\n                    <b-form-input v-model=\"item.numOrderAmount\" type=\"number\" min=0 ></b-form-input>\n                  </b-input-group>\n                </b-row>\n              </div>\n\n              <!-- UPDATE ITEMS -->\n              <b-row class=\"mt-4 ml-3 mr-3 border-top\" v-if=\"OType == 'Sample Item' && updateStatus\">\n                <b-col md=\"12\">\n                  <h5 class=\"typo__label mt-4 mb-3\">Items of Order</h5>\n                  <b-row v-for=\"item in filteredItems\" :key=\"item.id\">\n                    <b-input-group \n                        class=\"mt-2 ml-3 mr-3\" \n                        :prepend=\"item.idItem.txtArticlenumber  + ' - ' + item.idItem.txtDescription\">\n                      <b-form-input v-model=\"item.numOrderAmount\" type=\"number\" min=0 ></b-form-input>\n                    </b-input-group>\n                  </b-row>\n                </b-col>\n              </b-row>\n\n              <!-- ADD DEVICES -->\n              <div>\n                <b-row class=\"ml-3 mr-3 mt-3 border-top\" v-if=\"OType == 'Sample Device'\">\n                  <b-col md=\"12\">\n                    <h5 class=\"typo__label mt-4 mb-3\">Devices of Order</h5>\n                    <multiselect\n                      v-model=\"selectedDevices\" tag-placeholder=\"Choose Devices\" placeholder=\"Search or add a device\" label=\"txtSerialNumber\" \n                      track-by=\"id\" :options=\"optionDevices\" :multiple=\"true\" :taggable=\"true\" :close-on-select=\"false\"\n                      :searchable=\"true\" open-direction=\"bottom\" :custom-label=\"customDeviceLabel\">\n                    </multiselect>\n                  </b-col>\n                </b-row>\n                <h5 class=\"mt-4 ml-4 mr-3\" v-show=\"selectedDevices != null\">Order Amount of Devices</h5>\n                <b-row class=\"ml-3 mr-3 mt-2\" v-for=\"device in selectedDevices\" :key=\"device.id\">\n                  <b-input-group \n                      class=\"mt-2 ml-3 mr-3\" \n                      :prepend=\"device.idModel.txtModelName + ' - ' + device.txtSerialNumber\" >\n                    <b-form-input v-model=\"device.numOrderAmount\" type=\"number\" min=0 ></b-form-input>\n                  </b-input-group>\n                </b-row>\n              </div>\n\n              <!-- UPDATE DEVICES -->\n              <b-row class=\"mt-4 ml-3 mr-3 border-top\" v-if=\"OType == 'Sample Device' && updateStatus\">\n                <b-col md=\"12\">\n                  <h5 class=\"typo__label mt-4 mb-3\">Devices of Order</h5>\n                  <b-row v-for=\"device in filteredDevices\" :key=\"device.id\">\n                    <b-input-group \n                        class=\"mt-2 ml-3 mr-3\" \n                        :prepend=\"device.idDevice.idModel.txtModelName + ' - ' + device.idDevice.txtSerialNumber\">\n                      <b-form-input v-model=\"device.numOrderAmount\" type=\"number\" min=0 ></b-form-input>\n                    </b-input-group>\n                  </b-row>\n                </b-col>\n              </b-row>\n\n              <!-- CUSTOMER -->\n              <b-row class=\"mt-4 ml-3 mr-3 border-top\" v-if=\"OType == 'Customer'\">\n                <b-col md=\"12\">\n                  <h1 class=\"mt-4 mb-3\">NOT IMPLEMENTED YET</h1>\n                </b-col>\n              </b-row>\n              <!-- NEW ITEM / UPDATE ITEM BUTTONS -->\n              <b-row class=\"ml-3 mr-3 mt-5\">\n                <b-col md=\"6\" v-if=\"!updateStatus\">\n                  <b-button @click=\"emptyInput\" block variant=\"outline-danger\">Delete Input</b-button>\n                </b-col>\n                <b-col md=\"6\" v-else-if=\"updateStatus\">\n                  <b-button @click=\"emptyInput\" block variant=\"outline-info\">Cancel</b-button>\n                </b-col>\n                <b-col md=\"6\" v-if=\"!updateStatus\">\n                  <b-button @click=\"addOrder\" block variant=\"success\" :disabled=\"disabled\">Add Order</b-button>\n                </b-col>\n                <b-col md=\"6\" v-else-if=\"updateStatus\">\n                  <b-button @click=\"updateOrder\" block variant=\"warning\" :disabled=\"disabled\">Update Order</b-button>\n                </b-col>\n              </b-row>\n              <b-row class=\"ml-3 mr-3\">\n                <b-col md=\"12\" class=\"mt-3\">\n                  <b-alert v-if=\"error\" show variant=\"alert alert-card alert-danger\" dismissible>\n                    <strong class=\"text-capitalize\">Error!</strong> The Input is not valid.\n                  </b-alert>\n                </b-col>\n              </b-row>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- AG-GRID ORDERS -->\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0\">\n            <h5 class=\"card-title p-3 pb-0 mb-3\">Orders</h5>\n            <AgGridVue class=\"ag-theme-alpine\"\n                id=\"gridOrders\"\n                :defaultColDef=\"defaultColDef\"\n                :columnDefs=\"columnDefs\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData\"\n                :gridOptions=\"gridOptions\"\n                :suppressRowClickSelection=\"true\"\n                :excelStyles=\"excelStyles\"\n                @grid-ready=\"onGridReady\"\n                @cellValueChanged=\"updateOrderGrid\"\n                @row-selected=\"onRowSelected\"\n                :masterDetail=\"true\"\n                :detailCellRendererParams=\"detailCellRendererParams\"\n                :pagination=\"true\"\n                :paginationPageSize=\"paginationPageSize\"\n                :getContextMenuItems=\"getContextMenu\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n            <div class=\"ml-3 mr-3 mt-2 mb-2 text-right\">\n                Page Size:\n                <select @change=\"onPageSizeChanged\" id=\"page-size\">\n                    <option value=\"10\" selected=\"\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                </select>\n                <b-button @click=\"onBtExport\" class=\"ml-3\" size=\"sm\" variant=\"outline-success\">Export Excel</b-button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- AG-GRID ITEMS -->\n    <div class=\"row\" v-if=\"rowData1 != null\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0\">\n            <h5 class=\"card-title p-3 pb-0 mb-3\">Items</h5>\n            <AgGridVue class=\"ag-theme-alpine\"\n                id=\"gridItems\"\n                :defaultColDef=\"defaultColDef1\"\n                :columnDefs=\"columnDefs1\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData1\"\n                :gridOptions=\"gridOptions1\"\n                @grid-ready=\"onGridReady1\"\n                :suppressRowClickSelection=\"true\"\n                :pagination=\"true\"\n                :paginationPageSize=\"paginationPageSize1\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- AG-GRID DEVICES -->\n    <div class=\"row\" v-if=\"rowData2 != null\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0\">\n            <h5 class=\"card-title p-3 pb-0 mb-3\">Devices</h5>\n            <AgGridVue class=\"ag-theme-alpine\"\n                id=\"gridDevices\"\n                :defaultColDef=\"defaultColDef2\"\n                :columnDefs=\"columnDefs2\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData2\"\n                :gridOptions=\"gridOptions2\"\n                @grid-ready=\"onGridReady2\"\n                :suppressRowClickSelection=\"true\"\n                :pagination=\"true\"\n                :paginationPageSize=\"paginationPageSize2\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <b-row class=\"ml-1 mr-3 mb-4\">\n      <b-button class=\"mr-3\" @click=\"saveState\" variant=\"primary\">Save Grid State</b-button>\n      <b-button @click=\"restoreState\" variant=\"outline-light\">Reset Grid State</b-button>\n    </b-row>\n  </div>\n\n  <!-- ============ Body content End ============= -->\n\n</template>\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Orders\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: AllModules,\n      paginationPageSize: null,\n\n      // AG-GRID ITEM VARIABLES\n      gridOptions1: null,\n      gridApi1: null,\n      columnApi1: null,\n      columnDefs1: null,\n      rowData1: null,\n      defaultColDef1: null,\n      paginationPageSize1: 0,\n\n      // AG-GRID DEVICE VARIABLES\n      gridOptions2: null,\n      gridApi2: null,\n      columnApi2: null,\n      columnDefs2: null,\n      rowData2: null,\n      defaultColDef2: null,\n      paginationPageSize2: 0,\n\n      // VUE VARIABLES\n      suppliers: [],\n      items: [],\n      devices: [],\n      orderItems: [],\n      orderDevices: [],\n      orders: [],\n      show: false,\n      name: null,\n      ONumber: null,\n      DatOrder: null,\n      DatDelivery: null,\n      OType: null,\n      CNumber: null,\n      DelStatus: null,\n      Supplier: null,\n      Comment: null,\n      Comment1: null,\n      Comment2: null,\n      addedItems: null,\n      filteredItems: null,\n      filteredDevices: null,\n      selectedItems: null,\n      selectedItemsId: null,\n      selectedDevices: null,\n      selectedDevicesId: null,\n      selectedOrderDevice: false,\n      selectedOrderId: null,\n      date: null,\n      error: false,\n      updateStatus: false,\n      updateId: null,\n      optionSupplier: [],\n      optionItems: [],\n      optionDevices: [],\n      optionType: [\n        { code: 'Sample Item', label: 'Sample Item' },\n        { code: 'Sample Device', label: 'Sample Device' },\n        { code: 'Customer', label: 'Customer' },\n      ],\n      optionStatus: [\n        { code: 'Delivered', label: 'Delivered' },\n        { code: 'Not Delivered', label: 'Not Delivered' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.gridOptions1 = {};\n    this.gridOptions2 = {};\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.paginationPageSize1 = 10;\n    this.paginationPageSize2 = 10;\n    this.defaultColDef = { editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef1 = { flex: 1, editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef2 = { flex: 1, editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.columnDefs = [\n      {headerName: \"Order Number\", field: \"txtOrderNumber\", filter: 'agTextColumnFilter', checkboxSelection: true,},\n      {headerName: \"Order Date\", field: \"datOrder\", filter: 'agTextColumnFilter',},\n      {headerName: \"Delivery Date\", field: \"datDelivery\", filter: 'agTextColumnFilter',},\n      {headerName: \"Order Type\", field: \"txtOrderType\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Sample Item', 'Sample Device', 'Customer']}},\n      {headerName: \"Charge Number\", field: \"txtChargeNumber\", filter: 'agTextColumnFilter',},\n      {headerName: \"Delivery Status\", field: \"txtDeliveryStatus\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Delivered', 'Not Delivered']}},\n      {headerName: \"Supplier\", field: \"idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ],\n    this.columnDefs1 = [\n      {headerName: \"Article Number\", field: \"idItem.txtArticlenumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"Description\", field: \"idItem.txtDescription\", filter: 'agTextColumnFilter', },\n      {headerName: \"Order Amount\", field: \"numOrderAmount\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivery Date\", field: \"datDelivery\", filter: 'agTextColumnFilter', },\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ]\n    this.columnDefs2 = [\n      {headerName: \"Serial Number\", field: \"idDevice.txtSerialNumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"Model Name\", field: \"idDevice.idModel.txtModelName\", filter: 'agTextColumnFilter', },\n      {headerName: \"Order Amount\", field: \"numOrderAmount\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivery Date\", field: \"datDelivery\", filter: 'agTextColumnFilter', },\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ]\n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('orders_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('orders_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  computed: {\n    disabled: function () {\n      if(this.OType == 'Sample Item') {\n        return !this.Supplier ? true : !this.ONumber ? true : !this.DatOrder ? true : !this.OType ? true : !this.DelStatus ? true : false; \n      } else if(this.OType == 'Sample Device') {\n        return !this.Supplier ? true : !this.ONumber ? true : !this.DatOrder ? true : !this.OType ? true : !this.DelStatus ? true : false; \n      } else {\n        return !this.Supplier ? true : !this.ONumber ? true : !this.DatOrder ? true : !this.OType ? true : !this.DelStatus ? true : false; \n      }\n    },\n    disabledDelivery: function () {\n      return !this.DatDelivery ? true : false\n    },\n  },\n  methods: {\n    saveState() {\n      localStorage.setItem('orders_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('orders_columnStats', null);\n    },\n    customItemLabel({ txtArticlenumber, txtDescription, txtVersion }) {\n      return `${txtArticlenumber} || ${txtDescription} || v${txtVersion}`\n    },\n    customDeviceLabel({ idModel, txtSerialNumber, txtDevicePosition }) {\n      return `${idModel.txtModelName} || ${txtSerialNumber} || ${txtDevicePosition}`\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onRowSelected(event) {\n      this.rowData1 = null;\n      this.rowData2 = null;\n      if(event.node.selected == true) {\n        if(event.data.txtOrderType == 'Sample Item') {\n          this.getOrderItem(event.data.id);\n          this.selectedOrderDevice = false;\n          this.selectedOrderItem = true;\n        } else if(event.data.txtOrderType == 'Sample Device') {\n          this.getOrderDevice(event.data.id);\n          this.selectedOrderItem = false;\n          this.selectedOrderDevice = true;\n        }\n      }\n    },\n    onGridReady(params) {\n      setTimeout(() => {\n        this.getSelectedOrder(params)\n      }, 500);\n    },\n    onGridReady1(params) {\n      this.gridApi1 = params.api;\n      this.gridColumnApi1 = params.columnApi\n    },\n    onGridReady2(params) {\n      this.gridApi1 = params.api;\n      this.gridColumnApi1 = params.columnApi\n    },\n    addOrder() {\n      let endpointOrder = `/api/order/`;\n      apiService(endpointOrder, \"POST\", { txtOrderNumber: this.ONumber, datOrder: this.DatOrder, datDelivery: this.DatDelivery, \n        txtOrderType: this.OType, txtChargeNumber: null, txtDeliveryStatus: this.DelStatus, txtComment: this.Comment, idSupplier: this.Supplier })\n        .then(response => {\n          if (this.OType == 'Sample Item' && response != 'ERROR') {\n            for (let i = 0; i < this.selectedItems.length; i++) {\n              let el = this.selectedItems[i];\n              let endpointItem = `/api/order-item/`;\n              apiService(endpointItem, \"POST\", { datOrder: this.DatOrder, datDelivery: this.DatDelivery, numOrderAmount: parseInt(el.numOrderAmount), \n              txtDeliveryStatus: this.DelStatus, idItem: el.id, idOrder: response.id, txtComment: this.Comment1, })\n              .catch(err => console.log(err));\n            };\n            this.getOrder();\n            this.emptyInput();\n          } else if (this.OType == 'Sample Device' && response != 'ERROR') {\n            for (let i = 0; i < this.selectedDevices.length; i++) {\n              const el = this.selectedDevices[i];\n              let endpointDevice = `/api/order-device/`;\n              apiService(endpointDevice, \"POST\", { datOrder: this.DatOrder, datDelivery: this.DatDelivery, numOrderAmount: parseInt(el.numOrderAmount), \n              txtDeliveryStatus: this.DelStatus, idDevice: el.id, idOrder: response.id, txtComment: this.Comment2, })\n              .catch(err => console.log(err));\n            }\n            this.getOrder();\n            this.emptyInput();\n          }})\n          .catch(err => console.log(err));\n    },\n    editOrderMenu(params) {\n      this.getOrderItem();\n      this.getOrderDevice();\n      let sel = params.node.data;\n      this.ONumber = sel.txtOrderNumber;\n      this.DatOrder = sel.datOrder;\n      this.DatDelivery = sel.datDelivery;\n      this.OType = sel.txtOrderType;\n      this.CNumber = sel.txtChargeNumber;\n      this.DelStatus = sel.txtDeliveryStatus;\n      this.Supplier = sel.idSupplier;\n      this.Comment = sel.Comment;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateOrderGrid(event) {     \n      let endpoint = `/api/order/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtOrderNumber: event.node.data.txtOrderNumber,\n          datOrder: event.node.data.datOrder,\n          datDelivery: event.node.data.datDelivery,\n          txtOrderType: event.node.data.txtOrderType,\n          txtChargeNumber: event.node.data.txtChargeNumber,\n          txtDeliveryStatus: event.node.data.txtDeliveryStatus,\n          txtComment: event.node.data.txtComment,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async updateOrder() {\n      let endpoint = `/api/order/${this.updateId}/`;\n      await apiService(endpoint, \"PATCH\", {\n        txtOrderNumber: this.ONumber,\n        datOrder: this.DatOrder,\n        datDelivery: this.DatDelivery,\n        txtOrderType: this.OType,\n        txtChargeNumber: this.CNumber,\n        txtDeliveryStatus: this.DelStatus, \n        txtComment: this.Comment, \n        idSupplier: this.Supplier.id })\n        .then(response => {\n          if (this.OType == 'Sample Item' && response != 'ERROR') {\n            if(this.selectedItems === true || this.selectedItems !== null) {\n              for (let i = 0; i < this.selectedItems.length; i++) {\n                const el = this.selectedItems[i];\n                let endpointItem = `/api/order-item/`;\n                apiService(endpointItem, \"POST\", { datOrder: this.DatOrder, datDelivery: null, numOrderAmount: parseInt(el.numOrderAmount), \n                idItem: el.id, idOrder: response.id })\n              };\n            }\n            if(this.filteredItems || this.filteredItems != null) {\n              for (let i = 0; i < this.filteredItems.length; i++) {\n                const el = this.filteredItems[i];\n                let endpointItem = `/api/order-item/${el.id}/`;\n                apiService(endpointItem, \"PATCH\", { datOrder: this.DatOrder, datDelivery: null, numOrderAmount: parseInt(el.numOrderAmount), \n                idItem: el.id, idOrder: response.id })\n              };\n            }\n            this.getOrder();\n            this.emptyInput();\n          } else if (this.OType == 'Sample Device' && response != 'ERROR') {\n            if(this.selectedDevices || this.selectedDevices != null) {\n              for (let i = 0; i < this.selectedDevices.length; i++) {\n                const el = this.selectedDevices[i];\n                let endpointDevice = `/api/order-device/`;\n                apiService(endpointDevice, \"POST\", { datOrder: this.DatOrder, datDelivery: null, numOrderAmount: parseInt(el.numOrderAmount), \n                idDevice: el.id, idOrder: response.id })\n              }\n            }\n            if(this.filteredDevices || this.filteredDevices != null) {\n              for (let i = 0; i < this.filteredDevices.length; i++) {\n                const el = this.filteredDevices[i];\n                let endpointDevice = `/api/order-device/${el.id}/`;\n                apiService(endpointDevice, \"PATCH\", { datOrder: this.DatOrder, datDelivery: null, numOrderAmount: parseInt(el.numOrderAmount), \n                idDevice: el.idDevice.id, idOrder: response.id })\n              }\n            }\n            this.getOrder();\n            this.emptyInput();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Order? => \" + params.node.data.txtOrderNumber, {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => { if (value) { this.deleteOrder(params); }})\n        .catch(err => console.log(err));\n    },\n    async deleteOrder(params) {\n      let endpoint = `/api/order/${params.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\")\n        this.getOrder();\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    emptyInput() {\n      this.ONumber = '',\n      this.DatOrder = '',\n      this.DatDelivery = '',\n      this.OType = [],\n      this.CNumber = '',\n      this.DelStatus = [],\n      this.Supplier = '',\n      this.Comment = '',\n      this.selectedItems = [],\n      this.selectedDevices = [],\n      this.show = false;\n    },\n    getOrder() {\n      if (!this.error) {\n        this.orders = [];\n        let endpoint = `/api/order-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orders.push(...data.results);\n            this.rowData = this.orders\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getSup() {\n      if (!this.error) {\n        this.suppliers = [];\n        let endpoint = `/api/supplier/`;\n        apiService(endpoint)\n          .then(data => {\n            this.suppliers.push(...data.results);\n            this.optionSupplier = this.suppliers\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getItem() {\n      if (!this.error) {\n        this.items = [];\n        let endpoint = `/api/item/`;\n        apiService(endpoint)\n          .then(data => {\n            this.items.push(...data.results);\n            this.optionItems = this.items\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getOrderItem(val) {\n      if (!this.error) {\n        this.orderItems = [];\n        let endpoint = `/api/order-item-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orderItems.push(...data.results);\n            if(this.updateId != null) {\n              this.filteredItems = this.orderItems.filter(e => e.idOrder.id == this.updateId)\n            }\n            if(val != null) {\n              this.rowData1 = this.orderItems.filter(e => e.idOrder.id == val)\n            }\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDevice() {\n      if (!this.error) {\n        this.devices = [];\n        let endpoint = `/api/device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.devices.push(...data.results);\n            this.optionDevices = this.devices\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getOrderDevice(val) {\n      if (!this.error) {\n        this.orderDevices = [];\n        let endpoint = `/api/order-device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orderDevices.push(...data.results);\n            if(this.updateId != null) {\n              this.filteredDevices = this.orderDevices.filter(e => e.idOrder.id == this.updateId)\n            }\n            if(val != null) {\n              this.rowData2 = this.orderDevices.filter(e => e.idOrder.id == val)\n            }\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Order',\n          action: () => this.editOrderMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Order',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getSelectedItemId(el) {\n      this.selectedItemsId = el.map(item => item.id)\n    },\n    getSelectedDeviceId(el) {\n      this.selectedDevicesId = el.map(device => device.id)\n    },\n    getSelectedOrder(event) {\n      if(window.localStorage.getItem('selOrder') != null) {\n        let el = parseInt(localStorage.getItem('selOrder'));\n        event.api.forEachNode(rowNode => { rowNode.setSelected(rowNode.data.id === el) });\n      }\n    },\n  },\n  created() {\n    this.getSup();\n    this.getOrder();\n    this.getDateToday();\n    this.getOrderDevice();\n    this.getOrderItem();\n    this.getDevice();\n    this.getItem();\n  },\n  beforeRouteLeave (to, from, next) {\n    window.localStorage.removeItem('selOrder');\n    next()\n  }\n};\n</script>\n<style>\n  i:focus,\n  input:focus,\n  select:focus,\n  textarea:focus,\n  button:focus {\n      outline: none;\n  }\n  .multiselect__input, .multiselect__placeholder, .multiselect__option, .multiselect__tags {\n    font-size: 14px!important;\n  }\n  #new-order-section {\n    cursor: pointer;\n    outline: none;\n  }\n  .input-group-append, .input-group-prepend, .dropdown-toggle {\n    width: auto!important;\n  }\n  .input-group-text {\n    font-weight: 800!important;\n  }\n</style>\n"]}]}