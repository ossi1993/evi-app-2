{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\inspection.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\inspection.vue","mtime":1600267395520},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport $ from 'jquery';\nimport print from 'print-js'\nimport { Color } from '@ag-grid-community/all-modules';\n\n\nexport default {\n  metaInfo: {    \n    title: \"New Inspection\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // TEST VARIABLES\n      el: '',\n      elements: [],\n\n      // DEVICE VARIABLES\n      manufacturers: [],\n      suppliers: [],\n      models: [],\n      devices: [],\n      Manufacturer: '',\n      Supplier: '',\n      Model: '',\n      Device: '',\n      optionManufacturer: [],\n      optionSupplier: [],\n      optionModel: [],\n      optionOrderDevice: [],\n      filteredModel: '',\n      filteredDevice: '',\n\n      // ITEM VARIABLES\n      Item: [],\n      ItemTypeOne: null,\n      ItemTypeTwo: null,\n      ItemTypeThree: null,\n      ItemVersionOne: null,\n      ItemVersionTwo: null,\n      ItemVersionThree: null,\n      selectedItemOne: null,\n      selectedItemTwo: null,\n      selectedItemThree: null,\n      items: [],\n      orderItems: [],\n      optionItem: [],\n      optionItemType: [],\n      optionItemVersion: [],\n      optionOrderItem: [],\n      filteredItemTypeOne: [],\n      filteredItemTypeTwo: [],\n      filteredItemTypeThree: [],\n      filteredItemVersionOne: [],\n      filteredItemVersionTwo: [],\n      filteredItemVersionThree: [],\n      setItemOne: false,\n      setItemTwo: false,\n      setItemThree: false,\n\n      // TEMPLATE VARIABLES\n      templates: [],\n      glassAttStatus: false,\n      frameSAttStatus: false,\n      frameEAttStatus: false,\n      caseAttStatus: false,\n      glassAtt1: [],\n      glassAtt2: [],\n      glassAtt3: [],\n      glassAtt4: [],\n      glassAtt5: [],\n      caseAtt1: [],\n      caseAtt2: [],\n      caseAtt3: [],\n      caseAtt4: [],\n      caseAtt5: [],\n      frameSAtt1: [],\n      frameSAtt2: [],\n      frameSAtt3: [],\n      frameSAtt4: [],\n      frameSAtt5: [],\n      frameEAtt1: [],\n      frameEAtt2: [],\n      frameEAtt3: [],\n      frameEAtt4: [],\n      frameEAtt5: [],\n      attsDisctinct: 0,\n\n      // RELEASE & NOTES\n      IStatus: 'Work In Progress',\n      IType: null,\n      DatInspection: null,\n      DatDeliveredOn: null,\n      DatRequestedOn: null,\n      RequestedBy: null,\n      Inspector: null,\n      Release: null,\n      ReleaseBy: null,\n      Comment: null,\n      optionRelease: [\n        { value: 'YES', text: 'Yes' },\n        { value: 'NO', text: 'No' },\n        { value: 'CONDITIONALLY', text: 'Conditionally' },\n      ],\n\n      // VUE VARIABLES\n      error: false,\n      InspectionNumber: '',\n      Superuser: '',\n    };\n  },\n  mounted() {\n    this.Superuser = localStorage.getItem(\"superuser\")\n  },\n  methods: {\n    setSelectedItem() {\n      this.Item = [];\n      if(this.selectedItemOne) {\n        if(this.selectedItemTwo) {\n          if(this.selectedItemThree) {\n            this.Item.push(this.selectedItemOne, this.selectedItemTwo, this.selectedItemThree)\n          } else {\n            this.Item.push(this.selectedItemOne, this.selectedItemTwo)\n          }\n        } else {\n          this.Item.push(this.selectedItemOne)\n        }\n      }\n    },\n    searchFilterModel(event) {\n      if (event) {\n        try { this.filteredModel = this.optionModel.filter(e => e.idManufacturer == this.Manufacturer && e.idSupplier == event); }\n        catch(e) {}\n      }\n    },\n    searchFilterDevice(event) {\n      if (event) {\n        try { this.filteredDevice = this.optionOrderDevice.filter(e => e.idDevice.idModel.id == event && e.txtDeliveryStatus == 'Delivered'); }\n        catch(e) {}\n      }\n    },\n    searchFilterItemTypeOne(event) {\n      if (event) {\n        try { \n          const result = this.optionItem.filter(e => e.txtType == event); \n          const arr = [];\n          const map = new Map();\n          for (const item of result) {\n            if(!map.has(item.txtVersion)){\n              map.set(item.txtVersion, true);\n              arr.push(item.txtVersion);\n            }\n          } this.filteredItemTypeOne = arr;\n        } catch(e) {} }\n    },\n    searchFilterItemTypeTwo(event) {\n      if (event) {\n        try { \n          const result = this.optionItem.filter(e => e.txtType == event); \n          const arr = [];\n          const map = new Map();\n          for (const item of result) {\n            if(!map.has(item.txtVersion)){\n              map.set(item.txtVersion, true);\n              arr.push(item.txtVersion);\n            }\n          } this.filteredItemTypeTwo = arr;\n        } catch(e) {} }\n    },\n    searchFilterItemVersionOne(event) {\n      if (event) {\n        try { this.filteredItemVersionOne = this.optionOrderItem.filter(e => e.idItem.txtVersion == event && e.idItem.txtType == this.ItemTypeOne && e.txtDeliveryStatus == 'Delivered'); }\n        catch(e) {}\n      }\n    },\n    searchFilterItemVersionTwo(event) {\n      if (event) {\n        try { this.filteredItemVersionTwo = this.optionOrderItem.filter(e => e.idItem.txtVersion == event && e.idItem.txtType == this.ItemTypeTwo && e.txtDeliveryStatus == 'Delivered'); }\n        catch(e) {}\n      }\n    },\n    searchFilterItemVersionThree(event) {\n      if (event) {\n        try { this.filteredItemVersionThree = this.optionOrderItem.filter(e => e.idItem.txtVersion == event && e.idItem.txtType == this.ItemTypeThree && e.txtDeliveryStatus == 'Delivered'); }\n        catch(e) {}\n      }\n    },\n    getInspectionNumber() {\n      this.InspectionNumber = 'PN2020-001'\n    },\n    createPDF() {\n      this.$htmlToPaper('pdfContent')\n    },\n    getTemplate() {\n      if (!this.error) {\n        var tempId = localStorage.getItem('ITempID')\n        let endpoint = `/api/inspection-template-list/${tempId}/`;\n        apiService(endpoint)\n          .then(data => {\n            this.templates = data;\n            var atts = this.templates.idInspectionTemplateAttribute\n            let distinct = [...new Set(atts.map(x => x.txtItemType))];\n            this.attsDisctinct = distinct.length;\n            if(this.attsDisctinct >= 1) {\n              if(this.attsDisctinct >= 2) {\n                if(this.attsDisctinct >= 3) {\n                  this.setItemOne = true;\n                  this.setItemTwo = true;\n                  this.setItemThree = true;\n                } else {\n                  this.setItemOne = true;\n                  this.setItemTwo = true;\n                }\n              } else {\n                this.setItemOne = true;\n              }\n            }\n            for (var i = 0; i < atts.length; i++) {\n              if (atts[i].txtItemType == 'Glass') {\n                this.glassAttStatus = true;\n                if (atts[i].txtMeasureUnit == 'mm')\n                  this.glassAtt1.push(atts[i])\n                else if (atts[i].txtMeasureUnit == 'Âµm')\n                  this.glassAtt2.push(atts[i])\n                else if (atts[i].txtMeasureUnit == 'g')\n                  this.glassAtt3.push(atts[i])\n                else if (atts[i].txtValueType == 'BOOLEAN')\n                  this.glassAtt4.push(atts[i])\n                else\n                  this.glassAtt5.push(atts[i])\n              } else if (atts[i].txtItemType == 'Case') {\n                this.caseAttStatus = true;\n                if (atts[i].txtMeasureUnit == 'mm')\n                  this.caseAtt1.push(atts[i])\n                else if (atts[i].txtMeasureUnit == 'Âµm')\n                  this.caseAtt2.push(atts[i])\n                else if (atts[i].txtMeasureUnit == 'g')\n                  this.caseAtt3.push(atts[i])\n                else if (atts[i].txtValueType == 'BOOLEAN')\n                  this.caseAtt4.push(atts[i])\n                else\n                  this.caseAtt5.push(atts[i])\n              } else if (atts[i].txtItemType == 'Frame Standard') {\n                this.frameSAttStatus = true;\n                if (atts[i].txtMeasureUnit == 'mm')\n                  this.frameSAtt1.push(atts[i])\n                else if (atts[i].txtMeasureUnit == 'Âµm')\n                  this.frameSAtt2.push(atts[i])\n                else if (atts[i].txtMeasureUnit == 'g')\n                  this.frameSAtt3.push(atts[i])\n                else if (atts[i].txtValueType == 'BOOLEAN')\n                  this.frameSAtt4.push(atts[i])\n                else\n                  this.frameSAtt5.push(atts[i])\n              } else if (atts[i].txtItemType == 'Frame Eco') {\n                this.frameEAttStatus = true;\n                if (atts[i].txtMeasureUnit == 'mm')\n                  this.frameEAtt1.push(atts[i])\n                else if (atts[i].txtMeasureUnit == 'Âµm')\n                  this.frameEAtt2.push(atts[i])\n                else if (atts[i].txtMeasureUnit == 'g')\n                  this.frameEAtt3.push(atts[i])\n                else if (atts[i].txtValueType == 'BOOLEAN')\n                  this.frameEAtt4.push(atts[i])\n                else\n                  this.frameEAtt5.push(atts[i])\n              }\n            }\n          })\n      }\n    },\n    getItem() {\n      if (!this.error) {\n        let endpoint = `/api/item-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.items.push(...data.results);\n            this.optionItem = this.items\n            const mapType = new Map();\n            const mapVersion = new Map();\n            for (const item of this.items) {\n              if(!mapType.has(item.txtType)){\n                mapType.set(item.txtType, true);\n                this.optionItemType.push(item.txtType);\n              }\n            }\n          })\n      }\n    },\n    getManufacturer() {\n      if (!this.error) {\n        let endpoint = `/api/manufacturer/`;\n        apiService(endpoint)\n          .then(data => {\n            this.manufacturers.push(...data.results);\n            this.optionManufacturer = this.manufacturers\n          })\n      }\n    },\n    getSupplier() {\n      if (!this.error) {\n        let endpoint = `/api/supplier/`;\n        apiService(endpoint)\n          .then(data => {\n            this.suppliers.push(...data.results);\n            this.optionSupplier = this.suppliers\n          })\n      }\n    },\n    getModel() {\n      if (!this.error) {\n        let endpoint = `/api/model/`;\n        apiService(endpoint)\n          .then(data => {\n            this.models.push(...data.results);\n            this.optionModel = this.models\n          })\n      }\n    },\n    getOrderDevice() {\n      if (!this.error) {\n        let endpoint = `/api/order-device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.devices.push(...data.results);\n            this.optionOrderDevice = this.devices\n          })\n      }\n    },\n    getOrderItem() {\n      if (!this.error) {\n        let endpoint = `/api/order-item-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orderItems.push(...data.results);\n            this.optionOrderItem = this.orderItems\n          })\n      }\n    },\n    addInspection() {\n      let endpoint = `/api/inspection/`;\n      apiService(endpoint, \"POST\", {  txtInspectionNumber: this.InspectionNumber, txtInspectionStatus: this.IStatus, txtInspectionType: this.templates.txtInspectionTemplateType,\n        txtInspector: this.Inspector, datInspection: this.DatInspection, datDeliveredOn: this.DatDeliveredOn, datRequestedOn: this.DatRequestedOn,\n        txtRequestedBy: this.RequestedBy, txtRelease: this.Release, txtReleaseBy: this.ReleaseBy, txtComment: this.Comment, idOrderDevice: this.Device.id, })\n        .then(response => {\n          if (response != 'ERROR') {\n            for (let i = 0; i < this.Item.length; i++) {\n              let element = this.Item[i];\n              let attributes = [];\n              let endpointSample = `/api/sample/`;\n              apiService(endpointSample, \"POST\", { idInspection: response.id, idOrderItem: element.id })\n              .then(response => {\n                if(element.idItem.txtType == \"Glass\") {\n                  attributes = this.glassAtt1.concat(this.glassAtt2, this.glassAtt3, this.glassAtt4, this.glassAtt5)\n                } else if(element.idItem.txtType == \"Case\") {\n                  attributes = this.caseAtt1.concat(this.caseAtt2, this.caseAtt3, this.caseAtt4, this.caseAtt5)\n                } else if(element.idItem.txtType == \"Frame Standard\") {\n                  attributes = this.frameSAtt1.concat(this.frameSAtt2, this.frameSAtt3, this.frameSAtt4, this.frameSAtt5)\n                } else if(element.idItem.txtType == \"Frame Eco\") {\n                  attributes = this.frameEAtt1.concat(this.frameEAtt2, this.frameEAtt3, this.frameEAtt4, this.frameEAtt5)\n                }\n                for (let e = 0; e < attributes.length; e++) {\n                  let el = attributes[e];\n                  let endpointAttribute = `/api/sample-attribute/`;\n                  apiService(endpointAttribute, \"POST\", { \n                    idSample: response.id, \n                    txtKeyAttribute: el.txtKeyAttribute, \n                    txtNameAttribute: el.txtNameAttribute, \n                    txtValueAttribute: el.txtValueDefault, \n                    txtValueType: el.txtValueType, \n                    txtMeasureUnit: el.txtMeasureUnit, \n                    txtValueMin: el.txtValueMin, \n                    txtValueMax: el.txtValueMax, \n                    txtValueTolerance: el.txtValueTolerance, \n                    })\n                };\n              })\n            }\n            this.$router.push('inspection-list')\n          }\n        })\n    },\n    getSuperuser() {\n      this.Superuser = localStorage.getItem(\"superuser\")\n    },\n  },\n  created() {\n    this.getTemplate();\n    this.getItem();\n    this.getInspectionNumber();\n    this.getManufacturer();\n    this.getSupplier();\n    this.getModel();\n    this.getOrderDevice();\n    this.getOrderItem();\n  },\n};\n",null]}