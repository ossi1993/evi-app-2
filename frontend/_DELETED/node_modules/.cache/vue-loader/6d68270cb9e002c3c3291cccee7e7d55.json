{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\supplier\\list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\supplier\\list.vue","mtime":1602158921215},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Supplier\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      gridColumnApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: AllModules,\n\n      // VUE VARIABLES\n      suppliers: [],\n      itemTypes: [],\n      selectedItemTypes: [],\n\n      SName: null,\n      SType: null,\n      Street1: null,\n      Street2: null,\n      Street3: null,\n      Zip: null,\n      City: null,\n      Province: null,\n      Land: null,\n      CPerson: null,\n      Phone: null,\n      Mail: null,\n      Skype: null,\n      WhatsApp: null,\n      WeChat: null,\n      Comment: null,\n      date: null,\n      error: false,\n      show: false,\n      updateStatus: false,\n      updateId: null,\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Supplier Name\", field: \"txtSupplierName\", filter: 'agTextColumnFilter', cellRenderer: 'agGroupCellRenderer',},\n      {headerName: \"Street 1\", field: \"txtStreet1\", filter: 'agTextColumnFilter',},\n      {headerName: \"Street 2\", field: \"txtStreet2\", filter: 'agTextColumnFilter',},\n      {headerName: \"Street 3\", field: \"txtStreet3\", filter: 'agTextColumnFilter',},\n      {headerName: \"ZIP\", field: \"txtZip\", filter: 'agTextColumnFilter',},\n      {headerName: \"City\", field: \"txtCity\", filter: 'agTextColumnFilter',},\n      {headerName: \"Province\", field: \"txtProvince\", filter: 'agTextColumnFilter',},\n      {headerName: \"Land\", field: \"txtLand\", filter: 'agTextColumnFilter',},\n      {headerName: \"Contact Person\", field: \"txtContactPerson\", filter: 'agTextColumnFilter',},\n      {headerName: \"Phone\", field: \"txtCpPhone\", filter: 'agTextColumnFilter',},\n      {headerName: \"E-Mail\", field: \"txtCpMail\", filter: 'agTextColumnFilter',},\n      {headerName: \"Skype\", field: \"txtCpSkype\", filter: 'agTextColumnFilter',},\n      {headerName: \"WhatsApp\", field: \"txtCpWhatsApp\", filter: 'agTextColumnFilter',},\n      {headerName: \"WeChat\", field: \"txtCpWeChat\", filter: 'agTextColumnFilter',},\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter',},\n    ],\n    this.defaultColDef = { editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, minWidth: 100, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.detailCellRendererParams = {\n      detailGridOptions: {\n        rowSelection: 'single',\n        suppressRowClickSelection: true,\n        enableRangeSelection: true,\n        pagination: true,\n        paginationAutoPageSize: true,\n        columnDefs: [ { field: 'txtItemType', headerName: 'Item Type' }, ],\n        defaultColDef: { flex: 1, resizable: true, editable: false, },\n      },\n      getDetailRowData: (params) => {\n        params.successCallback(params.data.idItemType);\n      },\n    }\n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('supplier_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('supplier_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  computed: {\n    disabled: function () {\n      return !this.Land ? true : !this.SName ? true : false;\n    },\n  },\n  methods: {\n    saveState() {\n      localStorage.setItem('supplier_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('supplier_columnStats', null);\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onSubmit() {\n      if(!this.updateStatus) { this.addSup();\n      } else { this.updateSupplier(); }\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    addSup() {\n      let endpoint = `/api/supplier/`;\n      apiService(endpoint, \"POST\", { \n        txtSupplierName: this.SName,\n        txtStreet1: this.Street1,\n        txtStreet2: this.Street2,\n        txtStreet3: this.Street3,\n        txtZip: this.Zip,\n        txtCity: this.City,\n        txtProvince: this.Province,\n        txtLand: this.Land,\n        txtContactPerson: this.CPerson,\n        txtCpPhone: this.Phone,\n        txtCpMail: this.Mail,\n        txtCpSkype: this.Skype,\n        txtCpWhatsApp: this.WhatsApp,\n        txtCpWeChat: this.WeChat,\n        idItemType: this.selectedItemTypes.map(e => e.id),\n        txtComment: this.Comment,\n        })\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getSupplier();\n            this.emptyInput()\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    editSupplierMenu(params) {\n      this.emptyInput();\n      let sel = params.node.data;\n      this.SName = sel.txtSupplierName;\n      this.Street1 = sel.txtStreet1;\n      this.Street2 = sel.txtStreet2;\n      this.Street3 = sel.txtStreet3;\n      this.Zip = sel.txtZip;\n      this.City = sel.txtCity;\n      this.Province = sel.txtProvince;\n      this.Land = sel.txtLand;\n      this.CPerson = sel.txtContactPerson;\n      this.Phone = sel.txtCpPhone;\n      this.Mail = sel.txtCpMail;\n      this.Skype = sel.txtCpSkype;\n      this.WhatsApp = sel.txtCpWhatsApp;\n      this.WeChat = sel.txtCpWeChat;\n      this.selectedItemTypes = sel.idItemType;\n      this.Comment = sel.txtComment;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateSupplier() {\n      let endpoint = `/api/supplier/${this.updateId}/`;\n      await apiService(endpoint, \"PATCH\", { \n        txtSupplierName: this.SName,\n        txtStreet1: this.Street1,\n        txtStreet2: this.Street2,\n        txtStreet3: this.Street3,\n        txtZip: this.Zip,\n        txtCity: this.City,\n        txtProvince: this.Province,\n        txtLand: this.Land,\n        txtContactPerson: this.CPerson,\n        txtCpPhone: this.Phone,\n        txtCpMail: this.Mail,\n        txtCpSkype: this.Skype,\n        txtCpWhatsApp: this.WhatsApp,\n        txtCpWeChat: this.WeChat,\n        idItemType: this.selectedItemTypes.map(e => e.id),\n        txtComment: this.Comment, })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.emptyInput();\n            this.getSupplier();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    async updateSupplierGrid(event) {     \n      let endpoint = `/api/supplier/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtSupplierName: event.node.data.txtSupplierName,\n          txtStreet1: event.node.data.txtStreet1,\n          txtStreet2: event.node.data.txtStreet2,\n          txtStreet3: event.node.data.txtStreet3,\n          txtZip: event.node.data.txtZip,\n          txtCity: event.node.data.txtCity,\n          txtProvince: event.node.data.txtProvince,\n          txtLand: event.node.data.txtLand,\n          txtContactPerson: event.node.data.txtContactPerson,\n          txtCpPhone: event.node.data.txtCpPhone,\n          txtCpMail: event.node.data.txtCpMail,\n          txtCpSkype: event.node.data.txtCpSkype,\n          txtCpWhatsApp: event.node.data.txtCpWhatsApp,\n          txtCpWeChat: event.node.data.txtCpWeChat,\n          txtComment: event.node.data.txtComment,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Supplier? => \" + params.node.data.txtSupplierName, {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true\n        })\n        .then(value => { if (value) { this.deleteSup(params); } })\n        .catch(err => console.log(err));\n    },\n    async deleteSup(params) {\n      let endpoint = `/api/supplier/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getSupplier();\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false\n            })\n          }\n        })\n    },\n    emptyInput(event) {\n      this.selectedItemTypes = [];\n      this.SName = this.Street1 = this.Street2 = this.Street3 = this.Zip = this.City = this.Province = null;\n      this.Land = this.CPerson = this.Phone = this.Mail = this.Skype = this.WhatsApp = this.WeChat = this.Comment = null;\n      if(event != 'add') {\n        this.show = false;\n      } else {\n        this.updateStatus = false;\n        this.show = !this.show;\n      }\n    },\n    getSupplier() {\n      if (!this.error) {\n        this.suppliers = [];\n        let endpoint = `/api/supplier-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.suppliers.push(...data.results);\n            this.rowData = this.suppliers\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getItemTypes() {\n      if (!this.error) {\n        this.itemTypes = [];\n        let endpoint = `/api/item-type/`;\n        apiService(endpoint)\n          .then(data => {\n            this.itemTypes.push(...data.results);\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Supplier',\n          action: () => this.editSupplierMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Supplier',\n          action: () => this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getSupplier();\n    this.getDateToday();\n    this.getItemTypes();    \n  },\n};\n",{"version":3,"sources":["list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4LA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"list.vue","sourceRoot":"src/views/app/supplier","sourcesContent":["<template>\n  <!-- ============ Body content start ============= -->\n  <div class=\"main-content\">\n    <breadcumb :page=\"'List'\" :folder=\"'Supplier'\" />\n    <b-row>\n      <!-- ICON BG -->\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\">\n          <i class=\"i-Truck\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Supplier</p>\n            <p class=\"inline text-primary text-24 line-height-1 mb-2\">{{ this.suppliers.length }}</p>\n          </div>\n        </b-card>\n      </b-col>\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\">\n          <i class=\"i-Calendar\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Date</p>\n            <p class=\"text-primary text-24 line-height-1 mb-2\"><nobr>{{ this.date }}</nobr></p>\n          </div>\n        </b-card>\n      </b-col>\n    </b-row>\n\n    <!-- ####################################### -->\n    <!-- ########### SUPPLIER SECTION ########## -->\n    <!-- ####################################### -->\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0 mb-3\">\n            <b-row class=\"ml-3\">\n              <i class=\"nav-icon i-Add mt-3\" style=\"font-size: 20px\" @click=\"emptyInput('add')\" id=\"new-supplier-section\"></i>\n              <h5 class=\"card-title border-bottom p-3 mb-2\">New Supplier</h5>\n            </b-row>\n            <div class=\"mt-3\" v-show=\"show\">\n              <b-form @submit.prevent=\"onSubmit\">\n                <b-row class=\"ml-3 mr-3\">\n                  <b-col md=\"12\" class=\"mt-3\">\n                    <b-form-input id=\"input-1\" v-model=\"SName\" type=\"text\" required placeholder=\"Supplier Name\" ></b-form-input>\n                  </b-col>\n                </b-row>\n                <b-row class=\"ml-3 mr-3\">\n                  <b-col md=\"4\" class=\"mt-3\">\n                    <b-form-input id=\"input-3\" v-model=\"Street1\" type=\"text\" placeholder=\"Street 1\" ></b-form-input>\n                  </b-col>\n                  <b-col md=\"4\" class=\"mt-3\">\n                    <b-form-input id=\"input-4\" v-model=\"Street2\" type=\"text\" placeholder=\"Street 2\" ></b-form-input>\n                  </b-col>\n                  <b-col md=\"4\" class=\"mt-3\">\n                    <b-form-input id=\"input-5\" v-model=\"Street3\" type=\"text\" placeholder=\"Street 3\" ></b-form-input>\n                  </b-col>\n                </b-row>\n                <b-row class=\"ml-3 mr-3\">\n                  <b-col md=\"2\" class=\"mt-3\">\n                    <b-form-input id=\"input-6\" v-model=\"Zip\" type=\"text\" placeholder=\"ZIP\" ></b-form-input>\n                  </b-col>\n                  <b-col md=\"2\" class=\"mt-3\">\n                    <b-form-input id=\"input-7\" v-model=\"City\" type=\"text\" placeholder=\"City\" ></b-form-input>\n                  </b-col>\n                  <b-col md=\"4\" class=\"mt-3\">\n                    <b-form-input id=\"input-8\" v-model=\"Province\" type=\"text\" placeholder=\"Province\" ></b-form-input>\n                  </b-col>\n                  <b-col md=\"4\" class=\"mt-3\">\n                    <b-form-input id=\"input-9\" v-model=\"Land\" type=\"text\" required placeholder=\"Land\" ></b-form-input>\n                  </b-col>\n                </b-row>\n                <b-row class=\"ml-3 mr-3\">\n                  <b-col md=\"4\" class=\"mt-3\">\n                    <b-form-input v-model=\"CPerson\" type=\"text\" placeholder=\"Contact Person\" ></b-form-input>\n                  </b-col>\n                  <b-col md=\"4\" class=\"mt-3\">\n                    <b-form-input v-model=\"Phone\" type=\"text\" placeholder=\"Phone\" ></b-form-input>\n                  </b-col>\n                  <b-col md=\"4\" class=\"mt-3\">\n                    <b-form-input v-model=\"Mail\" type=\"text\" placeholder=\"E-Mail\" ></b-form-input>\n                  </b-col>\n                </b-row>\n                <b-row class=\"ml-3 mr-3\">\n                  <b-col md=\"4\" class=\"mt-3\">\n                    <b-form-input v-model=\"Skype\" type=\"text\" placeholder=\"Skype\" ></b-form-input>\n                  </b-col>\n                  <b-col md=\"4\" class=\"mt-3\">\n                    <b-form-input v-model=\"WhatsApp\" type=\"text\" placeholder=\"WhatsApp\" ></b-form-input>\n                  </b-col>\n                  <b-col md=\"4\" class=\"mt-3\">\n                    <b-form-input v-model=\"WeChat\" type=\"text\" placeholder=\"WeChat\" ></b-form-input>\n                  </b-col>\n                </b-row>\n                <b-row class=\"ml-3 mr-3\">\n                  <b-col md=\"12\" class=\"mt-3\">\n                    <multiselect\n                        v-model=\"selectedItemTypes\" tag-placeholder=\"Choose Supplier Type\" placeholder=\"Choose Supplier Type\" label=\"txtItemType\"\n                        track-by=\"id\" :options=\"itemTypes\" :multiple=\"true\" :taggable=\"true\" :close-on-select=\"false\"\n                        :searchable=\"true\" open-direction=\"bottom\">\n                    </multiselect>\n                  </b-col>\n                </b-row>\n                <b-row class=\"ml-3 mr-3 mt-3\">\n                  <b-col md=\"12\">\n                    <b-form-textarea v-model=\"Comment\" placeholder=\"Enter memo ...\" rows=\"3\" max-rows=\"6\"></b-form-textarea>\n                  </b-col>\n                </b-row>\n                \n                <!-- NEW SUPPLIER / UPDATE SUPPLIER BUTTONS -->\n                <b-row class=\"ml-3 mt-5 mr-3\">\n                  <b-col md=\"6\" v-if=\"!updateStatus\">\n                    <b-button @click=\"emptyInput\" block variant=\"outline-danger\">Delete Input</b-button>\n                  </b-col>\n                  <b-col md=\"6\" v-else-if=\"updateStatus\">\n                    <b-button @click=\"emptyInput\" block variant=\"outline-info\">Cancel</b-button>\n                  </b-col>\n                  <b-col md=\"6\" v-if=\"!updateStatus\">\n                    <b-button type=\"submit\" block variant=\"success\" :disabled=\"disabled\">Add Supplier</b-button>\n                  </b-col>\n                  <b-col md=\"6\" v-else-if=\"updateStatus\">\n                    <b-button type=\"submit\" block variant=\"warning\" :disabled=\"disabled\">Update Supplier</b-button>\n                  </b-col>\n                </b-row>\n                \n                <!-- ERROR MESSAGE -->\n                <b-row class=\"ml-3 mt-3 mr-3\">\n                  <b-col md=\"12\">\n                    <b-alert v-if=\"error\" show variant=\"alert alert-card alert-danger\" dismissible>\n                      <strong class=\"text-capitalize\">Error!</strong> The Input is not valid.\n                    </b-alert>\n                  </b-col>\n                </b-row>\n              </b-form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- AG-GRID SUPPLIER -->\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0\">\n            <AgGridVue class=\"ag-theme-alpine\"\n                id=\"gridSupplier\"\n                :defaultColDef=\"defaultColDef\"\n                :columnDefs=\"columnDefs\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData\"\n                :gridOptions=\"gridOptions\"\n                :suppressRowClickSelection=\"true\"\n                :excelStyles=\"excelStyles\"\n                @cellValueChanged=\"updateSupplierGrid\"\n                @row-selected=\"onRowSelected\"\n                :masterDetail=\"true\"\n                :detailCellRendererParams=\"detailCellRendererParams\"\n                :pagination=\"true\"\n                :paginationPageSize=\"paginationPageSize\"\n                :getContextMenuItems=\"getContextMenu\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n            <div class=\"ml-3 mr-3 mt-2 mb-2 text-right\">\n                Page Size:\n                <select @change=\"onPageSizeChanged\" id=\"page-size\">\n                    <option value=\"10\" selected=\"\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                </select>\n                <b-button @click=\"onBtExport\" class=\"ml-3\" size=\"sm\" variant=\"outline-success\">Export Excel</b-button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- AG-GRID STATS -->\n    <b-row class=\"ml-1 mr-3 mb-4\">\n      <b-button class=\"mr-3\" @click=\"saveState\" variant=\"primary\">Save Grid State</b-button>\n      <b-button @click=\"restoreState\" variant=\"outline-light\">Reset Grid State</b-button>\n    </b-row>\n  </div>\n\n  <!-- ============ Body content End ============= -->\n\n</template>\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Supplier\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      gridColumnApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: AllModules,\n\n      // VUE VARIABLES\n      suppliers: [],\n      itemTypes: [],\n      selectedItemTypes: [],\n\n      SName: null,\n      SType: null,\n      Street1: null,\n      Street2: null,\n      Street3: null,\n      Zip: null,\n      City: null,\n      Province: null,\n      Land: null,\n      CPerson: null,\n      Phone: null,\n      Mail: null,\n      Skype: null,\n      WhatsApp: null,\n      WeChat: null,\n      Comment: null,\n      date: null,\n      error: false,\n      show: false,\n      updateStatus: false,\n      updateId: null,\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Supplier Name\", field: \"txtSupplierName\", filter: 'agTextColumnFilter', cellRenderer: 'agGroupCellRenderer',},\n      {headerName: \"Street 1\", field: \"txtStreet1\", filter: 'agTextColumnFilter',},\n      {headerName: \"Street 2\", field: \"txtStreet2\", filter: 'agTextColumnFilter',},\n      {headerName: \"Street 3\", field: \"txtStreet3\", filter: 'agTextColumnFilter',},\n      {headerName: \"ZIP\", field: \"txtZip\", filter: 'agTextColumnFilter',},\n      {headerName: \"City\", field: \"txtCity\", filter: 'agTextColumnFilter',},\n      {headerName: \"Province\", field: \"txtProvince\", filter: 'agTextColumnFilter',},\n      {headerName: \"Land\", field: \"txtLand\", filter: 'agTextColumnFilter',},\n      {headerName: \"Contact Person\", field: \"txtContactPerson\", filter: 'agTextColumnFilter',},\n      {headerName: \"Phone\", field: \"txtCpPhone\", filter: 'agTextColumnFilter',},\n      {headerName: \"E-Mail\", field: \"txtCpMail\", filter: 'agTextColumnFilter',},\n      {headerName: \"Skype\", field: \"txtCpSkype\", filter: 'agTextColumnFilter',},\n      {headerName: \"WhatsApp\", field: \"txtCpWhatsApp\", filter: 'agTextColumnFilter',},\n      {headerName: \"WeChat\", field: \"txtCpWeChat\", filter: 'agTextColumnFilter',},\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter',},\n    ],\n    this.defaultColDef = { editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, minWidth: 100, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.detailCellRendererParams = {\n      detailGridOptions: {\n        rowSelection: 'single',\n        suppressRowClickSelection: true,\n        enableRangeSelection: true,\n        pagination: true,\n        paginationAutoPageSize: true,\n        columnDefs: [ { field: 'txtItemType', headerName: 'Item Type' }, ],\n        defaultColDef: { flex: 1, resizable: true, editable: false, },\n      },\n      getDetailRowData: (params) => {\n        params.successCallback(params.data.idItemType);\n      },\n    }\n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('supplier_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('supplier_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  computed: {\n    disabled: function () {\n      return !this.Land ? true : !this.SName ? true : false;\n    },\n  },\n  methods: {\n    saveState() {\n      localStorage.setItem('supplier_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('supplier_columnStats', null);\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onSubmit() {\n      if(!this.updateStatus) { this.addSup();\n      } else { this.updateSupplier(); }\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    addSup() {\n      let endpoint = `/api/supplier/`;\n      apiService(endpoint, \"POST\", { \n        txtSupplierName: this.SName,\n        txtStreet1: this.Street1,\n        txtStreet2: this.Street2,\n        txtStreet3: this.Street3,\n        txtZip: this.Zip,\n        txtCity: this.City,\n        txtProvince: this.Province,\n        txtLand: this.Land,\n        txtContactPerson: this.CPerson,\n        txtCpPhone: this.Phone,\n        txtCpMail: this.Mail,\n        txtCpSkype: this.Skype,\n        txtCpWhatsApp: this.WhatsApp,\n        txtCpWeChat: this.WeChat,\n        idItemType: this.selectedItemTypes.map(e => e.id),\n        txtComment: this.Comment,\n        })\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getSupplier();\n            this.emptyInput()\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    editSupplierMenu(params) {\n      this.emptyInput();\n      let sel = params.node.data;\n      this.SName = sel.txtSupplierName;\n      this.Street1 = sel.txtStreet1;\n      this.Street2 = sel.txtStreet2;\n      this.Street3 = sel.txtStreet3;\n      this.Zip = sel.txtZip;\n      this.City = sel.txtCity;\n      this.Province = sel.txtProvince;\n      this.Land = sel.txtLand;\n      this.CPerson = sel.txtContactPerson;\n      this.Phone = sel.txtCpPhone;\n      this.Mail = sel.txtCpMail;\n      this.Skype = sel.txtCpSkype;\n      this.WhatsApp = sel.txtCpWhatsApp;\n      this.WeChat = sel.txtCpWeChat;\n      this.selectedItemTypes = sel.idItemType;\n      this.Comment = sel.txtComment;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateSupplier() {\n      let endpoint = `/api/supplier/${this.updateId}/`;\n      await apiService(endpoint, \"PATCH\", { \n        txtSupplierName: this.SName,\n        txtStreet1: this.Street1,\n        txtStreet2: this.Street2,\n        txtStreet3: this.Street3,\n        txtZip: this.Zip,\n        txtCity: this.City,\n        txtProvince: this.Province,\n        txtLand: this.Land,\n        txtContactPerson: this.CPerson,\n        txtCpPhone: this.Phone,\n        txtCpMail: this.Mail,\n        txtCpSkype: this.Skype,\n        txtCpWhatsApp: this.WhatsApp,\n        txtCpWeChat: this.WeChat,\n        idItemType: this.selectedItemTypes.map(e => e.id),\n        txtComment: this.Comment, })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.emptyInput();\n            this.getSupplier();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    async updateSupplierGrid(event) {     \n      let endpoint = `/api/supplier/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtSupplierName: event.node.data.txtSupplierName,\n          txtStreet1: event.node.data.txtStreet1,\n          txtStreet2: event.node.data.txtStreet2,\n          txtStreet3: event.node.data.txtStreet3,\n          txtZip: event.node.data.txtZip,\n          txtCity: event.node.data.txtCity,\n          txtProvince: event.node.data.txtProvince,\n          txtLand: event.node.data.txtLand,\n          txtContactPerson: event.node.data.txtContactPerson,\n          txtCpPhone: event.node.data.txtCpPhone,\n          txtCpMail: event.node.data.txtCpMail,\n          txtCpSkype: event.node.data.txtCpSkype,\n          txtCpWhatsApp: event.node.data.txtCpWhatsApp,\n          txtCpWeChat: event.node.data.txtCpWeChat,\n          txtComment: event.node.data.txtComment,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Supplier? => \" + params.node.data.txtSupplierName, {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true\n        })\n        .then(value => { if (value) { this.deleteSup(params); } })\n        .catch(err => console.log(err));\n    },\n    async deleteSup(params) {\n      let endpoint = `/api/supplier/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getSupplier();\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false\n            })\n          }\n        })\n    },\n    emptyInput(event) {\n      this.selectedItemTypes = [];\n      this.SName = this.Street1 = this.Street2 = this.Street3 = this.Zip = this.City = this.Province = null;\n      this.Land = this.CPerson = this.Phone = this.Mail = this.Skype = this.WhatsApp = this.WeChat = this.Comment = null;\n      if(event != 'add') {\n        this.show = false;\n      } else {\n        this.updateStatus = false;\n        this.show = !this.show;\n      }\n    },\n    getSupplier() {\n      if (!this.error) {\n        this.suppliers = [];\n        let endpoint = `/api/supplier-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.suppliers.push(...data.results);\n            this.rowData = this.suppliers\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getItemTypes() {\n      if (!this.error) {\n        this.itemTypes = [];\n        let endpoint = `/api/item-type/`;\n        apiService(endpoint)\n          .then(data => {\n            this.itemTypes.push(...data.results);\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Supplier',\n          action: () => this.editSupplierMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Supplier',\n          action: () => this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getSupplier();\n    this.getDateToday();\n    this.getItemTypes();    \n  },\n};\n</script>\n<style scoped>\n  i:focus,\n  input:focus,\n  select:focus,\n  textarea:focus,\n  button:focus {\n      outline: none;\n  }\n  #new-supplier-section {\n    cursor: pointer;\n    outline: none;\n  }\n</style>\n"]}]}