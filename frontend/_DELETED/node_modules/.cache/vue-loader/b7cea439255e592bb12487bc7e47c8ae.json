{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\supplier\\list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\supplier\\list.vue","mtime":1600760224408},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Supplier\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      gridColumnApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      domLayout: null,\n      modules: AllModules,\n\n      // VUE VARIABLES\n      suppliers: [],\n      visible: false,\n      cType: null,\n      SName: null,\n      SType: null,\n      SType: null,\n      Street1: null,\n      Street2: null,\n      Street3: null,\n      Zip: null,\n      City: null,\n      Province: null,\n      Land: null,\n      CPerson: null,\n      Phone: null,\n      Mail: null,\n      Skype: null,\n      date: null,\n      error: false,\n      updateStatus: false,\n      updateId: null,\n      optionType: [\n        { value: 'Glass', name: 'Glass' },\n        { value: 'Frame', name: 'Frame' },\n        { value: 'Case', name: 'Case' },\n        { value: 'Device', name: 'Device' },\n      ]\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Supplier Name\", field: \"txtSupplierName\", filter: 'agTextColumnFilter', },\n      {headerName: \"Type\", field: \"txtSupplierType\", filter: 'agTextColumnFilter',},\n      {headerName: \"Street 1\", field: \"txtStreet1\", filter: 'agTextColumnFilter',},\n      {headerName: \"Street 2\", field: \"txtStreet2\", filter: 'agTextColumnFilter',},\n      {headerName: \"Street 3\", field: \"txtStreet3\", filter: 'agTextColumnFilter',},\n      {headerName: \"ZIP\", field: \"txtZip\", filter: 'agTextColumnFilter',},\n      {headerName: \"City\", field: \"txtCity\", filter: 'agTextColumnFilter',},\n      {headerName: \"Province\", field: \"txtProvince\", filter: 'agTextColumnFilter',},\n      {headerName: \"Land\", field: \"txtLand\", filter: 'agTextColumnFilter',},\n      {headerName: \"Contact Person\", field: \"txtContactPerson\", filter: 'agTextColumnFilter',},\n      {headerName: \"Phone\", field: \"txtCpPhone\", filter: 'agTextColumnFilter',},\n      {headerName: \"E-Mail\", field: \"txtCpMail\", filter: 'agTextColumnFilter',},\n      {headerName: \"Skype\", field: \"txtCpSkype\", filter: 'agTextColumnFilter',},\n    ],\n    this.defaultColDef = { editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, minWidth: 100, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('supplier_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('supplier_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  computed: {\n    disabled: function () {\n      return !this.Land ? true : !this.SName ? true : false;\n    },\n  },\n  methods: {\n    convertTypes() {\n      let e = this.SType.map(e => e.value)\n      this.cType = e.join(\", \");\n    },\n    reconstructTypes(params) {\n      let arr = params.split(\", \")\n      for (let i = 0; i < arr.length; i++) {\n        let el = {value: arr[i], name: arr[i]};\n        this.SType = [];\n        this.SType.push(el);\n      }\n    },\n    convertSupplierTypes(name) {\n      if(this.SType)\n        this.STypeStr = '';\n        for (let index = 0; index < this.SType.length; index++) {\n          const el = this.SType[index];\n          this.STypeStr += el.value + ', ';\n        }\n      return this.STypeStr\n    },\n    saveState() {\n      localStorage.setItem('supplier_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('supplier_columnStats', null);\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    addSup() {\n      this.convertSupplierTypes();\n      let endpoint = `/api/supplier/`;\n      apiService(endpoint, \"POST\", { \n        txtSupplierName: this.SName,\n        txtSupplierType: this.STypeStr,\n        txtStreet1: this.Street1,\n        txtStreet2: this.Street2,\n        txtStreet3: this.Street3,\n        txtZip: this.Zip,\n        txtCity: this.City,\n        txtProvince: this.Province,\n        txtLand: this.Land,\n        txtContactPerson: this.CPerson,\n        txtCpPhone: this.Phone,\n        txtCpMail: this.Mail,\n        txtCpSkype: this.Skype\n        })\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getSup();\n            this.emptyInput()\n          } else {\n            this.error = true;\n          }\n        })\n      if (this.error) {\n        this.error = false;\n      }\n    },\n    editSupplierMenu(params) {\n      let sel = params.node.data;\n      this.reconstructTypes(sel.txtSupplierType)\n      this.SName = sel.txtSupplierName;\n      this.Street1 = sel.txtStreet1;\n      this.Street2 = sel.txtStreet2;\n      this.Street3 = sel.txtStreet3;\n      this.Zip = sel.txtZip;\n      this.City = sel.txtCity;\n      this.Province = sel.txtProvince;\n      this.Land = sel.txtLand;\n      this.CPerson = sel.txtContactPerson;\n      this.Phone = sel.txtCpPhone;\n      this.Mail = sel.txtCpMail;\n      this.Skype = sel.txtCpSkype;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.$root.$emit('bv::toggle::collapse', 'collapse-o');\n      document.documentElement.scrollTop = 0;\n    },\n    async updateSupplier() {\n      this.convertTypes()\n      let endpoint = `/api/supplier/${this.updateId}/`;\n      await apiService(endpoint, \"PATCH\", { \n        txtSupplierName: this.SName,\n        txtSupplierType: this.cType,\n        txtStreet1: this.Street1,\n        txtStreet2: this.Street2,\n        txtStreet3: this.Street3,\n        txtZip: this.Zip,\n        txtCity: this.City,\n        txtProvince: this.Province,\n        txtLand: this.Land,\n        txtContactPerson: this.CPerson,\n        txtCpPhone: this.Phone,\n        txtCpMail: this.Mail,\n        txtCpSkype: this.Skype, })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.emptyInput();\n            this.getSup();\n          } else {\n            this.error = true;\n          }\n        })\n      if (this.error) {\n        this.error = false;\n      }\n    },\n    async updateSupplierGrid(event) {     \n      let endpoint = `/api/supplier/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtSupplierName: event.node.data.txtSupplierName,\n          txtSupplierType: event.node.data.txtSupplierType,\n          txtStreet1: event.node.data.txtStreet1,\n          txtStreet2: event.node.data.txtStreet2,\n          txtStreet3: event.node.data.txtStreet3,\n          txtZip: event.node.data.txtZip,\n          txtCity: event.node.data.txtCity,\n          txtProvince: event.node.data.txtProvince,\n          txtLand: event.node.data.txtLand,\n          txtContactPerson: event.node.data.txtContactPerson,\n          txtCpPhone: event.node.data.txtCpPhone,\n          txtCpMail: event.node.data.txtCpMail,\n          txtCpSkype: event.node.data.txtCpSkype,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Supplier? => \" + params.node.data.txtSupplierName, {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteSup(params);\n          }\n        })\n    },\n    async deleteSup(params) {\n      let endpoint = `/api/supplier/${params.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\")\n        this.getSup();\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    emptyInput() {\n      this.SName = '',\n      this.SType = '',\n      this.Street1 = '',\n      this.Street2 = '',\n      this.Street3 = '',\n      this.Zip = '',\n      this.City = '',\n      this.Province = '',\n      this.Land = '',\n      this.CPerson = '',\n      this.Phone = '',\n      this.Mail = '',\n      this.Skype = ''\n      this.$root.$emit('bv::toggle::collapse', 'collapse-o')\n    },\n    getSup() {\n      if (!this.error) {\n        this.suppliers = [];\n        let endpoint = `/api/supplier/`;\n        apiService(endpoint)\n          .then(data => {\n            this.suppliers.push(...data.results);\n            this.rowData = this.suppliers\n          })\n      }\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Supplier',\n          action: () => this.editSupplierMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Supplier',\n          action: () => this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getSup();\n    this.getDateToday();\n  },\n};\n",null]}