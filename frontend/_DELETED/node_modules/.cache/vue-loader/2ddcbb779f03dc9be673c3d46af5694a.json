{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\device\\model-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\device\\model-list.vue","mtime":1600243654742},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Model\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      domLayout: null,\n      modules: AllModules,\n\n      // VUE VARIABLES\n      suppliers: [],\n      manufacturers: [],\n      models: [],\n      show: false,\n      MName: null,\n      MStatus: null,\n      Manufacturer: null,\n      Supplier: null,\n      date: null,\n      next: null,\n      error: false,\n      updateStatus: false,\n      updateId: null,\n      optionSupplier: [],\n      optionManufacturer: [],\n      optionStatuses: [\n        { value: 'Active', text: 'Active' },\n        { value: 'Inactive', text: 'Inactive' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      { headerName: \"Model Name\", field: \"txtModelName\", filter: 'agTextColumnFilter', },\n      { headerName: \"Model Status\", field: \"txtModelStatus\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Active', 'Inactive']},},\n      { headerName: \"Manufacturer\", field: \"idManufacturer.txtManufacturerName\", filter: 'agTextColumnFilter', editable: false },\n      { headerName: \"Supplier\", field: \"idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false },\n    ],\n    this.defaultColDef = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n  },\n  mounted() {\n    if (window.ModelColState) {\n       this.gridOptions.columnApi.setColumnState(window.ModelColState);\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n      this.gridApi.sizeColumnsToFit();\n    }\n  },\n  computed: {\n    disabled: function () {\n      return !this.MName ? true : !this.MStatus ? true : !this.Manufacturer ? true : !this.Supplier ? true : false; \n    },\n  },\n  methods: {\n    saveState() {\n      window.ModelColState = this.gridOptions.columnApi.getColumnState();\n    },\n    restoreState() {\n      window.ModelColState = null;\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    async updateModelGrid(event) {     \n      let endpoint = `/api/model/${event.node.data.id}/`;\n      console.log(event.node.data.id)\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtModelName: event.node.data.txtModelName,\n          txtModelStatus: event.node.data.txtModelStatus,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    editModelMenu(params) {\n      let sel = params.node.data;\n      this.MName = sel.txtModelName;\n      this.MStatus = sel.txtModelStatus;\n      this.Manufacturer = sel.idManufacturer;\n      this.Supplier = sel.idSupplier;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.$root.$emit('bv::toggle::collapse', 'collapse-e');\n      document.documentElement.scrollTop = 0;\n    },\n    async updateModel() {\n      if(typeof this.Manufacturer == \"object\") { this.Manufacturer = this.Manufacturer.id } else { this.Manufacturer = this.Manufacturer }\n      if(typeof this.Supplier == \"object\") { this.Supplier = this.Supplier.id } else { this.Supplier = this.Supplier }\n      let endpoint = `/api/model/${this.updateId}/`;\n      await apiService(endpoint, \"PATCH\", { \n        txtModelName: this.MName,\n        txtModelStatus: this.MStatus,\n        idManufacturer: this.Manufacturer,\n        idSupplier: this.Supplier, })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.emptyInput();\n            this.getModels();\n          } else {\n            this.error = true;\n          }\n        })\n      if (this.error) {\n        this.error = false;\n      }\n    },\n    getManufacturer() {\n      if (!this.error) {\n        this.manufacturers = [];\n        let endpoint = `/api/manufacturer/`;\n        apiService(endpoint)\n          .then(data => {\n            this.manufacturers.push(...data.results);\n            this.optionManufacturer = this.manufacturers\n          })\n      }\n    },\n    getSupplier() {\n      if (!this.error) {\n        this.suppliers = [];\n        let endpoint = `/api/supplier/`;\n        apiService(endpoint)\n          .then(data => {\n            this.suppliers.push(...data.results);\n            this.optionSupplier = this.suppliers\n          })\n      }\n    },\n    getModels() {\n      if (!this.error) {\n        this.models = [];\n        let endpoint = `/api/model-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.models.push(...data.results);\n            this.rowData = this.models\n          })\n      }\n    },\n    addModel() {\n      let endpoint = `/api/model/`;\n      apiService(endpoint, \"POST\", { txtModelName: this.MName, txtModelStatus: this.MStatus, idManufacturer: this.Manufacturer, idSupplier: this.Supplier, })\n      .then(response => {\n        if (response != 'ERROR') {\n          this.getModels();\n        } else {\n          this.error = true;\n        }\n      })\n      this.emptyInput();\n      if (this.error) {\n        this.error = false;\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Model? => \" + params.node.data.txtModelName, {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteModel(params);\n          }\n        })\n    },\n    async deleteModel() {\n      let endpoint = `/api/model/${params.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\")\n        this.getModels();\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    emptyInput() {\n      this.MName = '',\n      this.MStatus = [],\n      this.Manufacturer = [],\n      this.Supplier = [],\n      this.$root.$emit('bv::toggle::collapse', 'collapse-e')\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Model',\n          action: () => this.editModelMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Model',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getManufacturer();\n    this.getSupplier();\n    this.getModels();\n    this.getDateToday();\n  },\n};\n",null]}