{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\inspection-type.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\inspection-type.vue","mtime":1601929556733},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Inspection Types\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      domLayout: null,\n      modules: AllModules,\n\n      // VUE VARIABLES\n      inspectionTypes: [],\n      InspectionType: null,\n      InspectionInitial: null,\n      date: null,\n      error: false,\n      show: false,\n      updateStatus: false,\n      updateId: null,\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.defaultColDef = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.columnDefs = [\n      {headerName: \"Inspection Type\", field: \"txtInspectionType\", filter: 'agTextColumnFilter', },\n      {headerName: \"Inspection Initial\", field: \"txtInspectionInitial\", filter: 'agTextColumnFilter', },\n      ]\n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('inspectionTypes_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('inspectionTypes_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  computed: {\n    disabled: function () {\n      return !this.InspectionType ? true : !this.InspectionInitial ? true : false; \n    },\n  },\n  methods: {\n    saveState() {\n      localStorage.setItem('inspectionTypes_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('inspectionTypes_columnStats', null);\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    addInspectionType() {\n      let endpoint = `/api/inspection-type/`;\n      apiService(endpoint, \"POST\", { \n        txtInspectionType: this.InspectionType, \n        txtInspectionInitial: this.InspectionInitial, \n        })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.getInspectionTypes();\n            this.emptyInput();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    editInspectionTypeMenu(params) {\n      this.emptyInput();\n      let sel = params.node.data;\n      this.InspectionType = sel.txtInspectionType;\n      this.InspectionInitial = sel.txtInspectionInitial;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateInspectionType() {\n      let endpoint = `/api/inspection-type/${this.updateId}/`;\n      await apiService(endpoint, \"PUT\", { \n        txtInspectionType: this.InspectionType, \n        txtInspectionInitial: this.InspectionInitial, \n        })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.emptyInput();\n            this.getInspectionTypes();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    async updateInspectionTypeGrid(event) {     \n      let endpoint = `/api/inspection-type/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtInspectionType: event.node.data.txtInspectionType, \n          txtInspectionInitial: event.node.data.txtInspectionInitial, \n          })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Inspection Type?\", {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => { if (value) { this.deleteInspectionType(params); } })\n        .catch(err => console.log(err));\n    },\n    async deleteInspectionType(params) {\n      let endpoint = `/api/inspection-type/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getInspectionTypes();\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING',\n              variant: 'danger',\n              autoHideDelay: 6000,\n              appendToast: false\n            })\n          }\n        })\n    },\n    emptyInput(event) {\n      this.InspectionType = this.InspectionInitial = null;\n      if(event != 'add') {\n        this.show = false;\n      } else {\n        this.updateStatus = false;\n        this.show = !this.show;\n      }\n    },\n    getInspectionTypes() {\n      if (!this.error) {\n        this.inspectionTypes = [];\n        let endpoint = `/api/inspection-type/`;\n        apiService(endpoint)\n          .then(data => {\n            this.inspectionTypes.push(...data.results);\n            this.rowData = this.inspectionTypes\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Inspection Type',\n          action: () => this.editInspectionTypeMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Inspection Type',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getDateToday();\n    this.getInspectionTypes();\n  },\n};\n\n",{"version":3,"sources":["inspection-type.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"inspection-type.vue","sourceRoot":"src/views/app/inspection","sourcesContent":["<template>\n  <!-- ============ Body content start ============= -->\n  <div class=\"main-content\">\n    <breadcumb :page=\"'Inspection Type'\" :folder=\"'Inspection'\" />\n    <b-row>\n      <!-- ICON BG -->\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\">\n          <i class=\"i-Check\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Types</p>\n            <p class=\"inline text-primary text-24 line-height-1 mb-2\">{{ this.inspectionTypes.length }}</p>\n          </div>\n        </b-card>\n      </b-col>\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\">\n          <i class=\"i-Calendar\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Date</p>\n            <p class=\"text-primary text-24 line-height-1 mb-2\"><nobr>{{ this.date }}</nobr></p>\n          </div>\n        </b-card>\n      </b-col>\n    </b-row>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0 mb-3\">\n            <b-row class=\"ml-3\">\n              <i class=\"nav-icon i-Add mt-3\" style=\"font-size: 20px\" id=\"new-attribute-section\" @click=\"emptyInput('add')\"></i>\n              <h5 class=\"card-title border-bottom p-3 mb-2\">New Inspection Type</h5>\n            </b-row>\n            <div class=\"ml-3 mr-3\" v-show=\"show\">\n              <b-row class=\"ml-3 mr-3 mt-3\">\n                <b-col md=\"6\">\n                  <b-form-input id=\"input-1\" v-model=\"InspectionType\" type=\"text\" placeholder=\"Inspection Type\" ></b-form-input>\n                </b-col>\n                <b-col md=\"6\">\n                  <b-form-input id=\"input-2\" v-model=\"InspectionInitial\" type=\"text\" placeholder=\"Inspection Initial\" ></b-form-input>\n                </b-col>\n              </b-row>\n\n              <!-- NEW INSPECTION TYPE / UPDATE INSPECTION TYPE BUTTONS -->\n              <b-row class=\"ml-3 mr-3 mt-5\">\n                <b-col md=\"6\" v-if=\"!updateStatus\">\n                  <b-button @click=\"emptyInput\" block variant=\"outline-danger\">Delete Input</b-button>\n                </b-col>\n                <b-col md=\"6\" v-else-if=\"updateStatus\">\n                  <b-button @click=\"emptyInput\" block variant=\"outline-info\">Cancel</b-button>\n                </b-col>\n                <b-col md=\"6\" v-if=\"!updateStatus\">\n                  <b-button @click=\"addInspectionType\" block variant=\"success\" :disabled=\"disabled\">Add Inspection Type</b-button>\n                </b-col>\n                <b-col md=\"6\" v-else-if=\"updateStatus\">\n                  <b-button @click=\"updateInspectionType\" block variant=\"warning\" :disabled=\"disabled\">Update Inspection Type</b-button>\n                </b-col>\n              </b-row>\n\n              <!-- ERROR MESSAGE -->\n              <b-row class=\"ml-3 mr-3\">\n                <b-col md=\"12\" class=\"mt-3\">\n                  <b-alert v-if=\"error\" show variant=\"alert alert-card alert-danger\" dismissible>\n                    <strong class=\"text-capitalize\">Error!</strong> The Input is not valid.\n                  </b-alert>\n                </b-col>\n              </b-row>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0\">\n            <AgGridVue class=\"ag-theme-alpine\"\n                id=\"gridInspectionType\"\n                :defaultColDef=\"defaultColDef\"\n                :columnDefs=\"columnDefs\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData\"\n                :gridOptions=\"gridOptions\"\n                :suppressRowClickSelection=\"true\"\n                @cellValueChanged=\"updateInspectionTypeGrid\"\n                :pagination=\"true\"\n                :paginationPageSize=\"paginationPageSize\"\n                :getContextMenuItems=\"getContextMenu\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n            <div class=\"ml-3 mr-3 mt-2 mb-2 text-right\">\n                Page Size:\n                <select @change=\"onPageSizeChanged\" id=\"page-size\">\n                    <option value=\"10\" selected=\"\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                </select>\n                <b-button @click=\"onBtExport\" class=\"ml-3\" size=\"sm\" variant=\"outline-success\">Export Excel</b-button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <b-row class=\"ml-1 mr-3 mb-4\">\n      <b-button class=\"mr-3\" @click=\"saveState\" variant=\"primary\">Save Grid State</b-button>\n      <b-button @click=\"restoreState\" variant=\"outline-light\">Reset Grid State</b-button>\n    </b-row>\n  </div>\n  <!-- ============ Body content End ============= -->\n</template>\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Inspection Types\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      domLayout: null,\n      modules: AllModules,\n\n      // VUE VARIABLES\n      inspectionTypes: [],\n      InspectionType: null,\n      InspectionInitial: null,\n      date: null,\n      error: false,\n      show: false,\n      updateStatus: false,\n      updateId: null,\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.defaultColDef = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.columnDefs = [\n      {headerName: \"Inspection Type\", field: \"txtInspectionType\", filter: 'agTextColumnFilter', },\n      {headerName: \"Inspection Initial\", field: \"txtInspectionInitial\", filter: 'agTextColumnFilter', },\n      ]\n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('inspectionTypes_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('inspectionTypes_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  computed: {\n    disabled: function () {\n      return !this.InspectionType ? true : !this.InspectionInitial ? true : false; \n    },\n  },\n  methods: {\n    saveState() {\n      localStorage.setItem('inspectionTypes_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('inspectionTypes_columnStats', null);\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    addInspectionType() {\n      let endpoint = `/api/inspection-type/`;\n      apiService(endpoint, \"POST\", { \n        txtInspectionType: this.InspectionType, \n        txtInspectionInitial: this.InspectionInitial, \n        })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.getInspectionTypes();\n            this.emptyInput();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    editInspectionTypeMenu(params) {\n      this.emptyInput();\n      let sel = params.node.data;\n      this.InspectionType = sel.txtInspectionType;\n      this.InspectionInitial = sel.txtInspectionInitial;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateInspectionType() {\n      let endpoint = `/api/inspection-type/${this.updateId}/`;\n      await apiService(endpoint, \"PUT\", { \n        txtInspectionType: this.InspectionType, \n        txtInspectionInitial: this.InspectionInitial, \n        })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.emptyInput();\n            this.getInspectionTypes();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    async updateInspectionTypeGrid(event) {     \n      let endpoint = `/api/inspection-type/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtInspectionType: event.node.data.txtInspectionType, \n          txtInspectionInitial: event.node.data.txtInspectionInitial, \n          })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Inspection Type?\", {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => { if (value) { this.deleteInspectionType(params); } })\n        .catch(err => console.log(err));\n    },\n    async deleteInspectionType(params) {\n      let endpoint = `/api/inspection-type/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getInspectionTypes();\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING',\n              variant: 'danger',\n              autoHideDelay: 6000,\n              appendToast: false\n            })\n          }\n        })\n    },\n    emptyInput(event) {\n      this.InspectionType = this.InspectionInitial = null;\n      if(event != 'add') {\n        this.show = false;\n      } else {\n        this.updateStatus = false;\n        this.show = !this.show;\n      }\n    },\n    getInspectionTypes() {\n      if (!this.error) {\n        this.inspectionTypes = [];\n        let endpoint = `/api/inspection-type/`;\n        apiService(endpoint)\n          .then(data => {\n            this.inspectionTypes.push(...data.results);\n            this.rowData = this.inspectionTypes\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Inspection Type',\n          action: () => this.editInspectionTypeMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Inspection Type',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getDateToday();\n    this.getInspectionTypes();\n  },\n};\n\n</script>\n<style>\n  i:focus,\n  input:focus,\n  select:focus,\n  textarea:focus,\n  button:focus {\n      outline: none;\n  }\n  #new-attribute-section {\n    cursor: pointer;\n    outline: none;\n  }\n</style>\n"]}]}