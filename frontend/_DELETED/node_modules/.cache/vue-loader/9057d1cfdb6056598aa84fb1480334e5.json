{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\inspection-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\inspection-list.vue","mtime":1603878576233},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Inspection\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID INSPECTION VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      modules: AllModules,\n      domLayout: null,\n      paginationPageSize: 0,\n\n      // AG-GRID SAMPLE VARIABLES\n      gridOptions1: null,\n      gridApi1: null,\n      columnApi1: null,\n      columnDefs1: null,\n      rowData1: null,\n      defaultColDef1: null,\n      paginationPageSize1: 0,\n\n      // AG-GRID ATTRIBUTES VARIABLES\n      gridOptions2: null,\n      gridApi2: null,\n      columnApi2: null,\n      columnDefs2: null,\n      rowData2: null,\n      defaultColDef2: null,\n      paginationPageSize2: 0,\n\n      // VUE SAMPLE VARIABLES\n      Inspection: [],\n      OrderItem: [],\n      Comment: null,\n      SampleStatus: null,\n      updateSampleStatus: false,\n      updateSampleId: null,\n      optionStatus: [\n        { value: null, text: 'Choose Sample Status' },\n        { value: 'Approved', text: 'Approved' },\n        { value: 'Not Approved', text: 'Not Approved' },\n        { value: 'Conditionally', text: 'Conditionally' },\n        { value: 'Canceled', text: 'Canceled' },\n      ],\n\n      // VUE ATTRIBUTE VARIABLES\n      updateAttributeStatus: false,\n      updateAttributeId: null,\n      IType: null,\n      KeyAtt: null,\n      NameAtt: null,\n      ValueAtt: null,\n      ValueType: null,\n      Parameter: null,\n      ParameterTags: [],\n      ValueMin: null,\n      ValueMax: null,\n      ValueTol: null,\n      \n      // VUE VARIABLES\n      inspections: [],\n      samples: [],\n      attributes: [],\n      date: null,\n      error: false,\n      Superuser: false,\n      selectedSample: false,\n      selectedInspection: false,\n      optionsInspectionStatus: [\n        { value: 'Work In Progress', text: 'Work In Progress' },\n        { value: 'On Hold', text: 'On Hold' },\n        { value: 'Complete', text: 'Complete' },\n        { value: 'Declined', text: 'Declined' },\n      ],\n      optionsTypes: [\n        { value: 'Integer', text: 'Counter' },\n        { value: 'Float', text: 'Measure' },\n        { value: 'String', text: 'Text' },\n        { value: 'Boolean', text: 'True/False' },\n        { value: 'Select', text: 'Select' },\n      ],\n      optionsUnits: [\n        { value: 'µm', text: 'µm' },\n        { value: 'mm', text: 'mm' },\n        { value: 'cm', text: 'cm' },\n        { value: 'mg', text: 'mg' },\n        { value: 'g', text: 'g' },\n        { value: 'ml', text: 'ml' },\n        { value: 'inch', text: 'inch' },\n        { value: 'oz', text: 'oz' },\n      ],\n      optionsBoolean: [\n        { value: 'true', text: 'True' },\n        { value: 'false', text: 'False' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.gridOptions1 = {};\n    this.gridOptions2 = {};\n    this.columnDefs = [\n      {headerName: \"Inspection Number\", field: \"txtInspectionNumber\", filter: 'agTextColumnFilter', checkboxSelection: true, },\n      {headerName: \"Inspection Status\", field: \"txtInspectionStatus\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Work In Progress', 'On Hold', 'Complete', 'Declined']}},\n      {headerName: \"Inspection Type\", field: \"idInspectionType.txtInspectionInitial\", filter: 'agTextColumnFilter', },\n      {headerName: \"Inspector\", field: \"txtInspector\", filter: 'agTextColumnFilter', },\n      {headerName: \"Inspection Date\", field: \"datInspection\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivered On\", field: \"datDeliveredOn\", filter: 'agTextColumnFilter', },\n      {headerName: \"Requested On\", field: \"datRequestedOn\", filter: 'agTextColumnFilter', },\n      {headerName: \"Link\", field: \"txtLink\", filter: 'agTextColumnFilter', },\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ],\n    this.columnDefs1 = [\n      {headerName: \"Sample ID\", field: \"id\", filter: 'agTextColumnFilter', checkboxSelection: true,  },\n      {headerName: \"Inspection Number\", field: \"idInspection.txtInspectionNumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"Order Number\", field: \"idOrderItem.idOrder.txtOrderNumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"Item Description\", field: \"idOrderItem.idItem.txtDescription\", filter: 'agTextColumnFilter', },\n      {headerName: \"Article Number\", field: \"idOrderItem.idItem.txtArticleNumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"Sample Status\", field: \"txtSampleStatus\", filter: 'agTextColumnFilter', },\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ],\n    this.columnDefs2 = [\n      {headerName: \"Key Attribute\", field: \"txtKeyAttribute\", filter: 'agTextColumnFilter',  },\n      {headerName: \"Name Attribute\", field: \"txtNameAttribute\", filter: 'agTextColumnFilter',  },\n      {headerName: \"Value Attribute\", field: \"txtValueAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Type\", field: \"txtValueType\", filter: 'agTextColumnFilter', editable: false,  valueGetter: ValueTypeGetter, },\n      {headerName: \"Parameter\", field: \"txtParameter\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Min\", field: \"txtValueMin\", filter: 'agTextColumnFilter',  },\n      {headerName: \"Value Max\", field: \"txtValueMax\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Tolerance\", field: \"txtValueTolerance\", filter: 'agTextColumnFilter', },\n    ],\n    this.defaultColDef = { editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef1 = { flex: 1, editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef2 = { editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.paginationPageSize1 = 10;\n    this.paginationPageSize2 = 10;  \n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('inspectionList_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('inspectionList_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  methods: {\n    saveState() {\n      localStorage.setItem('inspectionList_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('inspectionList_columnStats', null);\n    },\n    excelExportInspection() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    changeExternalFilter(val) {\n      this.extFilter = val;\n      this.gridApi.onFilterChanged();\n    },\n    isExternalFilterPresent() {\n      return this.extFilter !== null;\n    },\n    doesExternalFilterPass(node) {\n      switch (this.extFilter) {\n        case 'all':\n          return true;\n        case 'work in progress':\n          return node.data.txtInspectionStatus === 'Work In Progress';\n        case 'on hold':\n          return node.data.txtInspectionStatus === 'On Hold';\n        case 'complete':\n          return node.data.txtInspectionStatus === 'Complete';\n        case 'declined':\n          return node.data.txtInspectionStatus === 'Declined';\n        default:\n          return true;\n      }\n    },\n    onGridReady(params) { \n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi\n      setTimeout(() => {\n        this.getSelectedInspection(params)\n      }, 500);\n    },\n    onGridReady1(params) {\n      this.gridApi1 = params.api;\n      this.gridColumnApi1 = params.columnApi\n    },\n    onGridReady2(params) {\n      this.gridApi2 = params.api;\n      this.gridColumnApi2 = params.columnApi\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridOptions.paginationSetPageSize(Number(value));\n    },\n    onPageSizeChanged1(newPageSize) {\n      var value = document.getElementById('page-size-1').value;\n      this.gridOptions1.paginationSetPageSize(Number(value));\n    },\n    onPageSizeChanged2(newPageSize) {\n      var value = document.getElementById('page-size-2').value;\n      this.gridOptions2.paginationSetPageSize(Number(value));\n    },\n    onRowSelected(event) {\n      this.rowData1 = null;\n      this.rowData2 = null;\n      this.selectedInspection = this.selectedInspection ? false : true;\n      this.selectedSample = false;\n      if(event.node.selected == true) {\n        this.getSamples(event.data.id);\n      } else {\n        this.samples = [];\n        this.attributes = [];\n      }\n    },\n    onRowSelected1(event) {\n      this.selectedSample = this.selectedSample ? false : true\n      if(event.node.selected == true) {\n        this.getAttributes(event.data.id);\n      }\n    },\n    getParameter(params) {\n      if(params.node.data.txtValueType == 'Select') {\n        this.ParameterTags = params.node.data.txtParameter.split(',');\n      } else {\n        this.Parameter = params.node.data.txtParameter;\n      }\n    },\n    setParameter() {\n      let val;\n      if(this.ValueType == 'Select') {\n        return val = this.ParameterTags.toString();\n      } else if(this.ValueType == 'Integer' || this.ValueType == 'String' || this.ValueType == 'Boolean') {\n        return val = null;\n      } else if(this.ValueType == 'Float' ) {\n        return val = this.Parameter.toString();\n      }\n    },\n    editInspection(params) {\n      localStorage.setItem('InspectionID', params.node.data.id)\n      this.$router.push('inspection/')\n    },\n    editSampleMenu(params) {\n      this.emptySampleInput();\n      let sel = params.node.data;\n      this.Inspection = sel.idInspection.id;\n      this.OrderItem = sel.idOrderItem.id;\n      this.SampleStatus = sel.txtSampleStatus;\n      this.Comment = sel.txtComment;\n      this.updateSampleStatus = true;\n      this.updateSampleId = sel.id;\n      document.documentElement.scrollTop = 0;\n    },\n    editAttributeMenu(params) {\n      this.emptyAttributeInput();\n      let sel = params.node.data;\n      this.getParameter(params);\n      this.KeyAtt = sel.txtKeyAttribute;\n      this.NameAtt = sel.txtNameAttribute;\n      this.ValueType = sel.txtValueType;\n      this.ValueAtt = sel.txtValueAttribute;\n      this.ValueMin = sel.txtValueMin;\n      this.ValueMax = sel.txtValueMax;\n      this.ValueTol = sel.txtValueTolerance;\n      this.updateAttributeId = sel.id;\n      this.updateAttributeStatus = true;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateSample() {\n      let endpoint = `/api/sample/${this.updateSampleId}/`;\n      await apiService(endpoint, \"PATCH\", {\n        idInspection: this.Inspection,\n        idOrderItem: this.OrderItem,\n        txtSampleStatus: this.SampleStatus,\n        txtComment: this.Comment,  })\n          .then(response => {\n            this.rowData1 = null;\n            this.rowData2 = null;\n            this.getInspections();\n            this.emptySampleInput();\n          })\n    },\n    async updateAttribute() {\n      let endpoint = `/api/sample-attribute/${this.updateAttributeId}/`;\n      await apiService(endpoint, \"PATCH\", { \n        txtKeyAttribute: this.KeyAtt,\n        txtNameAttribute: this.NameAtt,\n        txtValueType: this.ValueType,\n        txtParameter: this.setParameter(),\n        txtValueAttribute: this.ValueAtt,\n        txtValueMin: this.ValueMin,\n        txtValueMax: this.ValueMax,\n        txtValueTolerance: this.ValueTol,\n        })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.rowData1 = null;\n            this.rowData2 = null;\n            this.getInspections();\n            this.emptyAttributeInput();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    async updateInspectionGrid(event) {     \n      let endpoint = `/api/inspection/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtInspectionNumber: event.node.data.txtInspectionNumber,\n          txtInspectionStatus: event.node.data.txtInspectionStatus,\n          txtInspectionType: event.node.data.txtInspectionType,\n          txtInspector: event.node.data.txtInspector,\n          datInspection: event.node.data.datInspection,\n          datDeliveredOn: event.node.data.datDeliveredOn,\n          datRequestedOn: event.node.data.datRequestedOn,\n          txtRequestedBy: event.node.data.txtRequestedBy,\n          txtLink: event.node.data.txtLink,\n          txtComment: event.node.data.txtComment,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async updateAttributesGrid(event) {     \n      let endpoint = `/api/sample-attribute/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtKeyAttribute: event.node.data.txtKeyAttribute,\n          txtNameAttribute: event.node.data.txtNameAttribute,\n          txtValueAttribute: event.node.data.txtValueAttribute,\n          txtValueType: event.node.data.txtValueType,\n          txtParameter: event.node.data.txtParameter,\n          txtValueMin: event.node.data.txtValueMin,\n          txtValueMax: event.node.data.txtValueMax,\n          txtValueTolerance: event.node.data.txtValueTolerance,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Inspection? => \" + params.node.data.txtInspectionNumber, {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { if (value) { this.deleteInspection(params); } })\n        .catch(err => console.log(err));\n    },\n    openModal1(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Sample?\", {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { if (value) { this.deleteSample(params); } })\n        .catch(err => console.log(err));\n    },\n    openModal2(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Do you really want to delete the Attribute? => \" + params.node.data.txtNameAttribute, {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { if (value) { this.deleteAttribute(params); } })\n        .catch(err => console.log(err));\n    },\n    async deleteInspection(params) {\n      let endpoint = `/api/inspection/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getInspections();\n            this.rowData1 = null;\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false\n            })\n          }\n        })\n    },\n    async deleteSample(params) {\n      let endpoint = `/api/sample/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getSamples(params.node.data.idInspection.id);\n            this.rowData2 = null;\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false\n            })\n          }\n        })\n    },\n    async deleteAttribute(params) {\n      let endpoint = `/api/sample-attribute/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getAttributes(params.node.data.idSample);\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false\n            })\n          }\n        })\n    },\n    emptySampleInput(event) {\n      this.SampleStatus = this.Comment = null;\n      this.Inspection = this.OrderItem = [];\n      this.updateSampleStatus = false;\n    },\n    emptyAttributeInput(event) {\n      this.IType = this.ParameterTags = [];\n      this.KeyAtt = this.NameAtt = this.ValueType = this.ValueDef = this.Parameter = this.ValueMin = this.ValueMax = this.ValueTol = null;\n      this.updateAttributeStatus = false;\n    },\n    emptyLastValueType(event) {\n      this.ValueAtt = this.Parameter = this.ValueMin = this.ValueMax = this.ValueTol = null;\n      this.ParameterTags = [];\n    },\n    getInspections() {\n      this.inspections = [];\n      let endpointInspection = `/api/inspection-list/`;\n      apiService(endpointInspection)\n        .then(data => {\n          this.inspections.push(...data.results);\n          this.rowData = this.inspections\n        })\n        .catch(err => console.log(err));\n    },\n    getSamples(id) {\n      this.samples = [];\n      let endpointSample = `/api/sample-list/`;\n      apiService(endpointSample)\n        .then(data => {\n          this.samples.push(...data.results);\n          let el = this.samples.filter(e => e.idInspection.id == id)\n          this.rowData1 = el\n        })\n        .catch(err => console.log(err));\n    },\n    getOrderItems() {\n      this.orderItems = [];\n      let endpoint = `/api/order-item-list/`;\n      apiService(endpoint)\n        .then(data => { this.orderItems.push(...data.results); })\n        .catch(err => console.log(err));\n    },\n    getAttributes(id) {\n      this.attributes = [];\n      let endpointAttributes = `/api/sample-attribute/`;\n      apiService(endpointAttributes)\n        .then(data => {\n          this.attributes.push(...data.results);\n          let el = this.attributes.filter(e => e.idSample === id)\n          this.rowData2 = el\n        })\n        .catch(err => console.log(err));\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getSelectedInspection(event) {\n      if(window.localStorage.getItem('selInspect') != null) {\n        let el = parseInt(localStorage.getItem('selInspect'));\n        event.api.forEachNode(rowNode => { rowNode.setSelected(rowNode.data.id === el) });\n      }\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Inspection',\n          action: () => this.editInspection(params)\n        },\n        'separator',\n        {\n          name: 'Delete Inspection',\n          action: () => this.openModal(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n    getContextMenu1(params) {\n      var result = [\n        {\n          name: 'Edit Sample',\n          action: () => this.editSampleMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Sample',\n          action: () => this.openModal1(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n    getContextMenu2(params) {\n      var result = [\n        {\n          name: 'Edit Attribute',\n          action: () => this.editAttributeMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Attribute',\n          action: () => this.openModal2(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n    getSuperuser() {\n      let el = localStorage.getItem(\"superuser\")\n      if(el == 'true') {\n        this.Superuser = true;\n      } else {\n        this.Superuser = false;\n      }\n    },\n  },\n  created() {\n    this.getInspections();\n    this.getDateToday();\n    this.getSuperuser();\n    this.getOrderItems();\n  },\n  beforeRouteLeave (to, from, next) {\n    window.localStorage.removeItem('selInspect');\n    next()\n  }\n};\n\nwindow.ValueTypeGetter = function(params) {\n  if(params.data.txtValueType == 'String') {\n    return 'Text'\n  } else if(params.data.txtValueType == 'Integer') {\n    return 'Counter'\n  } else if(params.data.txtValueType == 'Float') {\n    return 'Measure'\n  } else if(params.data.txtValueType == 'Boolean') {\n    return 'True/False'\n  } else if(params.data.txtValueType == 'Select') {\n    return 'Select'\n  }\n}\n\n",null]}