{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\device\\device-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\device\\device-list.vue","mtime":1600269706211},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Device\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      domLayout: null,\n      modules: AllModules,\n\n      // AG-GRID ATTRIBUTES VARIABLES\n      gridOptions1: null,\n      gridApi1: null,\n      gridColumnApi1: null,\n      defaultColDef1: null,\n      columnDefs1: null,\n      rowData1: null,\n      defaultColDef1: null,\n      paginationPageSize1: 0,\n\n      // VUE VARIABLES\n      devices: [],\n      models: [],\n      attributes: [],\n      tempAttributes: [],\n      selectedAttributes: [],\n      SNumber: null,\n      DPosition: null,\n      Model: null,\n      date: null,\n      error: false,\n      updateStatus: false,\n      updateId: null,\n      selectedDevice: false,\n      optionsModels: [],\n      optionAttributes: [],\n      optionPosition: [\n        { code: 'Neuried', text: 'Neuried' },\n        { code: 'Straubing', text: 'Straubing' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.gridOptions1 = {};\n    this.columnDefs = [\n      {headerName: \"Model Name\", field: \"idModel.txtModelName\", filter: 'agTextColumnFilter', checkboxSelection: true,  editable: false},\n      {headerName: \"Serial Number\", field: \"txtSerialNumber\", filter: 'agTextColumnFilter',},\n      {headerName: \"Device Position\", field: \"txtDevicePosition\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Neuried', 'Straubing']},},\n      {headerName: \"Manufacturer\", field: \"idModel.idManufacturer.txtManufacturerName\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Supplier\", field: \"idModel.idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false},\n    ],\n    this.columnDefs1 = [\n      {headerName: \"Key Attribute\", field: \"txtKeyAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Name Attribute\", field: \"txtNameAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Attribute\", field: \"txtValueAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Type\", field: \"txtValueType\", filter: 'agTextColumnFilter', },\n      {headerName: \"Measure Unit\", field: \"txtMeasureUnit\", filter: 'agTextColumnFilter', },\n    ],\n    this.defaultColDef = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef1 = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.paginationPageSize1 = 10;\n  },\n  mounted() {\n    // if (window.DeviceColState)\n    //    this.gridOptions.columnApi.setColumnState(window.DeviceColState);\n    // else\n    //   this.gridApi = this.gridOptions.api;\n    //   this.gridColumnApi = this.gridOptions.columnApi;\n    //   this.gridApi.sizeColumnsToFit();\n  },\n  computed: {\n    disabled: function () {\n      return !this.SNumber ? true : !this.DPosition ? true : !this.Model ? true : false; \n    },\n  },\n  methods: {\n    saveState() {\n      window.DeviceColState = this.gridOptions.columnApi.getColumnState();\n    },\n    restoreState() {\n      window.DeviceColState = null;\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    async updateDeviceGrid(event) {     \n      let endpoint = `/api/device/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtSerialNumber: event.node.data.txtSerialNumber,\n          txtDevicePosition: event.node.data.txtDevicePosition,\n          // idModel: event.node.data.idModel,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async updateAttributeGrid(event) {     \n      let endpoint = `/api/device-attribute/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtKeyAttribute: event.node.data.txtKeyAttribute,\n          txtNameAttribute: event.node.data.txtNameAttribute,\n          txtValueAttribute: event.node.data.txtValueAttribute,\n          txtValueType: event.node.data.txtValueType,\n          txtMeasureUnit: event.node.data.txtMeasureUnit,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    onRowSelectedDevice(event) {\n      this.selectedDevice = this.selectedDevice ? false : true\n      if(event.node.selected == true) {\n        this.getAttributes(event.data.id);\n        window.localStorage.setItem('selDevice', event.node.data.id)\n      } else {\n        this.gridApi.redrawRows();\n        this.attributes = [];\n      }\n    },\n    onGridReady(params) { \n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi\n      setTimeout(() => {\n        this.getSelectedDevice(params)\n      }, 500);\n    },\n    onGridReady1(params) {\n      this.gridApi1 = params.api;\n      this.gridColumnApi1 = params.columnApi\n    },\n    editItemMenu(params) {\n      let sel = params.node.data;\n      this.SNumber = sel.txtSerialNumber;\n      this.DPosition = sel.txtDevicePosition;\n      this.Model = sel.idModel;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.$root.$emit('bv::toggle::collapse', 'collapse-e');\n      document.documentElement.scrollTop = 0;\n    },\n    async updateDevice() {\n      if(typeof this.Model == \"object\") { this.Model = this.Model.id } else { this.Model = this.Model }\n      let endpoint = `/api/device/${this.updateId}/`;\n      await apiService(endpoint, \"PATCH\", { \n        txtSerialNumber: this.SNumber,\n        txtDevicePosition: this.DPosition,\n        idModel: this.Model, })\n        .then(response => {\n          if (response != 'ERROR'){\n            for (let i = 0; i < this.selectedAttributes.length; i++) {\n              const el = this.selectedAttributes[i];\n              let endpointAttributes = `/api/device-attribute/`;\n              apiService(endpointAttributes, \"POST\", { \n                txtKeyAttribute: el.txtKeyAttribute, \n                txtNameAttribute: el.txtNameAttribute, \n                txtValueAttribute: el.txtValueDefault, \n                txtValueType: el.txtValueType, \n                txtMeasureUnit: el.txtMeasureUnit,\n                idDevice: response.id,\n              })\n            };\n            this.selectedDevice = false;\n            this.attributes = [];\n            this.emptyInput();\n            this.getDevices();\n          } else {\n            this.error = true;\n          }\n        })\n      if (this.error) {\n        this.error = false;\n      }\n    },\n    getDevices() {\n      if (!this.error) {\n        this.devices = [];\n        let endpoint = `/api/device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.devices.push(...data.results);\n            this.rowData = this.devices\n          })\n      }\n    },\n    getModels() {\n      if (!this.error) {\n        this.models = [];\n        let endpoint = `/api/model/`;\n        apiService(endpoint)\n          .then(data => {\n            this.models.push(...data.results);\n            this.optionsModels = this.models\n          })\n      }\n    },\n    getAttributes(id) {\n      if (!this.error) {\n        this.attributes = [];\n        let endpoint = `/api/device-attribute/`;\n        apiService(endpoint)\n          .then(data => {\n            this.attributes.push(...data.results);\n            let el = this.attributes.filter(e => e.idDevice == id)\n            this.rowData1 = el\n          })\n      }\n    },\n    getTemplateAttributes() {\n      if (!this.error) {\n        this.tempAttributes = [];\n        let endpoint = `/api/device-template-attribute/`;\n        apiService(endpoint)\n          .then(data => {\n            this.tempAttributes.push(...data.results);\n            this.optionAttributes = this.tempAttributes\n          })\n      }\n    },\n    addDevice() {\n      if (this.SNumber) {\n        let endpoint = `/api/device/`;\n        apiService(endpoint, \"POST\", { txtSerialNumber: this.SNumber, txtDevicePosition: this.DPosition, idModel: this.Model.id })\n        .then(response => {\n          if (response != 'ERROR'){\n              for (let i = 0; i < this.selectedAttributes.length; i++) {\n                const el = this.selectedAttributes[i];\n                let endpointAttributes = `/api/item-attribute/`;\n                apiService(endpointAttributes, \"POST\", { \n                  txtKeyAttribute: el.txtKeyAttribute, \n                  txtNameAttribute: el.txtNameAttribute, \n                  txtValueAttribute: el.txtValueDefault, \n                  txtValueType: el.txtValueType, \n                  txtMeasureUnit: el.txtMeasureUnit,\n                  idItem: response.id,\n                })\n              };\n            this.getDevices();\n            this.emptyInput();\n          } else {\n            this.error = true;\n          }\n        })\n        if (this.error) {\n          this.error = false;\n        }\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Device? => \" + params.node.data.txtSerialNumber, {\n          title: \"Please Confirm\",\n          size: \"sm\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteDevice();\n          }\n        })\n    },\n    openModal1(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Do you really want to delete the Attribute? => \" + params.node.data.txtNameAttribute, {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true })\n        .then(value => {\n          if (value) {\n            this.deleteAttribute(params);\n          }\n        })\n    },\n    async deleteDevice(params) {\n      let endpoint = `/api/device/${params.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\")\n        this.getDevices();\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async deleteAttribute(params) {\n      let endpoint = `/api/device-attribute/${params.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\")\n        let id = window.localStorage.getItem('selDevice');\n        this.getAttributes(id);\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    emptyInput() {\n      this.SNumber = '',\n      this.DPosition = '',\n      this.Model = [],\n      this.selectedAttributes = [],\n      this.$root.$emit('bv::toggle::collapse', 'collapse-e')\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Device',\n          action: () => this.editItemMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Device',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n    getContextMenu1(params) {\n      var result = [\n        {\n          name: 'Delete Attribute',\n          action: () => this.openModal1(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n    getSelectedDevice(event) {\n      if(window.localStorage.getItem('selDevice') != null) {\n        let el = parseInt(localStorage.getItem('selDevice'));\n        event.api.forEachNode(rowNode => { rowNode.setSelected(rowNode.data.id === el) });\n      }\n    },\n  },\n  created() {\n    this.getDevices();\n    this.getModels();\n    this.getDateToday();\n    this.getTemplateAttributes();\n  },\n  beforeRouteLeave (to, from, next) {\n    window.localStorage.removeItem('selDevice');\n    next()\n  }\n};\n",null]}