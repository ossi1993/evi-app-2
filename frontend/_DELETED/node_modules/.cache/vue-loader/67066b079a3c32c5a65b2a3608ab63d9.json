{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\order\\order-device-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\order\\order-device-list.vue","mtime":1602073176186},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Device Orders\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      domLayout: null,\n      modules: AllModules,\n\n      // VUE VARIABLES\n      orders: [],\n      devices: [],\n      orderedDevice: [],\n      DatOrder: null,\n      DatDelivery: null,\n      OrderAmount: null,\n      DelStatus: null,\n      Comment: null,\n      show: false,\n      date: null,\n      next: null,\n      error: false,\n      updateDeviceId: null,\n      updateDeviceStatus: false,\n      optionStatus: [\n        { code: null, label: 'Choose Delivery Status' },\n        { code: 'Delivered', label: 'Delivered' },\n        { code: 'Not Delivered', label: 'Not Delivered' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Order Number\", field: \"idOrder.txtOrderNumber\", filter: 'agTextColumnFilter', editable: false,},\n      {headerName: \"Serial Number\", field: \"idDevice.txtSerialNumber\", filter: 'agTextColumnFilter', },\n      {headerName: \"IMEI\", field: \"idDevice.txtIMEI\", filter: 'agTextColumnFilter', },\n      {headerName: \"Device\", field: \"idDevice.idModel.txtModelName\", filter: 'agTextColumnFilter', editable: false,},\n      {headerName: \"Order Amount\", field: \"numOrderAmount\", filter: 'agTextColumnFilter',},\n      {headerName: \"Order Date\", field: \"datOrder\", filter: 'agTextColumnFilter',},\n      {headerName: \"Delivery Date\", field: \"datDelivery\", filter: 'agTextColumnFilter',} ,\n      {headerName: \"Delivery Status\", field: \"txtDeliveryStatus\", filter: 'agTextColumnFilter', editable: false,},\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ],\n    this.defaultColDef = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('orderDevice_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('orderDevice_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  methods: {\n    saveState() {\n      localStorage.setItem('orderDevice_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('orderDevice_columnStats', null);\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onRowSelected(event) {\n      this.show1 = this.show1 ? false : true\n    },\n    changeExternalFilter(val) {\n      this.extFilter = val;\n      this.gridApi.onFilterChanged();\n    },\n    isExternalFilterPresent() {\n      return this.extFilter !== null;\n    },\n    doesExternalFilterPass(node) {\n      switch (this.extFilter) {\n        case 'all':\n          return true;\n        case 'delivered':\n          return node.data.txtDeliveryStatus === 'Delivered';\n        case 'not delivered':\n          return node.data.txtDeliveryStatus === 'Not Delivered';\n        default:\n          return true;\n      }\n    },\n    editOrderDeviceMenu(params) {\n      this.emptyDeviceInput();\n      let sel = params.node.data;\n      this.orderedDevice = sel.idDevice;\n      this.DatOrder = sel.datOrder;\n      this.DatDelivery = sel.datDelivery;\n      this.OrderAmount = sel.numOrderAmount;\n      this.DelStatus = sel.txtDeliveryStatus;\n      this.Comment = sel.txtComment;\n      this.updateDeviceStatus = true;\n      this.updateDeviceId = sel.id;\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateDeviceOrder() {\n      let endpoint = `/api/order-device/${this.updateDeviceId}/`;\n      await apiService(endpoint, \"PATCH\", {\n        datOrder: this.DatOrder,\n        datDelivery: this.DatDelivery,\n        numOrderAmount: this.OrderAmount,\n        txtDeliveryStatus: this.DelStatus,\n        txtComment: this.Comment, \n        idDevice: this.orderedDevice.id })\n          .then(response => {\n            this.getDeviceOrder();\n            this.emptyDeviceInput();\n          })\n    },\n    async updateDeviceOrderGrid(event) {     \n      let endpoint = `/api/order-device/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", {\n          datOrder: event.node.data.datOrder,\n          datDelivery: event.node.data.datDelivery,\n          numOrderAmount: event.node.data.numOrderAmount,\n          txtDeliveryStatus: event.node.data.txtDeliveryStatus,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) { console.log(err) }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Order? => \" + params.node.data.idDevice.txtSerialNumber, {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => { if (value) { this.deleteDeviceOrder(params); } })\n        .catch(err => console.log(err));\n    },\n    async deleteDeviceOrder(params) {\n      let endpoint = `/api/order-device/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getDeviceOrder();\n          } else {\n            this.$bvToast.toast(`You can't delete this instance. Please check if all connections to this instance are deleted.`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false\n            })\n          }\n        })\n    },\n    emptyDeviceInput(event) {\n      this.DatOrder = this.DatDelivery = this.OrderAmount = this.DelStatus = this.Comment = null;\n      this.orderedDevice = [];\n      this.show = !this.show;\n      this.updateDeviceStatus = false;\n    },\n    getDevice() {\n      if (!this.error) {\n        this.devices = [];\n        let endpoint = `/api/device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.devices.push(...data.results);\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDeviceOrder() {\n      if (!this.error) {\n        this.orders = [];\n        let endpoint = `/api/order-device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orders.push(...data.results);\n            this.rowData = this.orders\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Order Device',\n          action: () => this.editOrderDeviceMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Device Order',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getDeviceOrder();\n    this.getDateToday();\n    this.getDevice();\n  },\n};\n",null]}