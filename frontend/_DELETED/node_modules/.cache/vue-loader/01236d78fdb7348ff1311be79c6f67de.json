{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\inspection-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\inspection-list.vue","mtime":1598362407785},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\";\nimport { RichSelectModule } from '@ag-grid-enterprise/rich-select';\nimport { MenuModule } from '@ag-grid-enterprise/menu';\nimport { ColumnsToolPanelModule } from '@ag-grid-enterprise/column-tool-panel';\nimport { SetFilterModule } from '@ag-grid-enterprise/set-filter';\nimport { AllCommunityModules } from '@ag-grid-community/all-modules';\nimport { MasterDetailModule } from '@ag-grid-enterprise/master-detail';\n\nexport default {\n  metaInfo: {    \n    title: \"Inspection\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      columnDefsMod: null,\n      rowData: null,\n      rowDataMod: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: [\n        ClientSideRowModelModule,\n        SetFilterModule,\n        RichSelectModule,\n        MenuModule,\n        ColumnsToolPanelModule,\n        MasterDetailModule,\n      ],\n      inspections: [],\n      show: false,\n      visible: false,\n      date: null,\n      next: null,\n      error: false,\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Inspection Number\", field: \"txtInspectionNumber\", filter: 'agTextColumnFilter', checkboxSelection: true,},\n      {headerName: \"Inspection Status\", field: \"txtInspectionStatus\", filter: 'agTextColumnFilter',},\n      {headerName: \"Inspection Type\", field: \"txtInspectionType\", filter: 'agTextColumnFilter',},\n      {headerName: \"Inspection Date\", field: \"datInspection\", filter: 'agTextColumnFilter',},\n      {headerName: \"Inspector\", field: \"txtInspector\", filter: 'agTextColumnFilter',},\n      {headerName: \"Approval\", field: \"txtApproval\", filter: 'agTextColumnFilter',},\n      {headerName: \"Comment 1\", field: \"txtComment1\", filter: 'agTextColumnFilter',},\n      {headerName: \"Comment 2\", field: \"txtComment2\", filter: 'agTextColumnFilter',},\n    ],\n    this.defaultColDef = {\n      flex: 1,\n      editable: false,\n      resizable: true,\n      sortable: true,\n      filter: true,\n      floatingFilter: true,\n    };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n  },\n  mounted() {\n    this.gridApi = this.gridOptions.api;\n    this.gridColumnApi = this.gridOptions.columnApi;\n  },\n  methods: {\n    autoSizeAll(skipHeader) {\n      var allColumnIds = [];\n      this.gridColumnApi.getAllColumns().forEach(function(column) {\n        allColumnIds.push(column.colId);\n      });\n      this.gridColumnApi.autoSizeColumns(allColumnIds, skipHeader);\n    },\n    async cellValueChanged(event) {     \n      let endpoint = `/api/inspection/${event.node.data.id}/`;\n      console.log(event.node.data.id)\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtInspectionNumber: event.node.data.txtInspectionNumber,\n          txtInspectionStatus: event.node.data.txtInspectionStatus,\n          txtInspectionType: event.node.data.txtInspectionType,\n          datInspection: event.node.data.datInspection,\n          txtInspector: event.node.data.txtInspector,\n          txtApproval: event.node.data.txtApproval,\n          txtComment1: event.node.data.txtComment1,\n          txtComment2: event.node.data.txtComment2,\n          idOrderDevice: event.node.data.idOrderDevice,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    onGridReady(params) { \n      // this.autoSizeAll(false);\n    },\n    getInspections() {\n      if (!this.error) {\n        let endpoint = `/api/inspection/`;\n        apiService(endpoint)\n          .then(data => {\n            this.inspections.push(...data.results);\n            this.rowData = this.inspections\n          })\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Inspection?\", {\n          title: \"Please Confirm\",\n          size: \"sm\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteInspection();\n          }\n        })\n    },\n    async deleteInspection() {\n      var selectedRows = this.gridApi.getSelectedRows();\n      let endpoint = `/api/inspection/${selectedRows[0].id}/`;\n      try {\n        var index = this.inspections.map(function(e) { return e.id; }).indexOf(selectedRows[0].id);\n        this.$delete(this.inspections, index)\n        await apiService(endpoint, \"DELETE\")\n        this.show = this.show ? false : true\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    editInspection() {\n      this.$route.push('inspection')\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n  },\n  created() {\n    this.getInspections();\n    this.getDateToday();\n  },\n};\n",{"version":3,"sources":["inspection-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"inspection-list.vue","sourceRoot":"src/views/app/inspection","sourcesContent":["<template>\n  <!-- ============ Body content start ============= -->\n  <div class=\"main-content\">\n    <breadcumb :page=\"'List'\" :folder=\"'Inspection'\" />\n    <b-row>\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\">\n          <i class=\"i-File-Clipboard-File--Text\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Inspections</p>\n            <p class=\"inline text-primary text-24 line-height-1 mb-2\">{{ this.inspections.length }}</p>\n          </div>\n        </b-card>\n      </b-col>\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\">\n          <i class=\"i-Calendar\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Date</p>\n            <p class=\"text-primary text-24 line-height-1 mb-2\"><nobr>{{ this.date }}</nobr></p>\n          </div>\n        </b-card>\n      </b-col>\n    </b-row>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0\">\n            <AgGridVue class=\"ag-theme-alpine\"\n                id=\"gridInspection\"\n                :defaultColDef=\"defaultColDef\"\n                :columnDefs=\"columnDefs\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData\"\n                :gridOptions=\"gridOptions\"\n                :suppressRowClickSelection=\"true\"\n                @grid-ready=\"onGridReady\"\n                @cellValueChanged=\"cellValueChanged\"\n                @row-selected=\"onRowSelected\"\n                :masterDetail=\"true\"\n                :detailCellRendererParams=\"detailCellRendererParams\"\n                :pagination=\"true\"\n                :paginationPageSize=\"10\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n          </div>\n        </div>\n      </div>\n    </div>\n    <b-collapse v-model=\"show\" class=\"ml-1 mr-3\">\n      <b-button class=\"mr-3\" to=\"inspection\" variant=\"primary\">Edit Inspection</b-button>\n      <b-button class=\"mr-3\" variant=\"outline-primary\">Delete Inspection</b-button>\n    </b-collapse>\n  </div>\n  <!-- ============ Body content End ============= -->\n</template>\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\";\nimport { RichSelectModule } from '@ag-grid-enterprise/rich-select';\nimport { MenuModule } from '@ag-grid-enterprise/menu';\nimport { ColumnsToolPanelModule } from '@ag-grid-enterprise/column-tool-panel';\nimport { SetFilterModule } from '@ag-grid-enterprise/set-filter';\nimport { AllCommunityModules } from '@ag-grid-community/all-modules';\nimport { MasterDetailModule } from '@ag-grid-enterprise/master-detail';\n\nexport default {\n  metaInfo: {    \n    title: \"Inspection\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      columnDefsMod: null,\n      rowData: null,\n      rowDataMod: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: [\n        ClientSideRowModelModule,\n        SetFilterModule,\n        RichSelectModule,\n        MenuModule,\n        ColumnsToolPanelModule,\n        MasterDetailModule,\n      ],\n      inspections: [],\n      show: false,\n      visible: false,\n      date: null,\n      next: null,\n      error: false,\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Inspection Number\", field: \"txtInspectionNumber\", filter: 'agTextColumnFilter', checkboxSelection: true,},\n      {headerName: \"Inspection Status\", field: \"txtInspectionStatus\", filter: 'agTextColumnFilter',},\n      {headerName: \"Inspection Type\", field: \"txtInspectionType\", filter: 'agTextColumnFilter',},\n      {headerName: \"Inspection Date\", field: \"datInspection\", filter: 'agTextColumnFilter',},\n      {headerName: \"Inspector\", field: \"txtInspector\", filter: 'agTextColumnFilter',},\n      {headerName: \"Approval\", field: \"txtApproval\", filter: 'agTextColumnFilter',},\n      {headerName: \"Comment 1\", field: \"txtComment1\", filter: 'agTextColumnFilter',},\n      {headerName: \"Comment 2\", field: \"txtComment2\", filter: 'agTextColumnFilter',},\n    ],\n    this.defaultColDef = {\n      flex: 1,\n      editable: false,\n      resizable: true,\n      sortable: true,\n      filter: true,\n      floatingFilter: true,\n    };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n  },\n  mounted() {\n    this.gridApi = this.gridOptions.api;\n    this.gridColumnApi = this.gridOptions.columnApi;\n  },\n  methods: {\n    autoSizeAll(skipHeader) {\n      var allColumnIds = [];\n      this.gridColumnApi.getAllColumns().forEach(function(column) {\n        allColumnIds.push(column.colId);\n      });\n      this.gridColumnApi.autoSizeColumns(allColumnIds, skipHeader);\n    },\n    async cellValueChanged(event) {     \n      let endpoint = `/api/inspection/${event.node.data.id}/`;\n      console.log(event.node.data.id)\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtInspectionNumber: event.node.data.txtInspectionNumber,\n          txtInspectionStatus: event.node.data.txtInspectionStatus,\n          txtInspectionType: event.node.data.txtInspectionType,\n          datInspection: event.node.data.datInspection,\n          txtInspector: event.node.data.txtInspector,\n          txtApproval: event.node.data.txtApproval,\n          txtComment1: event.node.data.txtComment1,\n          txtComment2: event.node.data.txtComment2,\n          idOrderDevice: event.node.data.idOrderDevice,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    onGridReady(params) { \n      // this.autoSizeAll(false);\n    },\n    getInspections() {\n      if (!this.error) {\n        let endpoint = `/api/inspection/`;\n        apiService(endpoint)\n          .then(data => {\n            this.inspections.push(...data.results);\n            this.rowData = this.inspections\n          })\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Inspection?\", {\n          title: \"Please Confirm\",\n          size: \"sm\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteInspection();\n          }\n        })\n    },\n    async deleteInspection() {\n      var selectedRows = this.gridApi.getSelectedRows();\n      let endpoint = `/api/inspection/${selectedRows[0].id}/`;\n      try {\n        var index = this.inspections.map(function(e) { return e.id; }).indexOf(selectedRows[0].id);\n        this.$delete(this.inspections, index)\n        await apiService(endpoint, \"DELETE\")\n        this.show = this.show ? false : true\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    editInspection() {\n      this.$route.push('inspection')\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n  },\n  created() {\n    this.getInspections();\n    this.getDateToday();\n  },\n};\n</script>\n<style>\n  i:focus,\n  input:focus,\n  select:focus,\n  textarea:focus,\n  button:focus {\n      outline: none;\n  }\n</style>\n"]}]}