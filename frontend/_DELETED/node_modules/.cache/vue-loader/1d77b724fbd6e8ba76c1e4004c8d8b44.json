{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\inspection-list.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\inspection-list.vue","mtime":1601447846525},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ni:focus,\ninput:focus,\nselect:focus,\ntextarea:focus,\nbutton:focus {\n    outline: none;\n}\n",{"version":3,"sources":["inspection-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAydA;AACA;AACA;AACA;AACA;AACA;AACA","file":"inspection-list.vue","sourceRoot":"src/views/app/inspection","sourcesContent":["<template>\n  <!-- ============ Body content start ============= -->\n  <div class=\"main-content\">\n    <breadcumb :page=\"'List'\" :folder=\"'Inspection'\" />\n    <b-row>\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\">\n          <i class=\"i-File-Clipboard-File--Text\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Inspections</p>\n            <p class=\"inline text-primary text-24 line-height-1 mb-2\">{{ this.inspections.length }}</p>\n          </div>\n        </b-card>\n      </b-col>\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\">\n          <i class=\"i-Calendar\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Date</p>\n            <p class=\"text-primary text-24 line-height-1 mb-2\"><nobr>{{ this.date }}</nobr></p>\n          </div>\n        </b-card>\n      </b-col>\n    </b-row>\n    <!-- AG-GRID INSPECTION -->\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0\">\n            <h5 class=\"card-title p-3 pb-0 mb-3\">Inspections</h5>\n            <AgGridVue class=\"ag-theme-alpine\"\n                id=\"gridInspection\"\n                :defaultColDef=\"defaultColDef\"\n                :columnDefs=\"columnDefs\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData\"\n                :gridOptions=\"gridOptions\"\n                :suppressRowClickSelection=\"true\"\n                :excelStyles=\"excelStyles\"\n                @cellValueChanged=\"updateInspectionGrid\"\n                @row-selected=\"onRowSelected\"\n                @gridReady=\"onGridReady\"\n                :pagination=\"true\"\n                :paginationPageSize=\"paginationPageSize\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n            <div class=\"ml-3 mr-3 mt-2 mb-2 text-right\">\n                Page Size:\n                <select @change=\"onPageSizeChanged\" id=\"page-size\">\n                    <option value=\"10\" selected=\"\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                </select>\n                <b-button @click=\"excelExportInspection\" class=\"ml-3\" size=\"sm\" variant=\"outline-success\">Export Excel</b-button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- AG-GRID SAMPLE -->\n    <div class=\"row\" v-if=\"selectedInspection\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0\">\n            <h5 class=\"card-title p-3 pb-0 mb-3\">Samples</h5>\n            <AgGridVue class=\"ag-theme-alpine\"\n                id=\"gridSample\"\n                :defaultColDef=\"defaultColDef1\"\n                :columnDefs=\"columnDefs1\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData1\"\n                :gridOptions=\"gridOptions1\"\n                :suppressRowClickSelection=\"true\"\n                @row-selected=\"onRowSelected1\"\n                @gridReady=\"onGridReady1\"\n                :pagination=\"true\"\n                :paginationPageSize=\"paginationPageSize1\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n            <div class=\"ml-3 mr-3 mt-2 mb-2 text-right\">\n                Page Size:\n                <select @change=\"onPageSizeChanged1\" id=\"page-size-1\">\n                    <option value=\"10\" selected=\"\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                </select>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- AG-GRID ATTRIBUTES -->\n    <div class=\"row\" v-if=\"selectedSample\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0\">\n            <h5 class=\"card-title p-3 pb-0 mb-3\">Attributes</h5>\n            <AgGridVue class=\"ag-theme-alpine\"\n                id=\"gridAttributes\"\n                :defaultColDef=\"defaultColDef2\"\n                :columnDefs=\"columnDefs2\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData2\"\n                :gridOptions=\"gridOptions2\"\n                :suppressRowClickSelection=\"true\"\n                @cellValueChanged=\"updateAttributesGrid\"\n                @gridReady=\"onGridReady2\"\n                :pagination=\"true\"\n                :paginationPageSize=\"paginationPageSize2\"\n                :getContextMenuItems=\"getContextMenu2\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n            <div class=\"ml-3 mr-3 mt-2 mb-2 text-right\">\n                Page Size:\n                <select @change=\"onPageSizeChanged2\" id=\"page-size-2\">\n                    <option value=\"10\" selected=\"\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                </select>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <b-row class=\"ml-1 mr-3 mb-4\">\n      <b-button class=\"mr-3\" @click=\"saveState\" variant=\"primary\">Save Grid State</b-button>\n      <b-button @click=\"restoreState\" variant=\"outline-light\">Reset Grid State</b-button>\n    </b-row>\n  </div>\n  <!-- ============ Body content End ============= -->\n</template>\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Inspection\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID INSPECTION VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      modules: AllModules,\n      domLayout: null,\n      paginationPageSize: 0,\n\n      // AG-GRID SAMPLE VARIABLES\n      gridOptions1: null,\n      gridApi1: null,\n      columnApi1: null,\n      columnDefs1: null,\n      rowData1: null,\n      defaultColDef1: null,\n      paginationPageSize1: 0,\n\n      // AG-GRID ATTRIBUTES VARIABLES\n      gridOptions2: null,\n      gridApi2: null,\n      columnApi2: null,\n      columnDefs2: null,\n      rowData2: null,\n      defaultColDef2: null,\n      paginationPageSize2: 0,\n\n      // VUE VARIABLES\n      inspections: [],\n      samples: [],\n      attributes: [],\n      show: false,\n      date: null,\n      error: false,\n      Superuser: false,\n      selectedSample: false,\n      selectedInspection: false,\n      optionsInspectionStatus: [\n        { value: 'Work In Progress', text: 'Work In Progress' },\n        { value: 'On Hold', text: 'On Hold' },\n        { value: 'Complete', text: 'Complete' },\n        { value: 'Declined', text: 'Declined' },\n      ]\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.gridOptions1 = {};\n    this.gridOptions2 = {};\n    this.columnDefs = [\n      {headerName: \"Inspection Number\", field: \"txtInspectionNumber\", filter: 'agTextColumnFilter', checkboxSelection: true, },\n      {headerName: \"Inspection Status\", field: \"txtInspectionStatus\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Work In Progress', 'On Hold', 'Complete', 'Declined']}},\n      {headerName: \"Inspection Type\", field: \"txtInspectionType\", filter: 'agTextColumnFilter', },\n      {headerName: \"Inspector\", field: \"txtInspector\", filter: 'agTextColumnFilter', },\n      {headerName: \"Inspection Date\", field: \"datInspection\", filter: 'agTextColumnFilter', },\n      {headerName: \"Delivered On\", field: \"datDeliveredOn\", filter: 'agTextColumnFilter', },\n      {headerName: \"Requested On\", field: \"datRequestedOn\", filter: 'agTextColumnFilter', },\n      {headerName: \"Link\", field: \"txtLink\", filter: 'agTextColumnFilter', },\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', },\n    ],\n    this.columnDefs1 = [\n      {headerName: \"Inspection Number\", field: \"idInspection.txtInspectionNumber\", filter: 'agTextColumnFilter', checkboxSelection: true,  },\n      {headerName: \"Item Description\", field: \"idOrderItem.idItem.txtDescription\", filter: 'agTextColumnFilter', },\n      {headerName: \"Article Number\", field: \"idOrderItem.idItem.txtArticlenumber\", filter: 'agTextColumnFilter', },\n    ],\n    this.columnDefs2 = [\n      {headerName: \"Key Attribute\", field: \"txtKeyAttribute\", filter: 'agTextColumnFilter',  },\n      {headerName: \"Name Attribute\", field: \"txtNameAttribute\", filter: 'agTextColumnFilter',  },\n      {headerName: \"Value Attribute\", field: \"txtValueAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Type\", field: \"txtValueType\", filter: 'agTextColumnFilter', },\n      {headerName: \"Parameter\", field: \"txtParameter\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Min\", field: \"txtValueMin\", filter: 'agTextColumnFilter',  },\n      {headerName: \"Value Max\", field: \"txtValueMax\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Tolerance\", field: \"txtValueTolerance\", filter: 'agTextColumnFilter', },\n    ],\n    this.defaultColDef = { editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef1 = { flex: 1, editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef2 = { editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.paginationPageSize1 = 10;\n    this.paginationPageSize2 = 10;  \n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('inspectionList_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('inspectionList_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  methods: {\n    saveState() {\n      localStorage.setItem('inspectionList_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('inspectionList_columnStats', null);\n    },\n    excelExportInspection() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onGridReady(params) { \n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi\n      setTimeout(() => {\n        this.getSelectedInspection(params)\n      }, 500);\n    },\n    onGridReady1(params) {\n      this.gridApi1 = params.api;\n      this.gridColumnApi1 = params.columnApi\n    },\n    onGridReady2(params) {\n      this.gridApi2 = params.api;\n      this.gridColumnApi2 = params.columnApi\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridOptions.paginationSetPageSize(Number(value));\n    },\n    onPageSizeChanged1(newPageSize) {\n      var value = document.getElementById('page-size-1').value;\n      this.gridOptions1.paginationSetPageSize(Number(value));\n    },\n    onPageSizeChanged2(newPageSize) {\n      var value = document.getElementById('page-size-2').value;\n      this.gridOptions2.paginationSetPageSize(Number(value));\n    },\n    onRowSelected(event) {\n      this.selectedInspection = this.selectedInspection ? false : true;\n      this.selectedSample = false;\n      if(event.node.selected == true) {\n        this.getSamples(event.data.id);\n      } else {\n        this.samples = [];\n        this.attributes = [];\n      }\n    },\n    onRowSelected1(event) {\n      this.selectedSample = this.selectedSample ? false : true\n      if(event.node.selected == true) {\n        this.getAttributes(event.data.id);\n      }\n    },\n    editInspection() {\n      this.$route.push('inspection')\n    },\n    async updateInspectionGrid(event) {     \n      let endpoint = `/api/inspection/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtInspectionNumber: event.node.data.txtInspectionNumber,\n          txtInspectionStatus: event.node.data.txtInspectionStatus,\n          txtInspectionType: event.node.data.txtInspectionType,\n          txtInspector: event.node.data.txtInspector,\n          datInspection: event.node.data.datInspection,\n          datDeliveredOn: event.node.data.datDeliveredOn,\n          datRequestedOn: event.node.data.datRequestedOn,\n          txtRequestedBy: event.node.data.txtRequestedBy,\n          txtLink: event.node.data.txtLink,\n          txtComment: event.node.data.txtComment,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async updateAttributesGrid(event) {     \n      let endpoint = `/api/sample-attribute/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtKeyAttribute: event.node.data.txtKeyAttribute,\n          txtNameAttribute: event.node.data.txtNameAttribute,\n          txtValueAttribute: event.node.data.txtValueAttribute,\n          txtValueType: event.node.data.txtValueType,\n          txtParameter: event.node.data.txtParameter,\n          txtValueMin: event.node.data.txtValueMin,\n          txtValueMax: event.node.data.txtValueMax,\n          txtValueTolerance: event.node.data.txtValueTolerance,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Inspection? => \" + params.node.data.txtInspectionNumber, {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => { if (value) { this.deleteInspection(params); } })\n        .catch(err => console.log(err));\n    },\n    openModal2(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Do you really want to delete the Attribute? => \" + params.node.data.txtNameAttribute, {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true })\n        .then(value => { if (value) { this.deleteAttribute(params); } })\n        .catch(err => console.log(err));\n    },\n    async deleteInspection(params) {\n      let endpoint = `/api/inspection/${params.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\")\n        this.getInspections();\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async deleteAttribute(params) {\n      let endpoint = `/api/sample-attribute/${params.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\")\n        this.getAttributes(params.node.data.idSample);\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    getInspections() {\n      this.inspections = [];\n      let endpointInspection = `/api/inspection/`;\n      apiService(endpointInspection)\n        .then(data => {\n          this.inspections.push(...data.results);\n          this.rowData = this.inspections\n        })\n        .catch(err => console.log(err));\n    },\n    getSamples(id) {\n      this.samples = [];\n      let endpointSample = `/api/sample-list/`;\n      apiService(endpointSample)\n        .then(data => {\n          this.samples.push(...data.results);\n          let el = this.samples.filter(e => e.idInspection.id == id)\n          this.rowData1 = el\n        })\n        .catch(err => console.log(err));\n    },\n    getAttributes(id) {\n      this.attributes = [];\n      let endpointAttributes = `/api/sample-attribute/`;\n      apiService(endpointAttributes)\n        .then(data => {\n          this.attributes.push(...data.results);\n          let el = this.attributes.filter(e => e.idSample == id)\n          this.rowData2 = el\n        })\n        .catch(err => console.log(err));\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getSelectedInspection(event) {\n      if(window.localStorage.getItem('selInspect') != null) {\n        let el = parseInt(localStorage.getItem('selInspect'));\n        event.api.forEachNode(rowNode => { rowNode.setSelected(rowNode.data.id === el) });\n      }\n    },\n    getContextMenu2(params) {\n      var result = [\n        {\n          name: 'Delete Attribute',\n          action: () => this.openModal2(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n    getSuperuser() {\n      let el = localStorage.getItem(\"superuser\")\n      if(el == 'true') {\n        this.Superuser = true;\n      } else {\n        this.Superuser = false;\n      }\n    },\n  },\n  created() {\n    this.getInspections();\n    this.getDateToday();\n    this.getSuperuser();\n  },\n  beforeRouteLeave (to, from, next) {\n    window.localStorage.removeItem('selInspect');\n    next()\n  }\n};\n</script>\n<style>\n  i:focus,\n  input:focus,\n  select:focus,\n  textarea:focus,\n  button:focus {\n      outline: none;\n  }\n</style>\n"]}]}