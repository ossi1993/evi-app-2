{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\order\\order-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\order\\order-list.vue","mtime":1599574116885},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Orders\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      columnDefsMod: null,\n      rowData: null,\n      rowDataMod: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: AllModules,\n      // VUE VARIABLES\n      suppliers: [],\n      items: [],\n      devices: [],\n      orders: [],\n      show: false,\n      visible: false,\n      name: '',\n      ONumber: '',\n      DatOrder: '',\n      DatDelivery: null,\n      OType: '',\n      CNumber: null,\n      DelStatus: '',\n      Supplier: '',\n      selectedItems: '',\n      selectedItemsId: '',\n      selectedDevices: '',\n      selectedDevicesId: '',\n      date: null,\n      next: null,\n      error: false,\n      optionSupplier: [],\n      optionItems: [],\n      optionDevices: [],\n      optionType: [\n        { code: 'Sample Item', label: 'Sample Item' },\n        { code: 'Sample Device', label: 'Sample Device' },\n        { code: 'Customer', label: 'Customer' },\n      ],\n      optionStatus: [\n        { code: 'Delivered', label: 'Delivered' },\n        { code: 'Not Delivered', label: 'Not Delivered' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Order Number\", field: \"txtOrderNumber\", filter: 'agTextColumnFilter', checkboxSelection: true,},\n      {headerName: \"Order Date\", field: \"datOrder\", filter: 'agTextColumnFilter',},\n      {headerName: \"Delivery Date\", field: \"datDelivery\", filter: 'agTextColumnFilter',},\n      {headerName: \"Order Type\", field: \"txtOrderType\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Sample Item', 'Sample Device', 'Customer']}},\n      {headerName: \"Charge Number\", field: \"txtChargeNumber\", filter: 'agTextColumnFilter',},\n      {headerName: \"Delivery Status\", field: \"txtDeliveryStatus\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Delivered', 'Not Delivered']}},\n      {headerName: \"Supplier\", field: \"idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false},\n    ],\n    this.defaultColDef = {\n      editable: true,\n      resizable: true,\n      sortable: true,\n      filter: true,\n      floatingFilter: true,\n    };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n  },\n  mounted() {\n    this.gridApi = this.gridOptions.api;\n    this.gridColumnApi = this.gridOptions.columnApi;\n\n    if (window.OrderColState)\n       this.gridOptions.columnApi.setColumnState(window.OrderColState);\n    else\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n  },\n  methods: {\n    saveState() {\n      window.OrderColState = this.gridOptions.columnApi.getColumnState();\n    },\n    restoreState() {\n      window.OrderColState = null;\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    async cellValueChanged(event) {     \n      let endpoint = `/api/order/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtOrderNumber: event.node.data.txtOrderNumber,\n          datOrder: event.node.data.datOrder,\n          datDelivery: event.node.data.datDelivery,\n          txtOrderType: event.node.data.txtOrderType,\n          txtChargeNumber: event.node.data.txtChargeNumber,\n          txtDeliveryStatus: event.node.data.txtDeliveryStatus,\n          // idSupplier: event.node.data.idSupplier,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    onGridReady(params) { \n    },\n    getOrder() {\n      if (!this.error) {\n        let endpoint = `/api/order-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orders.push(...data.results);\n            this.rowData = this.orders\n          })\n      }\n    },\n    getSup() {\n      if (!this.error) {\n        let endpoint = `/api/supplier/`;\n        apiService(endpoint)\n          .then(data => {\n            this.suppliers.push(...data.results);\n            this.optionSupplier = this.suppliers\n          })\n      }\n    },\n    getItem() {\n      if (!this.error) {\n        let endpoint = `/api/item/`;\n        apiService(endpoint)\n          .then(data => {\n            this.items.push(...data.results);\n            this.optionItems = this.items\n          })\n      }\n    },\n    getDevice() {\n      if (!this.error) {\n        let endpoint = `/api/device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.devices.push(...data.results);\n            this.optionDevices = this.devices\n          })\n      }\n    },\n    addOrder() {\n      let endpointOrder = `/api/order/`;\n      apiService(endpointOrder, \"POST\", { txtOrderNumber: this.ONumber, datOrder: this.DatOrder, datDelivery: this.DatDelivery, \n        txtOrderType: this.OType, txtChargeNumber: this.CNumber, txtDeliveryStatus: this.DelStatus, idSupplier: this.Supplier })\n        .then(response => {\n          if (this.OType == 'Sample Item' && response != 'ERROR') {\n            for (let i = 0; i < this.selectedItems.length; i++) {\n              const el = this.selectedItems[i];\n              let endpointItem = `/api/order-item/`;\n              apiService(endpointItem, \"POST\", { datOrder: this.DatOrder, datDelivery: null, numOrderAmount: parseInt(el.orderAmount), idItem: el.id, idOrder: response.id })\n            };\n            this.orders.unshift(response);\n            this.emptyInput();\n          } else if (this.OType == 'Sample Device' && response != 'ERROR') {\n            for (let i = 0; i < this.selectedDevices.length; i++) {\n              const el = this.selectedDevices[i];\n              let endpointDevice = `/api/order-device/`;\n              apiService(endpointDevice, \"POST\", { datOrder: this.DatOrder, datDelivery: null, numOrderAmount: el.orderAmount, idDevice: el.id, idOrder: response.id })\n            }\n            this.orders.unshift(response);\n            this.emptyInput();\n          } else {\n            this.error = true;\n          }})\n      if (this.error) {\n        this.error = false;\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Order?\", {\n          title: \"Please Confirm\",\n          size: \"sm\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteOrder();\n          }\n        })\n    },\n    async deleteOrder() {\n      var selectedRows = this.gridApi.getSelectedRows();\n      let endpoint = `/api/order/${selectedRows[0].id}/`;\n      try {\n        var index = this.orders.map(function(e) { return e.id; }).indexOf(selectedRows[0].id);\n        this.$delete(this.orders, index)\n        await apiService(endpoint, \"DELETE\")\n        this.show = this.show ? false : true\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    emptyInput() {\n      this.ONumber = '',\n      this.datOrder = [],\n      this.datDelivery = [],\n      this.OType = [],\n      this.CNumber = '',\n      this.DelStatus = [],\n      this.Supplier = '',\n\n      this.$root.$emit('bv::toggle::collapse', 'collapse-e')\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    customItemLabel({ txtArticlenumber, txtDescription, txtVersion }) {\n      return `${txtArticlenumber} || ${txtDescription} || v${txtVersion}`\n    },\n    customDeviceLabel({ idModel, txtSerialNumber, txtDevicePosition }) {\n      return `${idModel.txtModelName} || ${txtSerialNumber} || ${txtDevicePosition}`\n    },\n    getSelectedItemId(el) {\n      this.selectedItemsId = el.map(item => item.id)\n    },\n    getSelectedDeviceId(el) {\n      this.selectedDevicesId = el.map(device => device.id)\n    },\n  },\n  created() {\n    this.getSup();\n    this.getItem();\n    this.getOrder();\n    this.getDateToday();\n    this.getDevice();\n  },\n};\n",{"version":3,"sources":["order-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"order-list.vue","sourceRoot":"src/views/app/order","sourcesContent":["<template>\n  <!-- ============ Body content start ============= -->\n  <div class=\"main-content\">\n    <breadcumb :page=\"'List Orders'\" :folder=\"'Order'\" />\n    <b-row>\n      <!-- ICON BG -->\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card\n          class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\"\n        >\n          <i class=\"i-Add-Cart\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Orders</p>\n            <p class=\"inline text-primary text-24 line-height-1 mb-2\">{{ this.orders.length }}</p>\n          </div>\n        </b-card>\n      </b-col>\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card\n          class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\"\n        >\n          <i class=\"i-Calendar\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Date</p>\n            <p class=\"text-primary text-24 line-height-1 mb-2\"><nobr>{{ this.date }}</nobr></p>\n          </div>\n        </b-card>\n      </b-col>\n    </b-row>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0 mb-3\">\n            <b-row class=\"ml-3\">\n              <i class=\"nav-icon i-Add mt-3\" style=\"font-size: 20px\" v-b-toggle.collapse-e></i>\n              <h5 class=\"card-title border-bottom p-3 mb-2\">New Order</h5>\n            </b-row>\n            <b-collapse id=\"collapse-e\" class=\"mt-3\">\n              <div>\n                <!-- ORDER INPUT -->\n                <b-row class=\"mt-4 ml-3 mr-3\">\n                  <b-col md=\"12\">\n                    <v-select  id=\"select-1\" v-model=\"OType\" :options=\"optionType\" required placeholder=\"Choose Order Type\" :reduce=\"OType => OType.code\"></v-select>\n                  </b-col>\n                </b-row>\n                <b-row class=\"mt-3 ml-3 mr-3\" v-if=\"OType == 'Customer'\">\n                  <b-col md=\"12\">\n                    <b-form-input id=\"input-1\" v-model=\"CNumber\" type=\"text\" placeholder=\"Charge Number\" ></b-form-input>\n                  </b-col>\n                </b-row>\n                <b-row class=\"mt-3 ml-3 mr-3\">\n                  <b-col md=\"4\">\n                    <b-form-input id=\"input-2\" v-model=\"ONumber\" type=\"text\" required placeholder=\"Order Number\" ></b-form-input>\n                  </b-col>\n                  <b-col md=\"4\">\n                    <b-form-datepicker  id=\"date-1\" v-model=\"DatOrder\" type=\"text\" placeholder=\"Order Date\" ></b-form-datepicker >\n                  </b-col>\n                  <b-col md=\"4\">\n                    <b-form-datepicker  id=\"date-2\" v-model=\"DatDelivery\" type=\"text\" placeholder=\"Delivery Date\" ></b-form-datepicker >\n                  </b-col>\n                </b-row>\n                <b-row class=\"mt-3 ml-3 mr-3 mb-4\">\n                  <b-col md=\"6\">\n                    <v-select  id=\"select-3\" v-model=\"Supplier\" :options=\"optionSupplier\" label=\"txtSupplierName\" required placeholder=\"Choose Supplier\" :reduce=\"Supplier => Supplier.id\"></v-select>\n                  </b-col>\n                  <b-col md=\"6\">\n                    <v-select  id=\"select-2\" v-model=\"DelStatus\" :options=\"optionStatus\" required placeholder=\"Choose Delivery Status\" :reduce=\"DelStatus => DelStatus.code\"></v-select>\n                  </b-col>\n                </b-row>\n                <!-- ITEMS -->\n                <b-row class=\"mt-4 ml-3 mr-3 border-top\" v-if=\"OType == 'Sample Item'\">\n                  <b-col md=\"12\">\n                    <h5 class=\"typo__label mt-4 mb-3\">Items of Order</h5>\n                    <multiselect\n                        v-model=\"selectedItems\" tag-placeholder=\"Choose Items\" placeholder=\"Search or add a item\" label=\"txtDescription\" \n                        track-by=\"id\" :options=\"optionItems\" :multiple=\"true\" :taggable=\"true\" :close-on-select=\"false\"\n                        :searchable=\"true\" open-direction=\"bottom\" :custom-label=\"customItemLabel\">\n                    </multiselect>\n                    <b-row v-for=\"item in selectedItems\" :key=\"item.id\">\n                      <b-input-group class=\"mt-3 ml-3 mr-3\">\n                        <template v-slot:prepend>\n                          <b-input-group-text style=\"font-weight: 800;\">{{ item.txtArticlenumber + ' - ' + item.txtDescription }}</b-input-group-text>\n                        </template>\n                        <b-form-input v-model=\"item.orderAmount\" type=\"number\" min=0 ></b-form-input>\n                      </b-input-group>\n                    </b-row>\n                  </b-col>\n                </b-row>\n                <!-- DEVICES -->\n                <b-row class=\"mt-4 ml-3 mr-3 border-top\" v-if=\"OType == 'Sample Device'\">\n                  <b-col md=\"12\">\n                    <h5 class=\"typo__label mt-4 mb-3\">Devices of Order</h5>\n                    <multiselect\n                        v-model=\"selectedDevices\" tag-placeholder=\"Choose Devices\" placeholder=\"Search or add a device\" label=\"txtSerialNumber\" \n                        track-by=\"id\" :options=\"optionDevices\" :multiple=\"true\" :taggable=\"true\" :close-on-select=\"false\"\n                        :searchable=\"true\" open-direction=\"bottom\" :custom-label=\"customDeviceLabel\">\n                    </multiselect>\n                    <b-row v-for=\"device in selectedDevices\" :key=\"device.id\">\n                      <b-input-group class=\"mt-3 ml-3 mr-3\">\n                        <template v-slot:prepend>\n                          <b-input-group-text style=\"font-weight: 800;\">{{ device.txtModelName + ' - ' + device.txtSerialNumber }}</b-input-group-text>\n                        </template>\n                        <b-form-input v-model=\"device.orderAmount\" type=\"number\" min=0 ></b-form-input>\n                      </b-input-group>\n                    </b-row>\n                  </b-col>\n                </b-row>\n                <!-- CUSTOMER -->\n                <b-row class=\"mt-4 ml-3 mr-3 border-top\" v-if=\"OType == 'Customer'\">\n                  <b-col md=\"12\">\n                    <h1 class=\"mt-4 mb-3\">NOT IMPLEMENTED YET</h1>\n                  </b-col>\n                </b-row>\n                <!-- BUTTONS -->\n                <b-row class=\"mt-5 ml-3 mr-3\">\n                  <b-col md=\"6\">\n                    <b-button @click=\"emptyInput\" block variant=\"outline-primary\">Delete Input</b-button>\n                  </b-col>\n                  <b-col md=\"6\">\n                    <b-button @click=\"addOrder\" block variant=\"primary\">Add Order</b-button>\n                  </b-col>\n                </b-row>\n                <b-row class=\"ml-3 mr-3\">\n                  <b-col md=\"12\" class=\"mt-3\">\n                    <b-alert v-if=\"error\" show variant=\"alert alert-card alert-danger\" dismissible>\n                      <strong class=\"text-capitalize\">Error!</strong> The Input is not valid.\n                    </b-alert>\n                  </b-col>\n                </b-row>\n              </div>\n            </b-collapse>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0\">\n            <AgGridVue class=\"ag-theme-alpine\"\n                id=\"gridOrders\"\n                :defaultColDef=\"defaultColDef\"\n                :columnDefs=\"columnDefs\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData\"\n                :gridOptions=\"gridOptions\"\n                :suppressRowClickSelection=\"true\"\n                :excelStyles=\"excelStyles\"\n                @grid-ready=\"onGridReady\"\n                @cellValueChanged=\"cellValueChanged\"\n                @row-selected=\"onRowSelected\"\n                :masterDetail=\"true\"\n                :detailCellRendererParams=\"detailCellRendererParams\"\n                :pagination=\"true\"\n                :paginationPageSize=\"paginationPageSize\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n            <div class=\"ml-3 mr-3 mt-2 mb-2 text-right\">\n                Page Size:\n                <select v-on:change=\"onPageSizeChanged()\" id=\"page-size\">\n                    <option value=\"10\" selected=\"\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                </select>\n                <b-button v-on:click=\"onBtExport()\" class=\"ml-3\" size=\"sm\">Export Excel</b-button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <b-collapse v-model=\"show\" class=\"ml-1 mr-3\">\n      <b-button @click=\"openModal\" variant=\"primary\">Delete Item</b-button>\n    </b-collapse>\n    <b-row class=\"ml-1 mr-3 mb-4\">\n      <b-button class=\"mr-3\" @click=\"saveState\" variant=\"primary\">Save Grid State</b-button>\n      <b-button @click=\"restoreState\" variant=\"outline-primary\">Reset Grid State</b-button>\n    </b-row>\n  </div>\n  <!-- ============ Body content End ============= -->\n</template>\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Orders\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      columnDefsMod: null,\n      rowData: null,\n      rowDataMod: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: AllModules,\n      // VUE VARIABLES\n      suppliers: [],\n      items: [],\n      devices: [],\n      orders: [],\n      show: false,\n      visible: false,\n      name: '',\n      ONumber: '',\n      DatOrder: '',\n      DatDelivery: null,\n      OType: '',\n      CNumber: null,\n      DelStatus: '',\n      Supplier: '',\n      selectedItems: '',\n      selectedItemsId: '',\n      selectedDevices: '',\n      selectedDevicesId: '',\n      date: null,\n      next: null,\n      error: false,\n      optionSupplier: [],\n      optionItems: [],\n      optionDevices: [],\n      optionType: [\n        { code: 'Sample Item', label: 'Sample Item' },\n        { code: 'Sample Device', label: 'Sample Device' },\n        { code: 'Customer', label: 'Customer' },\n      ],\n      optionStatus: [\n        { code: 'Delivered', label: 'Delivered' },\n        { code: 'Not Delivered', label: 'Not Delivered' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Order Number\", field: \"txtOrderNumber\", filter: 'agTextColumnFilter', checkboxSelection: true,},\n      {headerName: \"Order Date\", field: \"datOrder\", filter: 'agTextColumnFilter',},\n      {headerName: \"Delivery Date\", field: \"datDelivery\", filter: 'agTextColumnFilter',},\n      {headerName: \"Order Type\", field: \"txtOrderType\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Sample Item', 'Sample Device', 'Customer']}},\n      {headerName: \"Charge Number\", field: \"txtChargeNumber\", filter: 'agTextColumnFilter',},\n      {headerName: \"Delivery Status\", field: \"txtDeliveryStatus\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Delivered', 'Not Delivered']}},\n      {headerName: \"Supplier\", field: \"idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false},\n    ],\n    this.defaultColDef = {\n      editable: true,\n      resizable: true,\n      sortable: true,\n      filter: true,\n      floatingFilter: true,\n    };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n  },\n  mounted() {\n    this.gridApi = this.gridOptions.api;\n    this.gridColumnApi = this.gridOptions.columnApi;\n\n    if (window.OrderColState)\n       this.gridOptions.columnApi.setColumnState(window.OrderColState);\n    else\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n  },\n  methods: {\n    saveState() {\n      window.OrderColState = this.gridOptions.columnApi.getColumnState();\n    },\n    restoreState() {\n      window.OrderColState = null;\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    async cellValueChanged(event) {     \n      let endpoint = `/api/order/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtOrderNumber: event.node.data.txtOrderNumber,\n          datOrder: event.node.data.datOrder,\n          datDelivery: event.node.data.datDelivery,\n          txtOrderType: event.node.data.txtOrderType,\n          txtChargeNumber: event.node.data.txtChargeNumber,\n          txtDeliveryStatus: event.node.data.txtDeliveryStatus,\n          // idSupplier: event.node.data.idSupplier,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    onGridReady(params) { \n    },\n    getOrder() {\n      if (!this.error) {\n        let endpoint = `/api/order-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.orders.push(...data.results);\n            this.rowData = this.orders\n          })\n      }\n    },\n    getSup() {\n      if (!this.error) {\n        let endpoint = `/api/supplier/`;\n        apiService(endpoint)\n          .then(data => {\n            this.suppliers.push(...data.results);\n            this.optionSupplier = this.suppliers\n          })\n      }\n    },\n    getItem() {\n      if (!this.error) {\n        let endpoint = `/api/item/`;\n        apiService(endpoint)\n          .then(data => {\n            this.items.push(...data.results);\n            this.optionItems = this.items\n          })\n      }\n    },\n    getDevice() {\n      if (!this.error) {\n        let endpoint = `/api/device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.devices.push(...data.results);\n            this.optionDevices = this.devices\n          })\n      }\n    },\n    addOrder() {\n      let endpointOrder = `/api/order/`;\n      apiService(endpointOrder, \"POST\", { txtOrderNumber: this.ONumber, datOrder: this.DatOrder, datDelivery: this.DatDelivery, \n        txtOrderType: this.OType, txtChargeNumber: this.CNumber, txtDeliveryStatus: this.DelStatus, idSupplier: this.Supplier })\n        .then(response => {\n          if (this.OType == 'Sample Item' && response != 'ERROR') {\n            for (let i = 0; i < this.selectedItems.length; i++) {\n              const el = this.selectedItems[i];\n              let endpointItem = `/api/order-item/`;\n              apiService(endpointItem, \"POST\", { datOrder: this.DatOrder, datDelivery: null, numOrderAmount: parseInt(el.orderAmount), idItem: el.id, idOrder: response.id })\n            };\n            this.orders.unshift(response);\n            this.emptyInput();\n          } else if (this.OType == 'Sample Device' && response != 'ERROR') {\n            for (let i = 0; i < this.selectedDevices.length; i++) {\n              const el = this.selectedDevices[i];\n              let endpointDevice = `/api/order-device/`;\n              apiService(endpointDevice, \"POST\", { datOrder: this.DatOrder, datDelivery: null, numOrderAmount: el.orderAmount, idDevice: el.id, idOrder: response.id })\n            }\n            this.orders.unshift(response);\n            this.emptyInput();\n          } else {\n            this.error = true;\n          }})\n      if (this.error) {\n        this.error = false;\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Order?\", {\n          title: \"Please Confirm\",\n          size: \"sm\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteOrder();\n          }\n        })\n    },\n    async deleteOrder() {\n      var selectedRows = this.gridApi.getSelectedRows();\n      let endpoint = `/api/order/${selectedRows[0].id}/`;\n      try {\n        var index = this.orders.map(function(e) { return e.id; }).indexOf(selectedRows[0].id);\n        this.$delete(this.orders, index)\n        await apiService(endpoint, \"DELETE\")\n        this.show = this.show ? false : true\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    emptyInput() {\n      this.ONumber = '',\n      this.datOrder = [],\n      this.datDelivery = [],\n      this.OType = [],\n      this.CNumber = '',\n      this.DelStatus = [],\n      this.Supplier = '',\n\n      this.$root.$emit('bv::toggle::collapse', 'collapse-e')\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    customItemLabel({ txtArticlenumber, txtDescription, txtVersion }) {\n      return `${txtArticlenumber} || ${txtDescription} || v${txtVersion}`\n    },\n    customDeviceLabel({ idModel, txtSerialNumber, txtDevicePosition }) {\n      return `${idModel.txtModelName} || ${txtSerialNumber} || ${txtDevicePosition}`\n    },\n    getSelectedItemId(el) {\n      this.selectedItemsId = el.map(item => item.id)\n    },\n    getSelectedDeviceId(el) {\n      this.selectedDevicesId = el.map(device => device.id)\n    },\n  },\n  created() {\n    this.getSup();\n    this.getItem();\n    this.getOrder();\n    this.getDateToday();\n    this.getDevice();\n  },\n};\n</script>\n<style>\n  i:focus,\n  input:focus,\n  select:focus,\n  textarea:focus,\n  button:focus {\n      outline: none;\n  }\n  .multiselect__input, .multiselect__placeholder, .multiselect__option, .multiselect__tags {\n    font-size: 14px!important;\n  }\n\n</style>\n"]}]}