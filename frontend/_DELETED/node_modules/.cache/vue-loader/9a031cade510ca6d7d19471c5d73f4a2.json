{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\item\\item-attributes.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\item\\item-attributes.vue","mtime":1598333998410},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\";\nimport { RichSelectModule } from '@ag-grid-enterprise/rich-select';\nimport { MenuModule } from '@ag-grid-enterprise/menu';\nimport { ColumnsToolPanelModule } from '@ag-grid-enterprise/column-tool-panel';\nimport { SetFilterModule } from '@ag-grid-enterprise/set-filter';\nimport { AllCommunityModules } from '@ag-grid-community/all-modules';\nimport { MasterDetailModule } from '@ag-grid-enterprise/master-detail';\n\nexport default {\n  metaInfo: {    \n    title: \"Item Attributes\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      columnDefsMod: null,\n      rowData: null,\n      rowDataMod: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: [\n        ClientSideRowModelModule,\n        SetFilterModule,\n        RichSelectModule,\n        MenuModule,\n        ColumnsToolPanelModule,\n        MasterDetailModule,\n      ],\n      attributes: [],\n      show: false,\n      visible: false,\n      idItem: '',\n      KeyAtt: '',\n      NameAtt: '',\n      ValueDef: '',\n      ValueType: '',\n      MeasureUnit: '',\n      ValueMin: '',\n      ValueMax: '',\n      ValueTol: '',\n      date: null,\n      next: null,\n      error: false,\n      optionsTypes: [\n        { value: 'INTEGER', text: 'Number' },\n        { value: 'FLOAT', text: 'Decimal' },\n        { value: 'STRING', text: 'Text' },\n        { value: 'BOOLEAN', text: 'True/False' },\n      ],\n      optionsItemTypes: [\n        { value: 'Glass', text: 'Glass' },\n        { value: 'Case', text: 'Case' },\n        { value: 'Frame', text: 'Frame' },\n      ],\n      optionsUnits: [\n        { value: 'µm', text: 'Mymetre' },\n        { value: 'mm', text: 'Millimetre' },\n        { value: 'cm', text: 'Centimetre' },\n        { value: 'mg', text: 'Milligram' },\n        { value: 'g', text: 'Gram' },\n        { value: 'ml', text: 'Millilitre' },\n        { value: 'in', text: 'Inch' },\n        { value: 'oz', text: 'Ounce' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Item Type\", field: \"txtItemType\", filter: 'agTextColumnFilter', checkboxSelection: true, \n        cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: [{ code: 'INTEGER', name: 'Number' }, { code: 'FLOAT', name: 'Decimal' },]}},\n      {headerName: \"Key Attribute\", field: \"txtKeyAttribute\", filter: 'agTextColumnFilter',},\n      {headerName: \"Name Attribute\", field: \"txtNameAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Default\", field: \"txtValueDefault\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Type\", field: \"txtValueType\", filter: 'agTextColumnFilter', \n        cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Glass', 'Case', 'Frame']}},\n      {headerName: \"Measure Unit\", field: \"txtMeasureUnit\", filter: 'agTextColumnFilter', \n        cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['µm', 'mm', 'cm', 'mg', 'g', 'ml', 'in', 'oz']}},\n      {headerName: \"Value Min\", field: \"txtValueMin\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Max\", field: \"txtValueMax\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Tolerance\", field: \"txtValueTolerance\", filter: 'agTextColumnFilter', },\n    ],\n    this.defaultColDef = {\n      flex: 1,\n      editable: true,\n      resizable: true,\n      sortable: true,\n      filter: true,\n      floatingFilter: true,\n    };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n  },\n  mounted() {\n    this.gridApi = this.gridOptions.api;\n    this.gridColumnApi = this.gridOptions.columnApi;\n  },\n  methods: {\n    autoSizeAll(skipHeader) {\n      var allColumnIds = [];\n      this.gridColumnApi.getAllColumns().forEach(function(column) {\n        allColumnIds.push(column.colId);\n      });\n      this.gridColumnApi.autoSizeColumns(allColumnIds, skipHeader);\n    },\n    async cellValueChanged(event) {     \n      let endpoint = `/api/item-attribute/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtKeyAttribute: event.node.data.txtKeyAttribute,\n          txtNameAttribute: event.node.data.txtNameAttribute,\n          txtValueDefault: event.node.data.txtValueDefault,\n          txtValueType: event.node.data.txtValueType,\n          txtMeasureUnit: event.node.data.txtMeasureUnit,\n          idItem: event.node.data.idItem,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    onGridReady(params) { \n      // this.autoSizeAll(false);\n    },\n    getAtt() {\n      if (!this.error) {\n        let endpoint = `/api/item-attribute/`;\n        apiService(endpoint)\n          .then(data => {\n            this.attributes.push(...data.results);\n            this.rowData = this.attributes\n          })\n      }\n    },\n    addAtt() {\n      if (this.idItem) {\n        let endpoint = `/api/item-attribute/`;\n        apiService(endpoint, \"POST\", { \n          txtKeyAttribute: this.KeyAtt,\n          txtNameAttribute: this.NameAtt,\n          txtValueDefault: this.ValueDef,\n          txtValueType: this.ValueType,\n          txtMeasureUnit: this.MeasureUnit,\n          idItem: this.idItem,\n          })\n          .then(data => {\n            if (data != 'ERROR'){\n              this.attributes.unshift(data)\n            } else {\n              this.error = true;\n              \n            }\n          })\n        this.emptyInput();\n        if (this.error) {\n          this.error = false;\n        }\n        } else {\n          this.error = true;\n        }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Attribute?\", {\n          title: \"Please Confirm\",\n          size: \"sm\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteAttribute();\n          }\n        })\n    },\n    async deleteAttribute() {\n      var selectedRows = this.gridApi.getSelectedRows();\n      let endpoint = `/api/item-attribute/${selectedRows[0].id}/`;\n      try {\n        var index = this.attributes.map(function(e) { return e.id; }).indexOf(selectedRows[0].id);\n        this.$delete(this.attributes, index)\n        await apiService(endpoint, \"DELETE\")\n        this.show = this.show ? false : true\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    emptyInput() {\n      this.idItem = [],\n      this.KeyAtt = '',\n      this.NameAtt = '',\n      this.ValueType = [],\n      this.ValueDef = '',\n      this.MeasureUnit = [],\n\n      this.$root.$emit('bv::toggle::collapse', 'collapse-e')\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n  },\n  created() {\n    this.getAtt();\n    this.getDateToday();\n  },\n};\n",{"version":3,"sources":["item-attributes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"item-attributes.vue","sourceRoot":"src/views/app/item","sourcesContent":["<template>\n  <!-- ============ Body content start ============= -->\n  <div class=\"main-content\">\n    <breadcumb :page=\"'Item Attributes'\" :folder=\"'Item'\" />\n    <b-row>\n      <!-- ICON BG -->\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card\n          class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\"\n        >\n          <i class=\"i-Atom\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Attributes</p>\n            <p class=\"inline text-primary text-24 line-height-1 mb-2\">{{ this.attributes.length }}</p>\n          </div>\n        </b-card>\n      </b-col>\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card\n          class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\"\n        >\n          <i class=\"i-Calendar\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Date</p>\n            <p class=\"text-primary text-24 line-height-1 mb-2\"><nobr>{{ this.date }}</nobr></p>\n          </div>\n        </b-card>\n      </b-col>\n    </b-row>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0 mb-3\">\n            <b-row class=\"ml-3\">\n              <i class=\"nav-icon i-Add mt-3\" style=\"font-size: 20px\" v-b-toggle.collapse-e></i>\n              <h5 class=\"card-title border-bottom p-3 mb-2\">New Item Attribute</h5>\n            </b-row>\n            <b-collapse id=\"collapse-e\" class=\"mt-3\">\n              <b-form>\n                <b-row class=\"ml-3 mr-3 mt-3\">\n                  <b-col md=\"4\">\n                    <b-form-select  id=\"select-1\" v-model=\"idItem\" :options=\"optionsItemTypes\" required ></b-form-select>\n                  </b-col>\n                  <b-col md=\"4\">\n                    <b-form-input id=\"input-1\" v-model=\"KeyAtt\" type=\"text\" required placeholder=\"Key Attribute\" ></b-form-input>\n                  </b-col>\n                  <b-col md=\"4\">\n                    <b-form-input id=\"input-2\" v-model=\"NameAtt\" type=\"text\" required placeholder=\"Name Attribute\" ></b-form-input>\n                  </b-col>\n                </b-row>\n                <b-row class=\"ml-3 mr-3 mt-3\">\n                  <b-col md=\"4\">\n                    <b-form-input id=\"input-3\" v-model=\"ValueDef\" type=\"text\" required placeholder=\"Value Default\" ></b-form-input>\n                  </b-col>\n                  <b-col md=\"4\">\n                    <b-form-select  id=\"select-2\" v-model=\"ValueType\" :options=\"optionsTypes\" required ></b-form-select>\n                  </b-col>\n                  <b-col md=\"4\">\n                    <b-form-select  id=\"select-3\" v-model=\"MeasureUnit\" :options=\"optionsUnits\" required ></b-form-select>\n                  </b-col>\n                </b-row>\n                <b-row class=\"ml-3 mr-3 mt-3\">\n                  <b-col md=\"6\">\n                    <b-button @click=\"emptyInput\" block variant=\"outline-primary\">Delete Input</b-button>\n                  </b-col>\n                  <b-col md=\"6\">\n                    <b-button @click=\"addAtt\" block variant=\"primary\">Add Attribute</b-button>\n                  </b-col>\n                </b-row>\n                <b-row class=\"ml-3 mr-3\">\n                  <b-col md=\"12\" class=\"mt-3\">\n                    <b-alert v-if=\"error\" show variant=\"alert alert-card alert-danger\" dismissible>\n                      <strong class=\"text-capitalize\">Error!</strong> The Input is not valid.\n                    </b-alert>\n                  </b-col>\n                </b-row>\n              </b-form>\n            </b-collapse>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0\">\n            <AgGridVue class=\"ag-theme-alpine\"\n                id=\"gridAttributes\"\n                :defaultColDef=\"defaultColDef\"\n                :columnDefs=\"columnDefs\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData\"\n                :gridOptions=\"gridOptions\"\n                :suppressRowClickSelection=\"true\"\n                @grid-ready=\"onGridReady\"\n                @cellValueChanged=\"cellValueChanged\"\n                @row-selected=\"onRowSelected\"\n                :masterDetail=\"true\"\n                :detailCellRendererParams=\"detailCellRendererParams\"\n                :pagination=\"true\"\n                :paginationPageSize=\"10\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n          </div>\n        </div>\n      </div>\n    </div>\n    <b-collapse v-model=\"show\" class=\"ml-1 mr-3\">\n      <b-button @click=\"openModal\" variant=\"primary\">Delete Attribute</b-button>\n    </b-collapse>\n  </div>\n  <!-- ============ Body content End ============= -->\n</template>\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\";\nimport { RichSelectModule } from '@ag-grid-enterprise/rich-select';\nimport { MenuModule } from '@ag-grid-enterprise/menu';\nimport { ColumnsToolPanelModule } from '@ag-grid-enterprise/column-tool-panel';\nimport { SetFilterModule } from '@ag-grid-enterprise/set-filter';\nimport { AllCommunityModules } from '@ag-grid-community/all-modules';\nimport { MasterDetailModule } from '@ag-grid-enterprise/master-detail';\n\nexport default {\n  metaInfo: {    \n    title: \"Item Attributes\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      columnDefsMod: null,\n      rowData: null,\n      rowDataMod: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      modules: [\n        ClientSideRowModelModule,\n        SetFilterModule,\n        RichSelectModule,\n        MenuModule,\n        ColumnsToolPanelModule,\n        MasterDetailModule,\n      ],\n      attributes: [],\n      show: false,\n      visible: false,\n      idItem: '',\n      KeyAtt: '',\n      NameAtt: '',\n      ValueDef: '',\n      ValueType: '',\n      MeasureUnit: '',\n      ValueMin: '',\n      ValueMax: '',\n      ValueTol: '',\n      date: null,\n      next: null,\n      error: false,\n      optionsTypes: [\n        { value: 'INTEGER', text: 'Number' },\n        { value: 'FLOAT', text: 'Decimal' },\n        { value: 'STRING', text: 'Text' },\n        { value: 'BOOLEAN', text: 'True/False' },\n      ],\n      optionsItemTypes: [\n        { value: 'Glass', text: 'Glass' },\n        { value: 'Case', text: 'Case' },\n        { value: 'Frame', text: 'Frame' },\n      ],\n      optionsUnits: [\n        { value: 'µm', text: 'Mymetre' },\n        { value: 'mm', text: 'Millimetre' },\n        { value: 'cm', text: 'Centimetre' },\n        { value: 'mg', text: 'Milligram' },\n        { value: 'g', text: 'Gram' },\n        { value: 'ml', text: 'Millilitre' },\n        { value: 'in', text: 'Inch' },\n        { value: 'oz', text: 'Ounce' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Item Type\", field: \"txtItemType\", filter: 'agTextColumnFilter', checkboxSelection: true, \n        cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: [{ code: 'INTEGER', name: 'Number' }, { code: 'FLOAT', name: 'Decimal' },]}},\n      {headerName: \"Key Attribute\", field: \"txtKeyAttribute\", filter: 'agTextColumnFilter',},\n      {headerName: \"Name Attribute\", field: \"txtNameAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Default\", field: \"txtValueDefault\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Type\", field: \"txtValueType\", filter: 'agTextColumnFilter', \n        cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Glass', 'Case', 'Frame']}},\n      {headerName: \"Measure Unit\", field: \"txtMeasureUnit\", filter: 'agTextColumnFilter', \n        cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['µm', 'mm', 'cm', 'mg', 'g', 'ml', 'in', 'oz']}},\n      {headerName: \"Value Min\", field: \"txtValueMin\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Max\", field: \"txtValueMax\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Tolerance\", field: \"txtValueTolerance\", filter: 'agTextColumnFilter', },\n    ],\n    this.defaultColDef = {\n      flex: 1,\n      editable: true,\n      resizable: true,\n      sortable: true,\n      filter: true,\n      floatingFilter: true,\n    };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n  },\n  mounted() {\n    this.gridApi = this.gridOptions.api;\n    this.gridColumnApi = this.gridOptions.columnApi;\n  },\n  methods: {\n    autoSizeAll(skipHeader) {\n      var allColumnIds = [];\n      this.gridColumnApi.getAllColumns().forEach(function(column) {\n        allColumnIds.push(column.colId);\n      });\n      this.gridColumnApi.autoSizeColumns(allColumnIds, skipHeader);\n    },\n    async cellValueChanged(event) {     \n      let endpoint = `/api/item-attribute/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtKeyAttribute: event.node.data.txtKeyAttribute,\n          txtNameAttribute: event.node.data.txtNameAttribute,\n          txtValueDefault: event.node.data.txtValueDefault,\n          txtValueType: event.node.data.txtValueType,\n          txtMeasureUnit: event.node.data.txtMeasureUnit,\n          idItem: event.node.data.idItem,\n        })\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    onGridReady(params) { \n      // this.autoSizeAll(false);\n    },\n    getAtt() {\n      if (!this.error) {\n        let endpoint = `/api/item-attribute/`;\n        apiService(endpoint)\n          .then(data => {\n            this.attributes.push(...data.results);\n            this.rowData = this.attributes\n          })\n      }\n    },\n    addAtt() {\n      if (this.idItem) {\n        let endpoint = `/api/item-attribute/`;\n        apiService(endpoint, \"POST\", { \n          txtKeyAttribute: this.KeyAtt,\n          txtNameAttribute: this.NameAtt,\n          txtValueDefault: this.ValueDef,\n          txtValueType: this.ValueType,\n          txtMeasureUnit: this.MeasureUnit,\n          idItem: this.idItem,\n          })\n          .then(data => {\n            if (data != 'ERROR'){\n              this.attributes.unshift(data)\n            } else {\n              this.error = true;\n              \n            }\n          })\n        this.emptyInput();\n        if (this.error) {\n          this.error = false;\n        }\n        } else {\n          this.error = true;\n        }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Attribute?\", {\n          title: \"Please Confirm\",\n          size: \"sm\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteAttribute();\n          }\n        })\n    },\n    async deleteAttribute() {\n      var selectedRows = this.gridApi.getSelectedRows();\n      let endpoint = `/api/item-attribute/${selectedRows[0].id}/`;\n      try {\n        var index = this.attributes.map(function(e) { return e.id; }).indexOf(selectedRows[0].id);\n        this.$delete(this.attributes, index)\n        await apiService(endpoint, \"DELETE\")\n        this.show = this.show ? false : true\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    emptyInput() {\n      this.idItem = [],\n      this.KeyAtt = '',\n      this.NameAtt = '',\n      this.ValueType = [],\n      this.ValueDef = '',\n      this.MeasureUnit = [],\n\n      this.$root.$emit('bv::toggle::collapse', 'collapse-e')\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n  },\n  created() {\n    this.getAtt();\n    this.getDateToday();\n  },\n};\n</script>\n<style>\n  i:focus,\n  input:focus,\n  select:focus,\n  textarea:focus,\n  button:focus {\n      outline: none;\n  }\n</style>\n"]}]}