{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\apps\\scrumboard\\editScrumBoard.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\apps\\scrumboard\\editScrumBoard.vue","mtime":1575914052000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"C:/Users/Anwender/SJO/evi/evi/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport draggable from \"vuedraggable\";\nimport { mapGetters, mapActions } from \"vuex\";\nexport default {\n  name: \"two-lists\",\n  display: \"Two Lists\",\n  order: 1,\n  components: {\n    draggable: draggable\n  },\n  data: function data() {\n    return {\n      boardTitle: 'untitle',\n      addBoard: {\n        title: \"\",\n        cardList: \"\",\n        comment: \"\"\n      },\n      selectedListId: null,\n      enabled: true,\n      isShow: true,\n      isCard: false,\n      drag: false,\n      projectList: \"\"\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"getBoardList\", \"getEditBoardList\", \"getEditCardList\", \"getList\"])), {}, {\n    dragOptions: function dragOptions() {\n      return {\n        animation: 200,\n        group: \"description\",\n        disabled: false\n      };\n    }\n  }),\n  methods: _objectSpread(_objectSpread({}, mapActions([\"editCardList\", \"addList\", \"addCard\", \"addComment\", \"updateCardList\", \"updateBoard\"])), {}, {\n    onSubmit: function onSubmit(data) {\n      console.log(\"testing\");\n      this.updateCardList(data);\n    },\n    toggleCard: function toggleCard(data) {\n      this.selectedListId = data;\n    },\n    addProjectList: function addProjectList() {},\n    editCardListPage: function editCardListPage(data) {\n      this.editCardList(data);\n    },\n    back: function back() {\n      this.$router.push('/app/apps/scrumboard');\n    }\n  })\n};",{"version":3,"sources":["editScrumBoard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuLA,OAAA,SAAA,MAAA,cAAA;AACA,SAAA,UAAA,EAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,OAAA,EAAA,WAFA;AAIA,EAAA,KAAA,EAAA,CAJA;AAKA,EAAA,UAAA,EAAA;AACA,IAAA,SAAA,EAAA;AADA,GALA;AASA,EAAA,IATA,kBASA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,SADA;AAEA,MAAA,QAAA,EAAA;AACA,QAAA,KAAA,EAAA,EADA;AAEA,QAAA,QAAA,EAAA,EAFA;AAGA,QAAA,OAAA,EAAA;AAHA,OAFA;AAOA,MAAA,cAAA,EAAA,IAPA;AAQA,MAAA,OAAA,EAAA,IARA;AASA,MAAA,MAAA,EAAA,IATA;AAUA,MAAA,MAAA,EAAA,KAVA;AAWA,MAAA,IAAA,EAAA,KAXA;AAYA,MAAA,WAAA,EAAA;AAZA,KAAA;AAcA,GAxBA;AAyBA,EAAA,QAAA,kCACA,UAAA,CAAA,CAAA,cAAA,EAAA,kBAAA,EAAA,iBAAA,EAAA,SAAA,CAAA,CADA;AAEA,IAAA,WAFA,yBAEA;AACA,aAAA;AACA,QAAA,SAAA,EAAA,GADA;AAEA,QAAA,KAAA,EAAA,aAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OAAA;AAKA;AARA,IAzBA;AAmCA,EAAA,OAAA,kCACA,UAAA,CAAA,CAAA,cAAA,EAAA,SAAA,EAAA,SAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,aAAA,CAAA,CADA;AAEA,IAAA,QAFA,oBAEA,IAFA,EAEA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,SAAA;AACA,WAAA,cAAA,CAAA,IAAA;AACA,KALA;AAMA,IAAA,UANA,sBAMA,IANA,EAMA;AACA,WAAA,cAAA,GAAA,IAAA;AACA,KARA;AASA,IAAA,cATA,4BASA,CAAA,CATA;AAUA,IAAA,gBAVA,4BAUA,IAVA,EAUA;AACA,WAAA,YAAA,CAAA,IAAA;AACA,KAZA;AAaA,IAAA,IAbA,kBAaA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA,sBAAA;AACA;AAfA;AAnCA,CAAA","sourcesContent":["<template>\n  <div>\n    <breadcumb :page=\"'Add Board'\" :folder=\"'Apps'\" />\n\n    \n      <div class=\"mb-30\">\n        <b-card>\n          <div class=\"d-flex justify-content-between align-items-center\">\n            <b-button @click=\"back\" variant=\"outline-primary\" size=\"sm\">Back</b-button>\n            \n            <p class=\"m-0 card-title\">{{ getEditBoardList.title }}</p>\n            <b-button variant=\"outline-danger\" size=\"sm\">Delete </b-button>\n          </div>\n        </b-card>\n      </div>\n   \n  \n    <div class=\"editScrumBoardContainer d-flex mb-30\">\n       \n        <!-- <b-col md=\"12\">\n        <pre>\n          {{ getEdit }}\n        </pre>\n        </b-col> -->\n        <div \n          class=\"col-md-3 ul-board-item\" \n          v-for=\"(div, key) in getEditBoardList.list\" :key=\"key\">\n           \n          <b-card :title=\"div.title\">\n            \n            <draggable\n              class=\"list-group\"\n              group=\"people\"\n              v-bind=\"dragOptions\"\n              @start=\"drag = true\"\n              @end=\"drag = false\"\n            >\n              <transition-group type=\"transition\" :name=\"!drag ? 'flip-list' : null\">\n                <!-- <div class v-for=\"(element, index) in list1\" :key=\"element.name\"> -->\n                <div v-for=\"list in div.cardList\" :key=\"list.id\">\n                  <b-card\n                    class=\"mb-30 cursor-pointer\"\n                    :img-src=\"list.coverImage\"\n                    img-top\n                    v-b-modal.modal-center\n                    @click=\"editCardListPage(list)\"\n                  >\n                    <b-card-text>{{ list.title }}</b-card-text>\n                    <template v-slot:footer>\n                      <small class=\"text-muted\"></small>\n                    </template>\n                  </b-card>\n                </div>\n                <!-- </div> -->\n              </transition-group>\n            </draggable>\n\n            <!-- toggleCard  -->\n            <template v-slot:footer>\n              <b-button\n                @click=\"toggleCard(key)\"\n                v-if=\"selectedListId != key\"\n                block\n                variant=\"primary\"\n              >Add Card</b-button>\n              <b-input-group v-else-if=\"selectedListId === key\" class=\"mt-3\">\n                <b-input-group-append>\n                  <b-button\n                    :disabled=\"addBoard.cardList == ''\"\n                    variant=\"primary\"\n                    size=\"sm\"\n                    @click=\"addCard({ list: div, cardListTitle : addBoard.cardList })\"\n                  >Add</b-button>\n                </b-input-group-append>\n                <b-form-input\n                  v-model=\"addBoard.cardList\"\n                  class=\"ul-scrumboard-form-input\"\n                  type=\"text\"\n                  v-on:keyup.enter=\"addCard({ list: div, cardListTitle : addBoard.cardList })\"\n                ></b-form-input>\n                <b-input-group-append>\n                  <b-button @click=\"toggleCard\" variant=\"primary\" size=\"sm\">X</b-button>\n                </b-input-group-append>\n              </b-input-group>\n            </template>\n          </b-card>\n           \n        </div>\n\n       \n        <!-- scrumboard-modal  -->\n        <b-modal id=\"modal-center\" size=\"lg\" centered title=\"Draggable 1\" hide-footer>\n          <b-form >\n            <b-form-group id=\"input-group-1\" label-for=\"input-1\" class=\"mb-4\">\n              <b-form-input\n                id=\"input-1\"\n                type=\"text\"\n                required\n                v-model=\"getEditCardList.title\"\n                placeholder=\"title\"\n              ></b-form-input>\n            </b-form-group>\n\n            <b-form-group class=\"mb-4\">\n              <b-form-textarea\n                id=\"textarea\"\n                v-model=\"getEditCardList.description\"\n                rows=\"5\"\n                placeholder=\"Description\"\n              ></b-form-textarea>\n            </b-form-group>\n\n            <b-form-group class=\"mb-4\">\n              <b-form-input \n                  v-model=\"addBoard.comment\"\n                  @keyup.enter=\"addComment(addBoard.comment)\" \n                  id=\"input-1\" \n                  type=\"text\" \n                   placeholder=\"Write Comments....\"\n                  \n              ></b-form-input>\n            </b-form-group>\n            \n            <b-list-group class=\"mb-4\">\n              <div\n                class=\"d-flex w-100 align-items-baseline\"\n                v-for=\"comment in getEditCardList.comments\"\n                :key=\"comment.id\"\n              >\n                <p class=\"ul-widget4__img todo-img\">\n                  <img :src=\"comment.image\" class=\"rounded-circle\" />\n                </p>\n                <b-list-group-item class=\"mb-4 w-100\">{{comment.text}}</b-list-group-item>\n              </div>\n            </b-list-group>\n\n            <b-button @click.prevent=\"onSubmit(getEditCardList)\" type=\"button\" variant=\"primary\">Submit</b-button>\n            \n            <b-button type=\"reset\" variant=\"danger\">Reset</b-button>\n          </b-form>\n        </b-modal>\n\n        <b-col md=\"3\">\n          <b-card class=\"cursor-pointer\">\n            <div class=\"card-title mb-0\">\n              <b-button\n                @click=\"isShow = !isShow\"\n                v-if=\"isShow\"\n                tag=\"div\"\n                class=\"ul-scrum-btn d-flex align-items-center border-0\"\n              >\n                <i class=\"i-Add text-20 mr-2\"></i>\n                <p class=\"m-0 text-muted\">Add Project List</p>\n              </b-button>\n\n              <b-input-group v-else class=\"mt-3\">\n                <b-input-group-append>\n                  <b-button\n                    @click=\"addList(addBoard.title)\"\n                    :disabled=\"addBoard.title == ''\"\n                    variant=\"primary\"\n                    size=\"sm\"\n                  >Add</b-button>\n                </b-input-group-append>\n                <b-form-input\n                  class=\"ul-scrumboard-form-input\"\n                  type=\"text\"\n                  v-model=\"addBoard.title\"\n                  v-on:keyup.enter=\"addList(addBoard.title)\"\n                ></b-form-input>\n                <b-input-group-append>\n                  <b-button @click=\"isShow = !isShow\" variant=\"primary\" size=\"sm\">X</b-button>\n                </b-input-group-append>\n              </b-input-group>\n            </div>\n          </b-card>\n        </b-col>\n      \n    </div>\n    \n  </div>\n</template>\n<script>\nimport draggable from \"vuedraggable\";\nimport { mapGetters, mapActions } from \"vuex\";\n\nexport default {\n  name: \"two-lists\",\n  display: \"Two Lists\",\n\n  order: 1,\n  components: {\n    draggable\n  },\n\n  data() {\n    return {\n      boardTitle:'untitle',\n      addBoard: {\n        title: \"\",\n        cardList: \"\",\n        comment:\"\"\n      },\n      selectedListId: null,\n      enabled: true,\n      isShow: true,\n      isCard: false,\n      drag: false,\n      projectList: \"\"\n    };\n  },\n  computed: {\n    ...mapGetters([\"getBoardList\", \"getEditBoardList\", \"getEditCardList\",\"getList\"]),\n    dragOptions() {\n      return {\n        animation: 200,\n        group: \"description\",\n        disabled: false\n      };\n    }\n  },\n  methods: {\n    ...mapActions([\"editCardList\", \"addList\", \"addCard\",\"addComment\",\"updateCardList\",\"updateBoard\"]),\n    onSubmit(data) {\n      console.log(\"testing\");\n      this.updateCardList(data)\n    },\n    toggleCard(data) {\n      this.selectedListId = data;\n    },\n    addProjectList() {},\n    editCardListPage(data) {\n      this.editCardList(data);\n    },\n    back(){\n      this.$router.push('/app/apps/scrumboard')\n    }\n  }\n};\n</script>\n<style>\n.button {\n  margin-top: 35px;\n}\n.flip-list-move {\n  transition: transform 0.5s;\n}\n.no-move {\n  transition: transform 0s;\n}\n.ghost {\n  opacity: 0.5;\n  background: #c8ebfb;\n}\n.list-group {\n  min-height: 20px;\n}\n.list-group-item {\n  cursor: move;\n}\n.list-group-item i {\n  cursor: pointer;\n}\n.ul-scrum-btn:focus {\n  box-shadow: none;\n  /* box-shadow: 0 0 0 0.2rem rgba(82, 73, 90, 0.5); */\n}\n.ul-scrum-btn:hover {\n  box-shadow: none;\n}\n.ul-scrumboard-form-input:focus {\n  box-shadow: none;\n}\n.editScrumBoardContainer{\n  overflow-x: scroll;\n}\n.ul-board-item{\n  min-width: 400px;\n}\n</style>"],"sourceRoot":"src/views/app/apps/scrumboard"}]}