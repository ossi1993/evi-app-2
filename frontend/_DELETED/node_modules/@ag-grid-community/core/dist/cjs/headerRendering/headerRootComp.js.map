{"version":3,"sources":["../../src/ts/headerRendering/headerRootComp.ts"],"names":[],"mappings":"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","file":"headerRootComp.js","sourcesContent":["import { GridOptionsWrapper } from '../gridOptionsWrapper';\nimport { ColumnController } from '../columnController/columnController';\nimport { GridPanel } from '../gridPanel/gridPanel';\nimport { Autowired } from '../context/context';\nimport { HeaderContainer } from './headerContainer';\nimport { Events } from '../events';\nimport { Component } from '../widgets/component';\nimport { RefSelector } from '../widgets/componentAnnotations';\nimport { GridApi } from '../gridApi';\nimport { AutoWidthCalculator } from '../rendering/autoWidthCalculator';\nimport { Constants } from '../constants';\nimport { addOrRemoveCssClass, setDisplayed } from '../utils/dom';\nimport { ManagedFocusComponent } from '../widgets/managedFocusComponent';\nimport { HeaderNavigationService, HeaderNavigationDirection } from './header/headerNavigationService';\nimport { _ } from '../utils';\n\nexport type HeaderContainerPosition = 'left' | 'right' | 'center';\n\nexport class HeaderRootComp extends ManagedFocusComponent {\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-header\" role=\"presentation\">\n            <div class=\"ag-pinned-left-header\" ref=\"ePinnedLeftHeader\" role=\"presentation\"></div>\n            <div class=\"ag-header-viewport\" ref=\"eHeaderViewport\" role=\"presentation\">\n                <div class=\"ag-header-container\" ref=\"eHeaderContainer\" role=\"rowgroup\"></div>\n            </div>\n            <div class=\"ag-pinned-right-header\" ref=\"ePinnedRightHeader\" role=\"presentation\"></div>\n        </div>`;\n\n    @RefSelector('ePinnedLeftHeader') private ePinnedLeftHeader: HTMLElement;\n    @RefSelector('ePinnedRightHeader') private ePinnedRightHeader: HTMLElement;\n    @RefSelector('eHeaderContainer') private eHeaderContainer: HTMLElement;\n    @RefSelector('eHeaderViewport') private eHeaderViewport: HTMLElement;\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('autoWidthCalculator') private autoWidthCalculator: AutoWidthCalculator;\n    @Autowired('headerNavigationService') private headerNavigationService: HeaderNavigationService;\n\n    private gridPanel: GridPanel;\n    private printLayout: boolean;\n    private headerContainers: Map<HeaderContainerPosition, HeaderContainer> = new Map();\n\n    constructor() {\n        super(HeaderRootComp.TEMPLATE);\n    }\n\n    protected postConstruct(): void {\n        super.postConstruct();\n\n        this.printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n\n        this.gridApi.registerHeaderRootComp(this);\n        this.autoWidthCalculator.registerHeaderRootComp(this);\n\n        this.registerHeaderContainer(\n            new HeaderContainer(this.eHeaderContainer, this.eHeaderViewport, null),\n            'center'\n        );\n\n        this.registerHeaderContainer(\n            new HeaderContainer(this.ePinnedLeftHeader, null, Constants.PINNED_LEFT),\n            'left'\n        );\n\n        this.registerHeaderContainer(\n            new HeaderContainer(this.ePinnedRightHeader, null, Constants.PINNED_RIGHT),\n            'right'\n        );\n\n        this.headerContainers.forEach(\n            container => this.createManagedBean(container)\n        );\n\n        this.headerNavigationService.registerHeaderRoot(this);\n\n        // shotgun way to get labels to change, eg from sum(amount) to avg(amount)\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.refreshHeader.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, this.onDomLayoutChanged.bind(this));\n\n        // for setting ag-pivot-on / ag-pivot-off CSS classes\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));\n\n        this.onPivotModeChanged();\n        this.addPreventHeaderScroll();\n\n        if (this.columnController.isReady()) {\n            this.refreshHeader();\n        }\n    }\n\n    public registerGridComp(gridPanel: GridPanel): void {\n        this.gridPanel = gridPanel;\n        this.headerContainers.forEach(c => c.setupDragAndDrop(gridPanel));\n    }\n\n    private registerHeaderContainer(headerContainer: HeaderContainer, type: HeaderContainerPosition): void {\n        this.headerContainers.set(type, headerContainer);\n    }\n\n    protected onTabKeyDown(e: KeyboardEvent): void {\n        const isRtl = this.gridOptionsWrapper.isEnableRtl();\n        const direction = e.shiftKey !== isRtl\n            ? HeaderNavigationDirection.LEFT\n            : HeaderNavigationDirection.RIGHT;\n\n        if (this.headerNavigationService.navigateHorizontally(direction, true) ||\n            this.focusController.focusNextGridCoreContainer(e.shiftKey)\n        ) {\n            e.preventDefault();\n        }\n    }\n\n    protected handleKeyDown(e: KeyboardEvent): void {\n        let direction: HeaderNavigationDirection;\n\n        switch (e.keyCode) {\n            case Constants.KEY_LEFT:\n                direction = HeaderNavigationDirection.LEFT;\n            case Constants.KEY_RIGHT:\n                if (!_.exists(direction)) {\n                    direction = HeaderNavigationDirection.RIGHT;\n                }\n                this.headerNavigationService.navigateHorizontally(direction);\n                break;\n            case Constants.KEY_UP:\n                direction = HeaderNavigationDirection.UP;\n            case Constants.KEY_DOWN:\n                if (!_.exists(direction)) {\n                    direction = HeaderNavigationDirection.DOWN;\n                }\n                if (this.headerNavigationService.navigateVertically(direction)) {\n                    e.preventDefault();\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    protected onFocusOut(e: FocusEvent): void {\n        const { relatedTarget }  = e;\n        const eGui = this.getGui();\n\n        if (!relatedTarget && eGui.contains(document.activeElement)) { return; }\n\n        if (!eGui.contains(relatedTarget as HTMLElement)) {\n            this.focusController.clearFocusedHeader();\n        }\n    }\n\n    private onDomLayoutChanged(): void {\n        const newValue = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n        if (this.printLayout !== newValue) {\n            this.printLayout = newValue;\n            this.refreshHeader();\n        }\n    }\n\n    public setHorizontalScroll(offset: number): void {\n        this.eHeaderContainer.style.transform = `translateX(${offset}px)`;\n    }\n\n    public forEachHeaderElement(callback: (renderedHeaderElement: Component) => void): void {\n        this.headerContainers.forEach(\n            childContainer => childContainer.forEachHeaderElement(callback)\n        );\n    }\n\n    public refreshHeader() {\n        this.headerContainers.forEach(\n            container => container.refresh()\n        );\n    }\n\n    private onPivotModeChanged(): void {\n        const pivotMode = this.columnController.isPivotMode();\n\n        addOrRemoveCssClass(this.getGui(), 'ag-pivot-on', pivotMode);\n        addOrRemoveCssClass(this.getGui(), 'ag-pivot-off', !pivotMode);\n    }\n\n    public setHeight(height: number): void {\n        // one extra pixel is needed here to account for the\n        // height of the border\n        const px = `${height + 1}px`;\n        this.getGui().style.height = px;\n        this.getGui().style.minHeight = px;\n    }\n\n    // if the user is in floating filter and hits tab a few times, the header can\n    // end up scrolling to show items off the screen, leaving the grid and header\n    // and the grid columns no longer in sync.\n    private addPreventHeaderScroll() {\n        this.addManagedListener(this.eHeaderViewport, 'scroll', () => {\n            // if the header scrolls, the header will be out of sync. so we reset the\n            // header scroll, and then scroll the body, which will in turn set the offset\n            // on the header, giving the impression that the header scrolled as expected.\n            const scrollLeft = this.eHeaderViewport.scrollLeft;\n            if (scrollLeft !== 0) {\n                this.gridPanel.scrollHorizontally(scrollLeft);\n                this.eHeaderViewport.scrollLeft = 0;\n            }\n        });\n    }\n\n    public getHeaderContainers(): Map<HeaderContainerPosition, HeaderContainer> {\n        return this.headerContainers;\n    }\n\n    public setHeaderContainerWidth(width: number) {\n        this.eHeaderContainer.style.width = `${width}px`;\n    }\n\n    public setLeftVisible(visible: boolean): void {\n        setDisplayed(this.ePinnedLeftHeader, visible);\n    }\n\n    public setRightVisible(visible: boolean): void {\n        setDisplayed(this.ePinnedRightHeader, visible);\n    }\n}\n"]}