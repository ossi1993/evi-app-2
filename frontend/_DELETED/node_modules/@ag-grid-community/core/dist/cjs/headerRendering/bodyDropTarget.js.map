{"version":3,"sources":["../../src/ts/headerRendering/bodyDropTarget.ts"],"names":[],"mappings":"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","file":"bodyDropTarget.js","sourcesContent":["import { DragAndDropService, DraggingEvent, DragSourceType, DropTarget } from \"../dragAndDrop/dragAndDropService\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { MoveColumnController } from \"./moveColumnController\";\nimport { GridPanel } from \"../gridPanel/gridPanel\";\nimport { BodyDropPivotTarget } from \"./bodyDropPivotTarget\";\nimport { ColumnController } from \"../columnController/columnController\";\nimport { Constants } from \"../constants\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { BeanStub } from \"../context/beanStub\";\n\nexport interface DropListener {\n    getIconName(): string;\n    onDragEnter(params: DraggingEvent): void;\n    onDragLeave(params: DraggingEvent): void;\n    onDragging(params: DraggingEvent): void;\n    onDragStop(params: DraggingEvent): void;\n}\n\nenum DropType { ColumnMove, Pivot }\n\nexport class BodyDropTarget extends BeanStub implements DropTarget {\n\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n\n    private gridPanel: GridPanel;\n    private pinned: string;\n    // public because it's part of the DropTarget interface\n    private eContainer: HTMLElement;\n    // public because it's part of the DropTarget interface\n    private eSecondaryContainers: HTMLElement[];\n    private dropListeners: {[type: number]: DropListener} = {};\n    private currentDropListener: DropListener;\n    private moveColumnController: MoveColumnController;\n\n    constructor(pinned: string, eContainer: HTMLElement) {\n        super();\n        this.pinned = pinned;\n        this.eContainer = eContainer;\n    }\n\n    public registerGridComp(gridPanel: GridPanel): void {\n        this.gridPanel = gridPanel;\n\n        this.moveColumnController.registerGridComp(gridPanel);\n\n        switch (this.pinned) {\n            case Constants.PINNED_LEFT: this.eSecondaryContainers = this.gridPanel.getDropTargetLeftContainers(); break;\n            case Constants.PINNED_RIGHT: this.eSecondaryContainers = this.gridPanel.getDropTargetRightContainers(); break;\n            default: this.eSecondaryContainers = this.gridPanel.getDropTargetBodyContainers(); break;\n        }\n    }\n\n    public isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.HeaderCell ||\n            (type === DragSourceType.ToolPanel && this.gridOptionsWrapper.isAllowDragFromColumnsToolPanel());\n    }\n\n    public getSecondaryContainers(): HTMLElement[] {\n        return this.eSecondaryContainers;\n    }\n\n    public getContainer(): HTMLElement {\n        return this.eContainer;\n    }\n\n    @PostConstruct\n    private init(): void {\n\n        this.moveColumnController = this.createBean(new MoveColumnController(this.pinned, this.eContainer));\n\n        const bodyDropPivotTarget = new BodyDropPivotTarget(this.pinned);\n        this.createBean(bodyDropPivotTarget);\n\n        this.dropListeners[DropType.ColumnMove] = this.moveColumnController;\n        this.dropListeners[DropType.Pivot] = bodyDropPivotTarget;\n\n        this.dragAndDropService.addDropTarget(this);\n    }\n\n    public getIconName(): string {\n        return this.currentDropListener.getIconName();\n    }\n\n    // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel\n    // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when\n    // dropped into the grid's body.\n    private getDropType(draggingEvent: DraggingEvent): DropType {\n\n        if (this.columnController.isPivotMode()) {\n            // in pivot mode, then if moving a column (ie didn't come from toolpanel) then it's\n            // a standard column move, however if it came from the toolpanel, then we are introducing\n            // dimensions or values to the grid\n            if (draggingEvent.dragSource.type === DragSourceType.ToolPanel) {\n                return DropType.Pivot;\n            }\n\n            return DropType.ColumnMove;\n        }\n\n        // it's a column, and not pivot mode, so always moving\n        return DropType.ColumnMove;\n    }\n\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        // we pick the drop listener depending on whether we are in pivot mode are not. if we are\n        // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise\n        // we change visibility state and position.\n\n        // if (this.columnController.isPivotMode()) {\n        const dropType: DropType = this.getDropType(draggingEvent);\n\n        this.currentDropListener = this.dropListeners[dropType];\n        this.currentDropListener.onDragEnter(draggingEvent);\n    }\n\n    public onDragLeave(params: DraggingEvent): void {\n        this.currentDropListener.onDragLeave(params);\n    }\n\n    public onDragging(params: DraggingEvent): void {\n        this.currentDropListener.onDragging(params);\n    }\n\n    public onDragStop(params: DraggingEvent): void {\n        this.currentDropListener.onDragStop(params);\n    }\n\n}\n"]}