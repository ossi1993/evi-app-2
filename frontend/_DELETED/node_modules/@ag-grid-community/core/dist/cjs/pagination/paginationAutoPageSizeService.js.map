{"version":3,"sources":["../../src/ts/pagination/paginationAutoPageSizeService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAA+C;AAC/C,oCAAmC;AACnC,8CAAqD;AAKrD;IAAmD,iDAAQ;IAA3D;;IAuCA,CAAC;IAjCU,wDAAgB,GAAvB,UAAwB,SAAoB;QACxC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAE3B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,eAAM,CAAC,yBAAyB,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAClH,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,eAAM,CAAC,+BAA+B,EAAE,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9H,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAEO,iDAAS,GAAjB;QACI,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,wBAAwB,EAAE,CAAC;IAC/D,CAAC;IAEO,iEAAyB,GAAjC;QACI,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAEO,2DAAmB,GAA3B;QACI,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAEO,qDAAa,GAArB;QACI,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE;YAClB,OAAO;SACV;QAED,IAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,EAAE,CAAC;QACjE,IAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;QAElD,IAAI,UAAU,GAAG,CAAC,EAAE;YAChB,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,SAAS,CAAC,CAAC;YACvD,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,oBAAoB,EAAE,WAAW,CAAC,CAAC;SAC1E;IACL,CAAC;IApCgC;QAAhC,mBAAS,CAAC,oBAAoB,CAAC;6EAAgD;IAFvE,6BAA6B;QADzC,cAAI,CAAC,+BAA+B,CAAC;OACzB,6BAA6B,CAuCzC;IAAD,oCAAC;CAvCD,AAuCC,CAvCkD,mBAAQ,GAuC1D;AAvCY,sEAA6B","file":"paginationAutoPageSizeService.js","sourcesContent":["import { BeanStub } from \"../context/beanStub\";\nimport { Events } from \"../events\";\nimport { Autowired, Bean } from \"../context/context\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { GridPanel } from \"../gridPanel/gridPanel\";\n\n@Bean('paginationAutoPageSizeService')\nexport class PaginationAutoPageSizeService extends BeanStub {\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n\n    private gridPanel: GridPanel;\n\n    public registerGridComp(gridPanel: GridPanel): void {\n        this.gridPanel = gridPanel;\n\n        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.onBodyHeightChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n        this.checkPageSize();\n    }\n\n    private notActive(): boolean {\n        return !this.gridOptionsWrapper.isPaginationAutoPageSize();\n    }\n\n    private onScrollVisibilityChanged(): void {\n        this.checkPageSize();\n    }\n\n    private onBodyHeightChanged(): void {\n        this.checkPageSize();\n    }\n\n    private checkPageSize(): void {\n        if (this.notActive()) {\n            return;\n        }\n\n        const rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n        const bodyHeight = this.gridPanel.getBodyHeight();\n\n        if (bodyHeight > 0) {\n            const newPageSize = Math.floor(bodyHeight / rowHeight);\n            this.gridOptionsWrapper.setProperty('paginationPageSize', newPageSize);\n        }\n    }\n}\n"]}