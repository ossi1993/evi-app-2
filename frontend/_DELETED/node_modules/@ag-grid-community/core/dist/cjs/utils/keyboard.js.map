{"version":3,"sources":["../../src/ts/utils/keyboard.ts"],"names":[],"mappings":"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","file":"keyboard.js","sourcesContent":["import { Constants } from '../constants';\nimport { exists } from './generic';\nimport { GridOptionsWrapper } from '../gridOptionsWrapper';\nimport { RowNode } from '../entities/rowNode';\nimport { Column } from '../entities/column';\nimport { SuppressKeyboardEventParams } from '../entities/colDef';\nimport { isBrowserEdge, isBrowserIE } from './browser';\n\nconst PRINTABLE_CHARACTERS = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890!\"Â£$%^&*()_+-=[];\\'#,./\\\\|<>?:@~{}';\nconst NUMPAD_DEL_NUMLOCK_ON_KEY = 'Del';\nconst NUMPAD_DEL_NUMLOCK_ON_CHARCODE = 46;\n\nexport function isKeyPressed(event: KeyboardEvent, keyToCheck: number) {\n    return (event.which || event.keyCode) === keyToCheck;\n}\n\nexport function isCharacterKey(event: KeyboardEvent): boolean {\n    // from: https://stackoverflow.com/questions/4179708/how-to-detect-if-the-pressed-key-will-produce-a-character-inside-an-input-text\n    const { which } = event;\n\n    if (typeof which === 'number' && which) {\n        return !event.ctrlKey && !event.metaKey && !event.altKey && event.which !== 8 && event.which !== 16;\n    }\n\n    return which === undefined;\n}\n\nexport function isEventFromPrintableCharacter(event: KeyboardEvent): boolean {\n    const pressedChar = String.fromCharCode(event.charCode);\n\n    // newline is an exception, as it counts as a printable character, but we don't\n    // want to start editing when it is pressed. without this check, if user is in chrome\n    // and editing a cell, and they press ctrl+enter, the cell stops editing, and then\n    // starts editing again with a blank value (two 'key down' events are fired). to\n    // test this, remove the line below, edit a cell in chrome and hit ctrl+enter while editing.\n    // https://ag-grid.atlassian.net/browse/AG-605\n    if (isKeyPressed(event, Constants.KEY_NEW_LINE)) { return false; }\n\n    // no allowed printable chars have alt or ctrl key combinations\n    if (event.altKey || event.ctrlKey) { return false; }\n\n    if (exists(event.key)) {\n        // modern browser will implement key, so we return if key is length 1, eg if it is 'a' for the\n        // a key, or '2' for the '2' key. non-printable characters have names, eg 'Enter' or 'Backspace'.\n        const printableCharacter = event.key.length === 1;\n\n        // IE11 & Edge treat the numpad del key differently - with numlock on we get \"Del\" for key,\n        // so this addition checks if its IE11/Edge and handles that specific case the same was as all other browsers\n        const numpadDelWithNumlockOnForEdgeOrIe = isNumpadDelWithNumlockOnForEdgeOrIe(event);\n\n        return printableCharacter || numpadDelWithNumlockOnForEdgeOrIe;\n    }\n\n    // otherwise, for older browsers, we test against a list of characters, which doesn't include\n    // accents for non-English, but don't care much, as most users are on modern browsers\n    return PRINTABLE_CHARACTERS.indexOf(pressedChar) >= 0;\n}\n\n/**\n * Allows user to tell the grid to skip specific keyboard events\n * @param {GridOptionsWrapper} gridOptionsWrapper\n * @param {KeyboardEvent} keyboardEvent\n * @param {RowNode} rowNode\n * @param {Column} column\n * @param {boolean} editing\n * @returns {boolean}\n */\nexport function isUserSuppressingKeyboardEvent(\n    gridOptionsWrapper: GridOptionsWrapper,\n    keyboardEvent: KeyboardEvent,\n    rowNode: RowNode,\n    column: Column,\n    editing: boolean\n): boolean {\n    const gridOptionsFunc = gridOptionsWrapper.getSuppressKeyboardEventFunc();\n    const colDefFunc = column.getColDef().suppressKeyboardEvent;\n\n    // if no callbacks provided by user, then do nothing\n    if (!gridOptionsFunc && !colDefFunc) { return false; }\n\n    const params: SuppressKeyboardEventParams = {\n        event: keyboardEvent,\n        editing,\n        column,\n        api: gridOptionsWrapper.getApi(),\n        node: rowNode,\n        data: rowNode.data,\n        colDef: column.getColDef(),\n        context: gridOptionsWrapper.getContext(),\n        columnApi: gridOptionsWrapper.getColumnApi()\n    };\n\n    // colDef get first preference on suppressing events\n    if (colDefFunc) {\n        const colDefFuncResult = colDefFunc(params);\n        // if colDef func suppressed, then return now, no need to call gridOption func\n        if (colDefFuncResult) { return true; }\n    }\n\n    if (gridOptionsFunc) {\n        // if gridOption func, return the result\n        return gridOptionsFunc(params);\n    }\n\n    // otherwise return false, don't suppress, as colDef didn't suppress and no func on gridOptions\n    return false;\n}\n\nfunction isNumpadDelWithNumlockOnForEdgeOrIe(event: KeyboardEvent) {\n    return (isBrowserEdge() || isBrowserIE()) &&\n        event.key === NUMPAD_DEL_NUMLOCK_ON_KEY &&\n        event.charCode === NUMPAD_DEL_NUMLOCK_ON_CHARCODE;\n}\n"]}