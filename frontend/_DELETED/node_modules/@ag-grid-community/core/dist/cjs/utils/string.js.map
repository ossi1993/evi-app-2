{"version":3,"sources":["../../src/ts/utils/string.ts"],"names":[],"mappings":"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","file":"string.js","sourcesContent":["const reUnescapedHtml = /[&<>\"']/g;\n\n/**\n * HTML Escapes.\n */\nconst HTML_ESCAPES: { [id: string]: string; } = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\n\n/**\n * It encodes any string in UTF-8 format\n * taken from https://github.com/mathiasbynens/utf8.js\n * @param {string} s\n * @returns {string}\n */\nexport function utf8_encode(s: string): string {\n    const stringFromCharCode = String.fromCharCode;\n\n    function ucs2decode(string: string) {\n        const output = [];\n        let counter = 0;\n        const length = string.length;\n        let value;\n        let extra;\n\n        while (counter < length) {\n            value = string.charCodeAt(counter++);\n            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n                // high surrogate, and there is a next character\n                extra = string.charCodeAt(counter++);\n                if ((extra & 0xFC00) == 0xDC00) { // low surrogate\n                    output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n                } else {\n                    // unmatched surrogate; only append this code unit, in case the next\n                    // code unit is the high surrogate of a surrogate pair\n                    output.push(value);\n                    counter--;\n                }\n            } else {\n                output.push(value);\n            }\n        }\n        return output;\n    }\n\n    function checkScalarValue(codePoint: number) {\n        if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {\n            throw Error(\n                'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +\n                ' is not a scalar value'\n            );\n        }\n    }\n\n    function createByte(codePoint: number, shift: number) {\n        return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);\n    }\n\n    function encodeCodePoint(codePoint: number) {\n        if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence\n            return stringFromCharCode(codePoint);\n        }\n        let symbol = '';\n\n        if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence\n            symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence\n            checkScalarValue(codePoint);\n            symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);\n            symbol += createByte(codePoint, 6);\n        } else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence\n            symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);\n            symbol += createByte(codePoint, 12);\n            symbol += createByte(codePoint, 6);\n        }\n        symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);\n        return symbol;\n    }\n\n    const codePoints = ucs2decode(s);\n    const length = codePoints.length;\n    let index = -1;\n    let codePoint;\n    let byteString = '';\n\n    while (++index < length) {\n        codePoint = codePoints[index];\n        byteString += encodeCodePoint(codePoint);\n    }\n\n    return byteString;\n}\n\n/**\n * Converts a camelCase string into hyphenated string\n * from https://gist.github.com/youssman/745578062609e8acac9f\n * @param {string} str\n * @return {string}\n */\nexport function camelCaseToHyphen(str: string): string | null {\n    if (str === null || str === undefined) { return null; }\n\n    return str.replace(/([A-Z])/g, (g) => '-' + g[0].toLowerCase());\n}\n\n/**\n * Converts a hyphenated string into camelCase string\n * from https://stackoverflow.com/questions/6660977/convert-hyphens-to-camel-case-camelcase\n * @param {string} str\n * @return {string}\n */\nexport function hyphenToCamelCase(str: string): string | null {\n    if (str === null || str === undefined) {\n        return null;\n    }\n    return str.replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n}\n\nexport function capitalise(str: string): string {\n    return str[0].toUpperCase() + str.substr(1).toLowerCase();\n}\n\nexport function escape(toEscape: string | null): string | null {\n    return toEscape == null || !toEscape.replace ? toEscape : toEscape.replace(reUnescapedHtml, chr => HTML_ESCAPES[chr]);\n}\n\n/**\n * Converts a camelCase string into regular text\n * from: https://stackoverflow.com/questions/15369566/putting-space-in-camel-case-string-using-regular-expression\n * @param {string} camelCase\n * @return {string}\n */\nexport function camelCaseToHumanText(camelCase: string | undefined): string | null {\n    if (!camelCase || camelCase == null) { return null; }\n\n    const rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;\n    const words: string[] = camelCase.replace(rex, '$1$4 $2$3$5').replace('.', ' ').split(' ');\n\n    return words.map(word => word.substring(0, 1).toUpperCase() + ((word.length > 1) ? word.substring(1, word.length) : '')).join(' ');\n}\n"]}