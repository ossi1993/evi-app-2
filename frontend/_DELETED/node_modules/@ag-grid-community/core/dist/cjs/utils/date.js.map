{"version":3,"sources":["../../src/ts/utils/date.ts"],"names":[],"mappings":";;;;;;;;AAAA,mCAAoC;AAEpC;;;;;;GAMG;AACH,SAAgB,aAAa,CAAC,IAAU,EAAE,WAAkB,EAAE,SAAe;IAAnC,4BAAA,EAAA,kBAAkB;IAAE,0BAAA,EAAA,eAAe;IACzE,IAAI,CAAC,IAAI,EAAE;QAAE,OAAO,IAAI,CAAC;KAAE;IAE3B,IAAI,UAAU,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,iBAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAE1H,IAAI,WAAW,EAAE;QACb,UAAU,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,iBAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACxH;IAED,OAAO,UAAU,CAAC;AACtB,CAAC;AAVD,sCAUC;AAED;;GAEG;AACH,SAAgB,uBAAuB,CAAC,KAAa;IACjD,IAAI,CAAC,KAAK,EAAE;QACR,OAAO,IAAI,CAAC;KACf;IAEK,IAAA,qBAAqC,EAApC,eAAO,EAAE,eAA2B,CAAC;IAE5C,IAAI,CAAC,OAAO,EAAE;QAAE,OAAO,IAAI,CAAC;KAAE;IAE9B,IAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,EAAf,CAAe,CAAC,CAAC;IAE5D,IAAI,MAAM,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,CAAC,CAAC,CAAC,EAAT,CAAS,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;QAAE,OAAO,IAAI,CAAC;KAAE;IAEzD,IAAA,gBAAI,EAAE,iBAAK,EAAE,eAAG,CAAW;IAClC,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;IAE5C,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,IAAI;QAC3B,IAAI,CAAC,QAAQ,EAAE,KAAK,KAAK,GAAG,CAAC;QAC7B,IAAI,CAAC,OAAO,EAAE,KAAK,GAAG,EAAE;QACxB,4DAA4D;QAC5D,OAAO,IAAI,CAAC;KACf;IAED,IAAI,CAAC,OAAO,IAAI,OAAO,KAAK,UAAU,EAAE;QACpC,OAAO,IAAI,CAAC;KACf;IAEK,IAAA,2EAA8E,EAA7E,aAAK,EAAE,eAAO,EAAE,eAA6D,CAAC;IAErF,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG,EAAE,EAAE;QAC1B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACxB;IAED,IAAI,OAAO,IAAI,CAAC,IAAI,OAAO,GAAG,EAAE,EAAE;QAC9B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;KAC5B;IAED,IAAI,OAAO,IAAI,CAAC,IAAI,OAAO,GAAG,EAAE,EAAE;QAC9B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;KAC5B;IAED,OAAO,IAAI,CAAC;AAChB,CAAC;AA1CD,0DA0CC","file":"date.js","sourcesContent":["import { padStart } from './number';\n\n/**\n * Serialises a Date to a string of format `yyyy-MM-dd HH:mm:ss`.\n * An alternative separator can be provided to be used instead of hyphens.\n * @param date The date to serialise\n * @param includeTime Whether to include the time in the serialised string\n * @param separator The separator to use between date parts\n */\nexport function serialiseDate(date: Date, includeTime = true, separator = '-'): string | null {\n    if (!date) { return null; }\n\n    let serialised = [date.getFullYear(), date.getMonth() + 1, date.getDate()].map(part => padStart(part, 2)).join(separator);\n\n    if (includeTime) {\n        serialised += ' ' + [date.getHours(), date.getMinutes(), date.getSeconds()].map(part => padStart(part, 2)).join(':');\n    }\n\n    return serialised;\n}\n\n/**\n * Parses a date and time from a string in the format `yyyy-MM-dd HH:mm:ss`\n */\nexport function parseDateTimeFromString(value: string): Date | null {\n    if (!value) {\n        return null;\n    }\n\n    const [dateStr, timeStr] = value.split(' ');\n\n    if (!dateStr) { return null; }\n\n    const fields = dateStr.split('-').map(f => parseInt(f, 10));\n\n    if (fields.filter(f => !isNaN(f)).length !== 3) { return null; }\n\n    const [year, month, day] = fields;\n    const date = new Date(year, month - 1, day);\n\n    if (date.getFullYear() !== year ||\n        date.getMonth() !== month - 1 ||\n        date.getDate() !== day) {\n        // date was not parsed as expected so must have been invalid\n        return null;\n    }\n\n    if (!timeStr || timeStr === '00:00:00') {\n        return date;\n    }\n\n    const [hours, minutes, seconds] = timeStr.split(':').map(part => parseInt(part, 10));\n\n    if (hours >= 0 && hours < 24) {\n        date.setHours(hours);\n    }\n\n    if (minutes >= 0 && minutes < 60) {\n        date.setMinutes(minutes);\n    }\n\n    if (seconds >= 0 && seconds < 60) {\n        date.setSeconds(seconds);\n    }\n\n    return date;\n}\n"]}