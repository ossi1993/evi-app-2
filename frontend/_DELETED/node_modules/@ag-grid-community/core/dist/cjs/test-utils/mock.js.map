{"version":3,"sources":["../../src/ts/test-utils/mock.ts"],"names":[],"mappings":";;;;;;;AAAA,4GAA4G;;AAyB5G,SAAgB,IAAI;IAAI,uBAAgC;SAAhC,UAAgC,EAAhC,qBAAgC,EAAhC,IAAgC;QAAhC,kCAAgC;;IACpD,IAAM,eAAe,GAAkC,EAAE,CAAC;IAC1D,aAAa,CAAC,OAAO,CAAC,UAAA,YAAY,IAAI,OAAA,eAAe,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,EAAzC,CAAyC,CAAC,CAAC;IAEjF,OAAO,eAAiC,CAAC;AAC7C,CAAC;AALD,oBAKC","file":"mock.js","sourcesContent":["// TODO: ideally would use 'jest-mock-extended' but this requires TypeScript 3.7 - reintroduce after upgrade\n\n/* Taken from https://github.com/facebook/jest/issues/7832#issuecomment-462343138 */\ntype GenericFunction = (...args: any[]) => any;\n\ntype PickByTypeKeyFilter<T, C> = {\n    [K in keyof T]: T[K] extends C ? K : never\n};\n\ntype KeysByType<T, C> = PickByTypeKeyFilter<T, C>[keyof T];\n\ntype ValuesByType<T, C> = {\n    [K in keyof T]: T[K] extends C ? T[K] : never\n};\n\ntype PickByType<T, C> = Pick<ValuesByType<T, C>, KeysByType<T, C>>;\n\ntype MethodsOf<T> = KeysByType<Required<T>, GenericFunction>;\n\ntype InterfaceOf<T> = PickByType<T, GenericFunction>;\n\ntype PartiallyMockedInterfaceOf<T> = {\n    [K in MethodsOf<T>]?: jest.Mock<InterfaceOf<T>[K]>\n};\n\nexport function mock<T>(...mockedMethods: MethodsOf<T>[]): jest.Mocked<T> {\n    const partiallyMocked: PartiallyMockedInterfaceOf<T> = {};\n    mockedMethods.forEach(mockedMethod => partiallyMocked[mockedMethod] = jest.fn());\n\n    return partiallyMocked as jest.Mocked<T>;\n}\n"]}