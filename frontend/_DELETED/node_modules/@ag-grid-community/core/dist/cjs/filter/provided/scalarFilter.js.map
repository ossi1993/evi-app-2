{"version":3,"sources":["../../src/ts/filter/provided/scalarFilter.ts"],"names":[],"mappings":"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","file":"scalarFilter.js","sourcesContent":["import { SimpleFilter, ISimpleFilterParams, ISimpleFilterModel } from \"./simpleFilter\";\nimport { IDoesFilterPassParams } from \"../../interfaces/iFilter\";\n\n/** @deprecated in v21*/\nexport interface NullComparator {\n    equals?: boolean;\n    lessThan?: boolean;\n    greaterThan?: boolean;\n}\n\nexport interface IScalarFilterParams extends ISimpleFilterParams {\n    inRangeInclusive?: boolean;\n    includeBlanksInEquals?: boolean;\n    includeBlanksInLessThan?: boolean;\n    includeBlanksInGreaterThan?: boolean;\n\n    /** @deprecated in v21*/\n    nullComparator?: NullComparator;\n}\n\nexport interface Comparator<T> {\n    (left: T, right: T): number;\n}\n\nexport abstract class ScalarFilter<M extends ISimpleFilterModel, T> extends SimpleFilter<M> {\n    private scalarFilterParams: IScalarFilterParams;\n\n    protected abstract comparator(): Comparator<T>;\n\n    // because the date and number filter models have different attribute names, we have to map\n    protected abstract mapRangeFromModel(filterModel: ISimpleFilterModel): { from: T, to: T; };\n\n    protected setParams(params: IScalarFilterParams): void {\n        super.setParams(params);\n        this.scalarFilterParams = params;\n        this.checkDeprecatedParams();\n    }\n\n    private checkDeprecatedParams(): void {\n        if (this.scalarFilterParams.nullComparator) {\n            console.warn('ag-Grid: Since v21.0, the property filterParams.nullComparator is deprecated. ' +\n                'Please use filterParams.includeBlanksInEquals, filterParams.includeBlanksInLessThan and ' +\n                'filterParams.includeBlanksInGreaterThan instead.');\n\n            this.scalarFilterParams.includeBlanksInEquals = this.scalarFilterParams.nullComparator.equals;\n            this.scalarFilterParams.includeBlanksInLessThan = this.scalarFilterParams.nullComparator.lessThan;\n            this.scalarFilterParams.includeBlanksInGreaterThan = this.scalarFilterParams.nullComparator.greaterThan;\n        }\n    }\n\n    private nullComparator(selectedOption: string, filterValue: T, gridValue: T): number {\n        if (gridValue == null) {\n            switch (selectedOption) {\n                case ScalarFilter.EMPTY:\n                    return 0;\n\n                case ScalarFilter.EQUALS:\n                    return this.scalarFilterParams.includeBlanksInEquals ? 0 : 1;\n\n                case ScalarFilter.NOT_EQUAL:\n                    return this.scalarFilterParams.includeBlanksInEquals ? 1 : 0;\n\n                case ScalarFilter.GREATER_THAN:\n                case ScalarFilter.GREATER_THAN_OR_EQUAL:\n                    return this.scalarFilterParams.includeBlanksInGreaterThan ? 1 : -1;\n\n                case ScalarFilter.LESS_THAN:\n                case ScalarFilter.LESS_THAN_OR_EQUAL:\n                    return this.scalarFilterParams.includeBlanksInLessThan ? -1 : 1;\n            }\n        }\n\n        return this.comparator()(filterValue, gridValue);\n    }\n\n    protected individualConditionPasses(params: IDoesFilterPassParams, filterModel: ISimpleFilterModel) {\n        const cellValue = this.scalarFilterParams.valueGetter(params.node);\n        const range = this.mapRangeFromModel(filterModel);\n        const filterValue = range.from;\n        const filterValueTo = range.to;\n        const filterType = filterModel.type;\n        const customFilterOption = this.optionsFactory.getCustomOption(filterType);\n\n        if (customFilterOption) {\n            // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden\n            if (filterValue != null || customFilterOption.hideFilterInput) {\n                return customFilterOption.test(filterValue, cellValue);\n            }\n        }\n\n        const compareResult = this.nullComparator(filterType, filterValue, cellValue);\n\n        switch (filterType) {\n            case ScalarFilter.EQUALS:\n                return compareResult === 0;\n\n            case ScalarFilter.NOT_EQUAL:\n                return compareResult !== 0;\n\n            case ScalarFilter.GREATER_THAN:\n                return compareResult > 0;\n\n            case ScalarFilter.GREATER_THAN_OR_EQUAL:\n                return compareResult >= 0;\n\n            case ScalarFilter.LESS_THAN:\n                return compareResult < 0;\n\n            case ScalarFilter.LESS_THAN_OR_EQUAL:\n                return compareResult <= 0;\n\n            case ScalarFilter.IN_RANGE: {\n                const compareToResult = this.nullComparator(filterType, filterValueTo, cellValue);\n\n                return this.scalarFilterParams.inRangeInclusive ?\n                    compareResult >= 0 && compareToResult <= 0 :\n                    compareResult > 0 && compareToResult < 0;\n            }\n\n            default:\n                throw new Error('Unexpected type of filter: ' + filterType);\n        }\n    }\n}"]}