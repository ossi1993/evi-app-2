{"version":3,"sources":["../../src/ts/filter/floating/provided/readOnlyFloatingFilter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wDAAuD;AACvD,8EAAoE;AAEpE,oDAAqD;AAGrD,+FAA+F;AAC/F,+FAA+F;AAC/F,8CAA8C;AAC9C;IAA4C,0CAAS;IAMjD;eACI,kBAAM,UAAU,CAAA,2LAGL,CAAC;IAChB,CAAC;IAED,4FAA4F;IAC5F,mEAAmE;IAC5D,wCAAO,GAAd;QACI,iBAAM,OAAO,WAAE,CAAC;IACpB,CAAC;IAEM,qCAAI,GAAX,UAAY,MAA6B;QACrC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;QACjG,IAAI,CAAC,mBAAmB;aACnB,WAAW,CAAC,IAAI,CAAC;aACjB,iBAAiB,CAAI,WAAW,kBAAe,CAAC,CAAC;IAC1D,CAAC;IAEM,qDAAoB,GAA3B,UAA4B,WAAgB;QAA5C,iBAcC;QAbG,IAAI,CAAC,WAAW,EAAE;YACd,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YACtC,OAAO;SACV;QAED,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,UAAA,cAAc;YAC3C,uDAAuD;YACvD,2BAA2B;YAC3B,IAAI,cAAc,CAAC,gBAAgB,EAAE;gBACjC,IAAM,aAAa,GAAG,cAAc,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;gBACnE,KAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;aACpD;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAxCmC;QAAnC,kCAAW,CAAC,qBAAqB,CAAC;uEAA+C;IACnD;QAA9B,mBAAS,CAAC,kBAAkB,CAAC;oEAA4C;IAwC9E,6BAAC;CA1CD,AA0CC,CA1C2C,qBAAS,GA0CpD;AA1CY,wDAAsB","file":"readOnlyFloatingFilter.js","sourcesContent":["import { IFloatingFilterComp, IFloatingFilterParams } from '../floatingFilter';\nimport { Component } from '../../../widgets/component';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { Autowired } from '../../../context/context';\nimport { ColumnController } from '../../../columnController/columnController';\n\n// optional floating filter for user provided filters - instead of providing a floating filter,\n// they can provide a getModelAsString() method on the filter instead. this class just displays\n// the string returned from getModelAsString()\nexport class ReadOnlyFloatingFilter extends Component implements IFloatingFilterComp {\n    @RefSelector('eFloatingFilterText') private eFloatingFilterText: AgInputTextField;\n    @Autowired('columnController') private columnController: ColumnController;\n\n    private params: IFloatingFilterParams;\n\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eFloatingFilterText\"></ag-input-text-field>\n            </div>`);\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IFloatingFilterParams): void {\n        this.params = params;\n        const displayName = this.columnController.getDisplayNameForColumn(params.column, 'header', true);\n        this.eFloatingFilterText\n            .setDisabled(true)\n            .setInputAriaLabel(`${displayName} Filter Input`);\n    }\n\n    public onParentModelChanged(parentModel: any): void {\n        if (!parentModel) {\n            this.eFloatingFilterText.setValue('');\n            return;\n        }\n\n        this.params.parentFilterInstance(filterInstance => {\n            // getModelAsString should be present, as we check this\n            // in floatingFilterWrapper\n            if (filterInstance.getModelAsString) {\n                const modelAsString = filterInstance.getModelAsString(parentModel);\n                this.eFloatingFilterText.setValue(modelAsString);\n            }\n        });\n    }\n}\n"]}