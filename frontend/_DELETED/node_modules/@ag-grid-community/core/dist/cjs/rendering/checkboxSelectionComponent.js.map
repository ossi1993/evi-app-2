{"version":3,"sources":["../../src/ts/rendering/checkboxSelectionComponent.ts"],"names":[],"mappings":"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","file":"checkboxSelectionComponent.js","sourcesContent":["import { AgCheckbox } from '../widgets/agCheckbox';\nimport { Autowired } from '../context/context';\nimport { Column } from '../entities/column';\nimport { Component } from '../widgets/component';\nimport { Events } from '../events';\nimport { GridOptionsWrapper } from '../gridOptionsWrapper';\nimport { IsRowSelectable } from '../entities/gridOptions';\nimport { RefSelector } from '../widgets/componentAnnotations';\nimport { RowNode } from '../entities/rowNode';\nimport { _ } from '../utils';\n\nexport class CheckboxSelectionComponent extends Component {\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n\n    @RefSelector('eCheckbox') private eCheckbox: AgCheckbox;\n\n    private rowNode: RowNode;\n    private column: Column;\n    private isRowSelectableFunc: IsRowSelectable;\n\n    constructor() {\n        super(/* html*/`\n            <div class=\"ag-selection-checkbox\">\n                <ag-checkbox role=\"presentation\" ref=\"eCheckbox\"></ag-checkbox>\n            </div>`\n        );\n    }\n\n    private onDataChanged(): void {\n        // when rows are loaded for the second time, this can impact the selection, as a row\n        // could be loaded as already selected (if user scrolls down, and then up again).\n        this.onSelectionChanged();\n    }\n\n    private onSelectableChanged(): void {\n        this.showOrHideSelect();\n    }\n\n    private onSelectionChanged(): void {\n        const state = this.rowNode.isSelected();\n\n        this.eCheckbox.setValue(state, true);\n    }\n\n    private onCheckedClicked(): number {\n        const groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();\n        const updatedCount = this.rowNode.setSelectedParams({ newValue: false, groupSelectsFiltered: groupSelectsFiltered });\n        return updatedCount;\n    }\n\n    private onUncheckedClicked(event: MouseEvent): number {\n        const groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();\n        const updatedCount = this.rowNode.setSelectedParams({ newValue: true, rangeSelect: event.shiftKey, groupSelectsFiltered: groupSelectsFiltered });\n        return updatedCount;\n    }\n\n    public init(params: any): void {\n        this.rowNode = params.rowNode;\n        this.column = params.column;\n\n        this.onSelectionChanged();\n\n        // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row\n        // would possibly get selected twice\n        this.addGuiEventListener('click', event => _.stopPropagationForAgGrid(event));\n        // likewise we don't want double click on this icon to open a group\n        this.addGuiEventListener('dblclick', event => _.stopPropagationForAgGrid(event));\n\n        this.addManagedListener(this.eCheckbox, AgCheckbox.EVENT_CHANGED, (params) => {\n            if (params.selected) {\n                this.onUncheckedClicked(params.event || {});\n            } else {\n                this.onCheckedClicked();\n            }\n        });\n\n        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));\n        this.addManagedListener(this.rowNode, RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));\n\n        this.isRowSelectableFunc = this.gridOptionsWrapper.getIsRowSelectableFunc();\n        const checkboxVisibleIsDynamic = this.isRowSelectableFunc || this.checkboxCallbackExists();\n        if (checkboxVisibleIsDynamic) {\n            this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelect.bind(this));\n            this.showOrHideSelect();\n        }\n\n        this.eCheckbox.setInputAriaLabel('Toggle Row Selection');\n    }\n\n    private showOrHideSelect(): void {\n        // if the isRowSelectable() is not provided the row node is selectable by default\n        let selectable = this.rowNode.selectable;\n\n        // checkboxSelection callback is deemed a legacy solution however we will still consider it's result.\n        // If selectable, then also check the colDef callback. if not selectable, this it short circuits - no need\n        // to call the colDef callback.\n        if (selectable && this.checkboxCallbackExists()) {\n            selectable = this.column.isCellCheckboxSelection(this.rowNode);\n        }\n\n        // show checkbox if both conditions are true\n        this.setDisplayed(selectable);\n    }\n\n    private checkboxCallbackExists(): boolean {\n        // column will be missing if groupUseEntireRow=true\n        const colDef = this.column ? this.column.getColDef() : null;\n        return colDef && typeof colDef.checkboxSelection === 'function';\n    }\n}\n"]}