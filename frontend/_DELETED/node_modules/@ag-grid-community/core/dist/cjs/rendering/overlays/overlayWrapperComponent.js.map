{"version":3,"sources":["../../src/ts/rendering/overlays/overlayWrapperComponent.ts"],"names":[],"mappings":"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","file":"overlayWrapperComponent.js","sourcesContent":["import { GridOptionsWrapper } from '../../gridOptionsWrapper';\nimport { Autowired, PostConstruct } from '../../context/context';\nimport { Component } from '../../widgets/component';\nimport { UserComponentFactory } from '../../components/framework/userComponentFactory';\nimport { RefSelector } from '../../widgets/componentAnnotations';\nimport { ILoadingOverlayComp } from './loadingOverlayComponent';\nimport { _, Promise } from '../../utils';\nimport { INoRowsOverlayComp } from './noRowsOverlayComponent';\n\nenum LoadingType { Loading, NoRows }\n\nexport class OverlayWrapperComponent extends Component {\n\n    // wrapping in outer div, and wrapper, is needed to center the loading icon\n    // The idea for centering came from here: http://www.vanseodesign.com/css/vertical-centering/\n    private static TEMPLATE = /* html */`\n        <div class=\"ag-overlay\" aria-hidden=\"true\">\n            <div class=\"ag-overlay-panel\">\n                <div class=\"ag-overlay-wrapper\" ref=\"eOverlayWrapper\"></div>\n            </div>\n        </div>`;\n\n    @Autowired('gridOptionsWrapper') gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('userComponentFactory') userComponentFactory: UserComponentFactory;\n\n    @RefSelector('eOverlayWrapper') eOverlayWrapper: HTMLElement;\n\n    private activeOverlay: ILoadingOverlayComp;\n    private inProgress = false;\n    private destroyRequested = false;\n\n    constructor() {\n        super(OverlayWrapperComponent.TEMPLATE);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.gridOptionsWrapper.addLayoutElement(this.eOverlayWrapper);\n        this.setDisplayed(false);\n    }\n\n    private setWrapperTypeClass(loadingType: LoadingType): void {\n        _.addOrRemoveCssClass(this.eOverlayWrapper, 'ag-overlay-loading-wrapper', loadingType === LoadingType.Loading);\n        _.addOrRemoveCssClass(this.eOverlayWrapper, 'ag-overlay-no-rows-wrapper', loadingType === LoadingType.NoRows);\n    }\n\n    public showLoadingOverlay(): void {\n        const workItem = this.userComponentFactory.newLoadingOverlayComponent({\n            api: this.gridOptionsWrapper.getApi()\n        });\n\n        this.showOverlay(workItem, LoadingType.Loading);\n    }\n\n    public showNoRowsOverlay(): void {\n        const workItem = this.userComponentFactory.newNoRowsOverlayComponent({\n            api: this.gridOptionsWrapper.getApi()\n        });\n\n        this.showOverlay(workItem, LoadingType.NoRows);\n    }\n\n    private showOverlay(workItem: Promise<ILoadingOverlayComp | INoRowsOverlayComp>, type: LoadingType): void {\n        if (this.inProgress) {\n            return;\n        }\n\n        this.setWrapperTypeClass(type);\n        this.destroyActiveOverlay();\n\n        this.inProgress = true;\n\n        workItem.then(comp => {\n            this.inProgress = false;\n\n            this.eOverlayWrapper.appendChild(comp.getGui());\n            this.activeOverlay = comp;\n\n            if (this.destroyRequested) {\n                this.destroyRequested = false;\n                this.destroyActiveOverlay();\n            }\n        });\n\n        this.setDisplayed(true);\n    }\n\n    private destroyActiveOverlay(): void {\n        if (this.inProgress) {\n            this.destroyRequested = true;\n            return;\n        }\n\n        if (!this.activeOverlay) {\n            return;\n        }\n\n        this.activeOverlay = this.getContext().destroyBean(this.activeOverlay);\n\n        _.clearElement(this.eOverlayWrapper);\n    }\n\n    public hideOverlay(): void {\n        this.destroyActiveOverlay();\n        this.setDisplayed(false);\n    }\n\n    public destroy(): void {\n        this.destroyActiveOverlay();\n        super.destroy();\n    }\n}\n"]}