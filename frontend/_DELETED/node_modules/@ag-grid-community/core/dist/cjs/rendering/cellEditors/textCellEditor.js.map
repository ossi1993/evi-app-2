{"version":3,"sources":["../../src/ts/rendering/cellEditors/textCellEditor.ts"],"names":[],"mappings":"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","file":"textCellEditor.js","sourcesContent":["import { Constants } from \"../../constants\";\nimport { PopupComponent } from \"../../widgets/popupComponent\";\nimport { ICellEditorComp, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { AgInputTextField } from \"../../widgets/agInputTextField\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { _ } from '../../utils';\n\n/**\n * useFormatter: used when the cell value needs formatting prior to editing, such as when using reference data and you\n *               want to display text rather than code.\n*/\nexport interface ITextCellEditorParams extends ICellEditorParams {\n    useFormatter: boolean;\n}\n\nexport class TextCellEditor extends PopupComponent implements ICellEditorComp {\n\n    private static TEMPLATE = '<div class=\"ag-cell-edit-wrapper\"><ag-input-text-field class=\"ag-cell-editor\" ref=\"eInput\"></ag-input-text-field></div>';\n\n    private highlightAllOnFocus: boolean;\n    private focusAfterAttached: boolean;\n    \n    protected params: ICellEditorParams;\n    @RefSelector('eInput') protected eInput: AgInputTextField;\n\n    constructor() {\n        super(TextCellEditor.TEMPLATE);\n    }\n\n    public init(params: ITextCellEditorParams): void {\n        this.params = params;\n\n        const eInput = this.eInput;\n        let startValue: string;\n\n        // cellStartedEdit is only false if we are doing fullRow editing\n        if (params.cellStartedEdit) {\n            this.focusAfterAttached = true;\n\n            const keyPressBackspaceOrDelete =\n                params.keyPress === Constants.KEY_BACKSPACE\n                || params.keyPress === Constants.KEY_DELETE;\n\n            if (keyPressBackspaceOrDelete) {\n                startValue = '';\n            } else if (params.charPress) {\n                startValue = params.charPress;\n            } else {\n                startValue = this.getStartValue(params);\n                if (params.keyPress !== Constants.KEY_F2) {\n                    this.highlightAllOnFocus = true;\n                }\n            }\n\n        } else {\n            this.focusAfterAttached = false;\n            startValue = this.getStartValue(params);\n        }\n\n        if (_.exists(startValue)) {\n            eInput.setValue(startValue, true);\n        }\n\n        this.addManagedListener(eInput.getGui(), 'keydown', (event: KeyboardEvent) => {\n            const pageUp = event.keyCode === Constants.KEY_PAGE_UP;\n            const pageDown = event.keyCode === Constants.KEY_PAGE_DOWN;\n            if (pageUp || pageDown) {\n                event.preventDefault();\n            }\n        });\n    }\n\n    public afterGuiAttached(): void {\n        if (!this.focusAfterAttached) { return; }\n\n        const eInput = this.eInput;\n        // Added for AG-3238. We can't remove this explicit focus() because Chrome requires an input\n        // to be focused before setSelectionRange will work. But it triggers a bug in Safari where\n        // explicitly focusing then blurring an empty field will cause the parent container to scroll.\n        if (!_.isBrowserSafari()) {\n            eInput.getFocusableElement().focus();\n        }\n\n        const inputEl = eInput.getInputElement() as HTMLInputElement;\n\n        if (this.highlightAllOnFocus) {\n            inputEl.select();\n        } else {\n            // when we started editing, we want the caret at the end, not the start.\n            // this comes into play in two scenarios: a) when user hits F2 and b)\n            // when user hits a printable character, then on IE (and only IE) the caret\n            // was placed after the first character, thus 'apply' would end up as 'pplea'\n            const value = eInput.getValue();\n            const len = (_.exists(value) && value.length) || 0;\n\n            if (len) {\n                inputEl.setSelectionRange(len, len);\n            }\n        }\n    }\n\n    // gets called when tabbing trough cells and in full row edit mode\n    public focusIn(): void {\n        const eInput = this.eInput;\n        const focusEl = eInput.getFocusableElement();\n        const inputEl = eInput.getInputElement() as HTMLInputElement;\n\n        focusEl.focus();\n        inputEl.select();\n    }\n\n    public focusOut(): void {\n        const inputEl = this.eInput.getInputElement() as HTMLInputElement;\n        if (_.isBrowserIE()) {\n            inputEl.setSelectionRange(0, 0);\n        }\n    }\n\n    public getValue(): any {\n        const eInput = this.eInput;\n        return this.params.parseValue(eInput.getValue());\n    }\n\n    private getStartValue(params: ITextCellEditorParams) {\n        const formatValue = params.useFormatter || params.column.getColDef().refData;\n        return formatValue ? params.formatValue(params.value) : params.value;\n    }\n    public isPopup() {\n        return false;\n    }\n}\n"]}