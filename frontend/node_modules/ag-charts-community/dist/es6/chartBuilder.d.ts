import { ChartOptions, CartesianChartOptions, PolarChartOptions, SeriesOptions, BarSeriesOptions, LineSeriesOptions, ScatterSeriesOptions, AreaSeriesOptions, PieSeriesOptions, HistogramSeriesOptions, LegendOptions, CaptionOptions, FontWeight, DropShadowOptions, AxisOptions, SeriesLabelOptions, MarkerOptions, HighlightOptions, AxisType, NavigatorOptions, NavigatorHandleOptions, NavigatorMaskOptions } from "./chartOptions";
import { CartesianChart } from "./chart/cartesianChart";
import { PolarChart } from "./chart/polarChart";
import { LineSeries } from "./chart/series/cartesian/lineSeries";
import { ScatterSeries } from "./chart/series/cartesian/scatterSeries";
import { BarSeries } from "./chart/series/cartesian/barSeries";
import { AreaSeries } from "./chart/series/cartesian/areaSeries";
import { HistogramSeries } from "./chart/series/cartesian/histogramSeries";
import { PieSeries } from "./chart/series/polar/pieSeries";
import { Chart } from "./chart/chart";
import { Series, HighlightStyle } from "./chart/series/series";
import { SeriesMarker } from "./chart/series/seriesMarker";
import { DropShadow } from "./scene/dropShadow";
import { CategoryAxis } from "./chart/axis/categoryAxis";
import { NumberAxis } from "./chart/axis/numberAxis";
import { Legend } from "./chart/legend";
import { Caption } from "./caption";
import { GroupedCategoryAxis } from "./chart/axis/groupedCategoryAxis";
import { GroupedCategoryChart } from "./chart/groupedCategoryChart";
import { TimeAxis } from "./chart/axis/timeAxis";
import { Navigator } from "./chart/navigator/navigator";
import { NavigatorHandle } from "./chart/navigator/navigatorHandle";
import { NavigatorMask } from "./chart/navigator/navigatorMask";
export declare class ChartBuilder {
    private static createCartesianChart;
    private static createGroupedCategoryChart;
    static createBarChart(container: HTMLElement, options: CartesianChartOptions<BarSeriesOptions>): CartesianChart;
    static createGroupedBarChart(container: HTMLElement, options: CartesianChartOptions<BarSeriesOptions>): GroupedCategoryChart;
    static createColumnChart(container: HTMLElement, options: CartesianChartOptions<BarSeriesOptions>): CartesianChart;
    static createGroupedColumnChart(container: HTMLElement, options: CartesianChartOptions<BarSeriesOptions>): GroupedCategoryChart;
    static createLineChart(container: HTMLElement, options: CartesianChartOptions<LineSeriesOptions>): CartesianChart;
    static createGroupedLineChart(container: HTMLElement, options: CartesianChartOptions<LineSeriesOptions>): GroupedCategoryChart;
    static createScatterChart(container: HTMLElement, options: CartesianChartOptions<ScatterSeriesOptions>): CartesianChart;
    static createAreaChart(container: HTMLElement, options: CartesianChartOptions<AreaSeriesOptions>): CartesianChart;
    static createGroupedAreaChart(container: HTMLElement, options: CartesianChartOptions<AreaSeriesOptions>): GroupedCategoryChart;
    static createHistogramChart(container: HTMLElement, options: CartesianChartOptions<AreaSeriesOptions>): CartesianChart;
    private static createPolarChart;
    static createDoughnutChart(container: HTMLElement, options: PolarChartOptions<PieSeriesOptions>): PolarChart;
    static createPieChart(container: HTMLElement, options: PolarChartOptions<PieSeriesOptions>): PolarChart;
    static createSeries(options: SeriesOptions): Series;
    static initCartesianChart<C extends CartesianChart, T extends SeriesOptions>(chart: C, options: CartesianChartOptions<T>): C;
    static initChart<C extends Chart, T extends SeriesOptions>(chart: C, options: ChartOptions<T>): C;
    static initSeries<S extends Series>(series: S, options: SeriesOptions): S;
    static initLineSeries(series: LineSeries, options: LineSeriesOptions): LineSeries;
    static initScatterSeries(series: ScatterSeries, options: ScatterSeriesOptions): ScatterSeries;
    static initLabelOptions(series: SeriesLabelOptions, options: SeriesLabelOptions): void;
    static initBarSeries(series: BarSeries, options: BarSeriesOptions): BarSeries;
    static initAreaSeries(series: AreaSeries, options: AreaSeriesOptions): AreaSeries;
    static initPieSeries(series: PieSeries, options: PieSeriesOptions): PieSeries;
    static initHistogramSeries(series: HistogramSeries, options: HistogramSeriesOptions): HistogramSeries;
    private static markerShapes;
    private static getMarkerByName;
    static initLegend(legend: Legend, options: LegendOptions): void;
    static initNavigator(navigator: Navigator, options: NavigatorOptions): void;
    static initNavigatorMask(mask: NavigatorMask, options: NavigatorMaskOptions): void;
    static initNavigatorHandle(handle: NavigatorHandle, options: NavigatorHandleOptions): void;
    static initMarker(marker: SeriesMarker, options: MarkerOptions): void;
    static initHighlightStyle(highlightStyle: HighlightStyle, options: HighlightOptions): void;
    static setDefaultFontOptions(options: CaptionOptions, fontSize?: number, fontWeight?: FontWeight, fontFamily?: string): void;
    static createTitle(options: CaptionOptions): Caption;
    static createSubtitle(options: CaptionOptions): Caption;
    static createPieTitle(options: CaptionOptions): Caption;
    static createCaption(options: CaptionOptions): Caption;
    static createDropShadow: (options?: DropShadowOptions) => DropShadow;
    static initAxis<T extends NumberAxis | CategoryAxis | GroupedCategoryAxis>(axis: T, options: AxisOptions): void;
    static createNumberAxis(options: AxisOptions): NumberAxis;
    static createCategoryAxis(options: AxisOptions): CategoryAxis;
    static createGroupedCategoryAxis(options: AxisOptions): GroupedCategoryAxis;
    static createTimeAxis(options: AxisOptions): TimeAxis;
    static createAxis(options: AxisOptions, defaultType: AxisType): CategoryAxis | NumberAxis | TimeAxis;
    static readonly types: Map<AxisType, typeof CategoryAxis | typeof NumberAxis | typeof TimeAxis>;
    static toAxisClass(type: AxisType): typeof CategoryAxis | typeof NumberAxis | typeof TimeAxis;
    private static setValueIfExists;
    private static setTransformedValueIfExists;
}
