{"version":3,"sources":["../../src/ts/headerRendering/header/headerNavigationService.ts"],"names":[],"mappings":"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","file":"headerNavigationService.js","sourcesContent":["import { Bean, Autowired } from \"../../context/context\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { HeaderContainer } from \"../headerContainer\";\nimport { FocusController } from \"../../focusController\";\nimport { HeaderPosition, HeaderPositionUtils } from \"./headerPosition\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { Column } from \"../../entities/column\";\nimport { HeaderRowType } from \"../headerRowComp\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { GridPanel } from \"../../gridPanel/gridPanel\";\nimport { AnimationFrameService } from \"../../misc/animationFrameService\";\nimport { HeaderRootComp, HeaderContainerPosition } from \"../headerRootComp\";\nimport { _ } from \"../../utils\";\n\nexport enum HeaderNavigationDirection {\n    UP,\n    DOWN,\n    LEFT,\n    RIGHT\n}\n\n@Bean('headerNavigationService')\nexport class HeaderNavigationService extends BeanStub {\n\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('focusController') private focusController: FocusController;\n    @Autowired('headerPositionUtils') private headerPositionUtils: HeaderPositionUtils;\n    @Autowired('animationFrameService') private animationFrameService: AnimationFrameService;\n\n    private gridPanel: GridPanel;\n    private headerRoot: HeaderRootComp;\n\n    public registerGridComp(gridPanel: GridPanel): void {\n        this.gridPanel = gridPanel;\n    }\n\n    public registerHeaderRoot(headerRoot: HeaderRootComp): void {\n        this.headerRoot = headerRoot;\n    }\n\n    public getHeaderRowCount(): number {\n        const headerContainers = this.headerRoot.getHeaderContainers();\n\n        return headerContainers.size === 0 ? 0 : this.getHeaderContainer().getRowComps().length;\n    }\n\n    public getHeaderRowType(idx: number): HeaderRowType {\n        if (this.getHeaderRowCount()) {\n            return this.getHeaderContainer().getRowComps()[idx].getType();\n        }\n    }\n\n    public getHeaderContainer(position: HeaderContainerPosition = 'center'): HeaderContainer {\n        if (position === null) {\n            position = 'center';\n        }\n        return this.headerRoot.getHeaderContainers().get(position);\n    }\n\n    /*\n     * This method navigates grid header vertically\n     * @return {boolean} true to preventDefault on the event that caused this navigation.\n     */\n    public navigateVertically(direction: HeaderNavigationDirection, fromHeader?: HeaderPosition): boolean {\n        if (!fromHeader) {\n            fromHeader = this.focusController.getFocusedHeader();\n        }\n\n        if (!fromHeader) { return false; }\n\n        const { headerRowIndex, column } = fromHeader;\n        const rowLen = this.getHeaderRowCount();\n        const isUp = direction === HeaderNavigationDirection.UP ;\n        const nextRow = isUp ?  headerRowIndex - 1 : headerRowIndex + 1;\n\n        if (nextRow < 0) { return false; }\n\n        if (nextRow >= rowLen) {\n            // focusGridView returns false when the grid has no cells rendered.\n            return this.focusController.focusGridView();\n        }\n\n        const currentRowType = this.getHeaderRowType(headerRowIndex);\n\n        let nextFocusColumn: ColumnGroup | Column;\n\n        if (currentRowType === HeaderRowType.COLUMN_GROUP) {\n            const currentColumn = column as ColumnGroup;\n            nextFocusColumn = isUp ? column.getParent() : currentColumn.getDisplayedChildren()[0] as ColumnGroup;\n        } else if (currentRowType === HeaderRowType.FLOATING_FILTER) {\n            nextFocusColumn = column;\n        } else {\n            const currentColumn = column as Column;\n            nextFocusColumn = isUp ? currentColumn.getParent() : currentColumn;\n        }\n\n        if (!nextFocusColumn) { return false; }\n\n        this.focusController.focusHeaderPosition({\n            headerRowIndex: nextRow,\n            column: nextFocusColumn\n        });\n\n        return true;\n    }\n\n    /*\n     * This method navigates grid header horizontally\n     * @return {boolean} true to preventDefault on the event that caused this navigation.\n     */\n    public navigateHorizontally(direction: HeaderNavigationDirection, fromTab?: boolean): boolean {\n        const focusedHeader = this.focusController.getFocusedHeader();\n        const isLeft = direction === HeaderNavigationDirection.LEFT;\n        const isRtl = this.gridOptionsWrapper.isEnableRtl();\n        let nextHeader: HeaderPosition;\n        let normalisedDirection: 'Before' |  'After';\n\n        // either navigating to the left or isRtl (cannot be both)\n        if (isLeft !== isRtl) {\n            normalisedDirection = 'Before';\n            nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);\n        } else {\n            normalisedDirection = 'After';\n            nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);\n        }\n\n        if (nextHeader) {\n            this.focusController.focusHeaderPosition(nextHeader, normalisedDirection);\n            return true;\n        }\n\n        if (!fromTab) { return true; }\n\n        return this.focusNextHeaderRow(focusedHeader, normalisedDirection);\n    }\n\n    private focusNextHeaderRow(focusedHeader: HeaderPosition, direction: 'Before' | 'After'): boolean {\n        const currentIndex = focusedHeader.headerRowIndex;\n        let nextPosition: HeaderPosition;\n        let nextRowIndex: number;\n\n        if (direction === 'Before') {\n            if (currentIndex === 0) { return false; }\n            nextRowIndex = currentIndex - 1;\n            nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, 'end');\n        } else {\n            nextRowIndex = currentIndex + 1;\n            nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, 'start');\n        }\n\n        if (nextPosition) {\n            if (nextPosition.headerRowIndex === -1) {\n                return this.focusController.focusGridView(nextPosition.column as Column);\n            }\n\n            return this.focusController.focusHeaderPosition(nextPosition, direction);\n        }\n\n        return false;\n    }\n\n    public scrollToColumn(column: Column | ColumnGroup, direction: 'Before' | 'After' = 'After'): void {\n        if (column.getPinned()) { return; }\n        let columnToScrollTo: Column;\n\n        if (column instanceof ColumnGroup) {\n            const columns = column.getDisplayedLeafColumns();\n            columnToScrollTo = direction === 'Before' ? _.last(columns) : columns[0];\n        } else {\n            columnToScrollTo = column;\n        }\n\n        this.gridPanel.ensureColumnVisible(columnToScrollTo);\n\n        // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible\n        // floating cell, the scrolls get out of sync\n        this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter();\n\n        // need to flush frames, to make sure the correct cells are rendered\n        this.animationFrameService.flushAllFrames();\n    }\n}\n"]}