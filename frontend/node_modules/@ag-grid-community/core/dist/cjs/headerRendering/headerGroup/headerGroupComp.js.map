{"version":3,"sources":["../../src/ts/headerRendering/headerGroup/headerGroupComp.ts"],"names":[],"mappings":"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","file":"headerGroupComp.js","sourcesContent":["import { Component } from \"../../widgets/component\";\nimport { IComponent } from \"../../interfaces/iComponent\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { ColumnApi } from \"../../columnController/columnApi\";\nimport { ColumnController } from \"../../columnController/columnController\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { Autowired } from \"../../context/context\";\nimport { TouchListener } from \"../../widgets/touchListener\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { OriginalColumnGroup } from \"../../entities/originalColumnGroup\";\nimport { GridApi } from \"../../gridApi\";\nimport { _ } from \"../../utils\";\n\nexport interface IHeaderGroupParams {\n    columnGroup: ColumnGroup;\n    displayName: string;\n    setExpanded: (expanded: boolean) => void;\n    api: GridApi;\n    columnApi: ColumnApi;\n    context: any;\n}\n\nexport interface IHeaderGroup { }\n\nexport interface IHeaderGroupComp extends IHeaderGroup, IComponent<IHeaderGroupParams> { }\n\nexport class HeaderGroupComp extends Component implements IHeaderGroupComp {\n\n    @Autowired(\"columnController\") private columnController: ColumnController;\n    @Autowired(\"gridOptionsWrapper\") private gridOptionsWrapper: GridOptionsWrapper;\n\n    static TEMPLATE = /* html */\n        `<div class=\"ag-header-group-cell-label\" ref=\"agContainer\" role=\"presentation\">\n            <span ref=\"agLabel\" class=\"ag-header-group-text\" role=\"columnheader\"></span>\n            <span ref=\"agOpened\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded\"></span>\n            <span ref=\"agClosed\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed\"></span>\n        </div>`;\n\n    private params: IHeaderGroupParams;\n\n    @RefSelector(\"agOpened\") private eOpenIcon: HTMLElement;\n    @RefSelector(\"agClosed\") private eCloseIcon: HTMLElement;\n\n    constructor() {\n        super(HeaderGroupComp.TEMPLATE);\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IHeaderGroupParams): void {\n        this.params = params;\n\n        this.setupLabel();\n        this.addGroupExpandIcon();\n        this.setupExpandIcons();\n    }\n\n    private setupExpandIcons(): void {\n        this.addInIcon(\"columnGroupOpened\", \"agOpened\");\n        this.addInIcon(\"columnGroupClosed\", \"agClosed\");\n\n        const expandAction = (event: MouseEvent) => {\n            if (_.isStopPropagationForAgGrid(event)) {\n                return;\n            }\n\n            const newExpandedValue = !this.params.columnGroup.isExpanded();\n            this.columnController.setColumnGroupOpened(this.params.columnGroup.getOriginalColumnGroup(), newExpandedValue, \"uiColumnExpanded\");\n        };\n\n        this.addTouchAndClickListeners(this.eCloseIcon, expandAction);\n        this.addTouchAndClickListeners(this.eOpenIcon, expandAction);\n\n        const stopPropagationAction = (event: MouseEvent) => {\n            _.stopPropagationForAgGrid(event);\n        };\n\n        // adding stopPropagation to the double click for the icons prevents double click action happening\n        // when the icons are clicked. if the icons are double clicked, then the groups should open and\n        // then close again straight away. if we also listened to double click, then the group would open,\n        // close, then open, which is not what we want. double click should only action if the user double\n        // clicks outside of the icons.\n        this.addManagedListener(this.eCloseIcon, \"dblclick\", stopPropagationAction);\n        this.addManagedListener(this.eOpenIcon, \"dblclick\", stopPropagationAction);\n\n        this.addManagedListener(this.getGui(), \"dblclick\", expandAction);\n\n        this.updateIconVisibility();\n\n        const originalColumnGroup = this.params.columnGroup.getOriginalColumnGroup();\n        this.addManagedListener(originalColumnGroup, OriginalColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));\n        this.addManagedListener(originalColumnGroup, OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));\n    }\n\n    private addTouchAndClickListeners(eElement: HTMLElement, action: (event: MouseEvent) => void): void {\n        const touchListener = new TouchListener(eElement);\n\n        this.addManagedListener(touchListener, TouchListener.EVENT_TAP, action);\n        this.addDestroyFunc(() => touchListener.destroy());\n        this.addManagedListener(eElement, \"click\", action);\n    }\n\n    private updateIconVisibility(): void {\n        const columnGroup = this.params.columnGroup;\n        if (columnGroup.isExpandable()) {\n            const expanded = this.params.columnGroup.isExpanded();\n            _.setDisplayed(this.eOpenIcon, expanded);\n            _.setDisplayed(this.eCloseIcon, !expanded);\n        } else {\n            _.setDisplayed(this.eOpenIcon, false);\n            _.setDisplayed(this.eCloseIcon, false);\n        }\n    }\n\n    private addInIcon(iconName: string, refName: string): void {\n        const eIcon = _.createIconNoSpan(iconName, this.gridOptionsWrapper, null);\n        this.getRefElement(refName).appendChild(eIcon);\n    }\n\n    private addGroupExpandIcon() {\n        if (!this.params.columnGroup.isExpandable()) {\n            _.setDisplayed(this.eOpenIcon, false);\n            _.setDisplayed(this.eCloseIcon, false);\n            return;\n        }\n    }\n\n    private setupLabel(): void {\n        // no renderer, default text render\n        const displayName = this.params.displayName;\n\n        if (_.exists(displayName)) {\n            const displayNameSanitised = _.escape(displayName);\n            this.getRefElement(\"agLabel\").innerHTML = displayNameSanitised;\n        }\n    }\n}\n"]}