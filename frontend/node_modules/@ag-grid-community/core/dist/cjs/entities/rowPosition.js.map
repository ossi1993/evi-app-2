{"version":3,"sources":["../../src/ts/entities/rowPosition.ts"],"names":[],"mappings":"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","file":"rowPosition.js","sourcesContent":["import { Autowired, Bean } from \"../context/context\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Constants } from \"../constants\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { RowNode } from \"./rowNode\";\nimport { PinnedRowModel } from \"../pinnedRowModel/pinnedRowModel\";\nimport { RowRenderer } from \"../rendering/rowRenderer\";\nimport { _ } from \"../utils\";\n\nexport interface RowPosition {\n    rowIndex: number;\n    rowPinned: string | undefined;\n}\n\n@Bean('rowPositionUtils')\nexport class RowPositionUtils extends BeanStub {\n\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('pinnedRowModel') private pinnedRowModel: PinnedRowModel;\n\n    public getFirstRow(): RowPosition {\n        const rowIndex = 0;\n        let rowPinned;\n\n        if (this.pinnedRowModel.getPinnedTopRowCount()) {\n            rowPinned = Constants.PINNED_TOP;\n        } else if (this.rowModel.getRowCount()) {\n            rowPinned = null;\n        } else if (this.pinnedRowModel.getPinnedBottomRowCount()) {\n            rowPinned = Constants.PINNED_BOTTOM;\n        }\n\n        return rowPinned === undefined ? null : { rowIndex, rowPinned };\n    }\n\n    public getRowNode(gridRow: RowPosition): RowNode | null {\n        switch (gridRow.rowPinned) {\n            case Constants.PINNED_TOP:\n                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n            case Constants.PINNED_BOTTOM:\n                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n            default:\n                return this.rowModel.getRow(gridRow.rowIndex);\n        }\n    }\n\n    public sameRow(rowA: RowPosition | undefined, rowB: RowPosition | undefined): boolean {\n        // if both missing\n        if (!rowA && !rowB) { return true; }\n        // if only one missing\n        if ((rowA && !rowB) || (!rowA && rowB)) { return false; }\n        // otherwise compare (use == to compare rowPinned because it can be null or undefined)\n        return rowA.rowIndex === rowB.rowIndex && rowA.rowPinned == rowB.rowPinned;\n    }\n\n    // tests if this row selection is before the other row selection\n    public before(rowA: RowPosition, rowB: RowPosition): boolean {\n        switch (rowA.rowPinned) {\n            case Constants.PINNED_TOP:\n                // we we are floating top, and other isn't, then we are always before\n                if (rowB.rowPinned !== Constants.PINNED_TOP) { return true; }\n                break;\n            case Constants.PINNED_BOTTOM:\n                // if we are floating bottom, and the other isn't, then we are never before\n                if (rowB.rowPinned !== Constants.PINNED_BOTTOM) { return false; }\n                break;\n            default:\n                // if we are not floating, but the other one is floating...\n                if (_.exists(rowB.rowPinned)) {\n                    return rowB.rowPinned !== Constants.PINNED_TOP;\n                }\n                break;\n        }\n        return rowA.rowIndex < rowB.rowIndex;\n    }\n}\n"]}