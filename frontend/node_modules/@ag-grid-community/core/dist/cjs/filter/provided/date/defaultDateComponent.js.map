{"version":3,"sources":["../../src/ts/filter/provided/date/defaultDateComponent.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wDAAuD;AAEvD,8EAAoE;AACpE,4CAA6E;AAC7E,kDAAwF;AAExF;IAA0C,wCAAS;IAK/C;eACI,kBAAM,UAAU,CAAA,6KAGL,CACV;IACL,CAAC;IAED,4FAA4F;IAC5F,mEAAmE;IAC5D,sCAAO,GAAd;QACI,iBAAM,OAAO,WAAE,CAAC;IACpB,CAAC;IAEM,mCAAI,GAAX,UAAY,MAAmB;QAA/B,iBAgBC;QAfG,IAAI,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,EAAE;YACzC,IAAI,qBAAW,EAAE,EAAE;gBACf,OAAO,CAAC,IAAI,CAAC,wHAAwH,CAAC,CAAC;aAC1I;iBAAM;gBACF,IAAI,CAAC,UAAU,CAAC,eAAe,EAAuB,CAAC,IAAI,GAAG,MAAM,CAAC;aACzE;SACJ;QAED,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,aAAa,CAAC;QAErC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,EAAE,OAAO,EAAE,UAAA,CAAC;YACjE,IAAI,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,aAAa,EAAE;gBAAE,OAAO;aAAE;YAEpD,KAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,sCAAO,GAAd;QACI,OAAO,8BAAuB,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC/D,CAAC;IAEM,sCAAO,GAAd,UAAe,IAAU;QACrB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,oBAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;IACzD,CAAC;IAEM,kDAAmB,GAA1B,UAA2B,WAAmB;QAC1C,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC;IAEO,yDAA0B,GAAlC,UAAmC,MAAmB;QAClD,IAAI,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,YAAY,CAAC,iBAAiB,IAAI,IAAI,EAAE;YACtE,OAAO,MAAM,CAAC,YAAY,CAAC,iBAAiB,CAAC;SAChD;aAAM;YACH,OAAO,yBAAe,EAAE,IAAI,0BAAgB,EAAE,CAAC;SAClD;IACL,CAAC;IAtD0B;QAA1B,kCAAW,CAAC,YAAY,CAAC;4DAAsC;IAuDpE,2BAAC;CAxDD,AAwDC,CAxDyC,qBAAS,GAwDlD;AAxDY,oDAAoB","file":"defaultDateComponent.js","sourcesContent":["import { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { Component } from '../../../widgets/component';\nimport { IDateComp, IDateParams } from '../../../rendering/dateComponent';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { serialiseDate, parseDateTimeFromString } from '../../../utils/date';\nimport { isBrowserChrome, isBrowserFirefox, isBrowserIE } from '../../../utils/browser';\n\nexport class DefaultDateComponent extends Component implements IDateComp {\n    @RefSelector('eDateInput') private eDateInput: AgInputTextField;\n\n    private listener: () => void;\n\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-filter-filter\">\n                <ag-input-text-field class=\"ag-date-filter\" ref=\"eDateInput\"></ag-input-text-field>\n            </div>`\n        );\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    public destroy(): void {\n        super.destroy();\n    }\n\n    public init(params: IDateParams): void {\n        if (this.shouldUseBrowserDatePicker(params)) {\n            if (isBrowserIE()) {\n                console.warn('ag-grid: browserDatePicker is specified to true, but it is not supported in IE 11, reverting to plain text date picker');\n            } else {\n                (this.eDateInput.getInputElement() as HTMLInputElement).type = 'date';\n            }\n        }\n\n        this.listener = params.onDateChanged;\n\n        this.addManagedListener(this.eDateInput.getInputElement(), 'input', e => {\n            if (e.target !== document.activeElement) { return; }\n\n            this.listener();\n        });\n    }\n\n    public getDate(): Date {\n        return parseDateTimeFromString(this.eDateInput.getValue());\n    }\n\n    public setDate(date: Date): void {\n        this.eDateInput.setValue(serialiseDate(date, false));\n    }\n\n    public setInputPlaceholder(placeholder: string): void {\n        this.eDateInput.setInputPlaceholder(placeholder);\n    }\n\n    private shouldUseBrowserDatePicker(params: IDateParams): boolean {\n        if (params.filterParams && params.filterParams.browserDatePicker != null) {\n            return params.filterParams.browserDatePicker;\n        } else {\n            return isBrowserChrome() || isBrowserFirefox();\n        }\n    }\n}\n"]}