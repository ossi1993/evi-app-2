{"version":3,"sources":["../../src/ts/filter/provided/date/dateFloatingFilter.ts"],"names":[],"mappings":"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","file":"dateFloatingFilter.js","sourcesContent":["import { DateFilter, DateFilterModel } from './dateFilter';\nimport { Autowired } from '../../../context/context';\nimport { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport { IDateParams } from '../../../rendering/dateComponent';\nimport { IFloatingFilterParams } from '../../floating/floatingFilter';\nimport { DateCompWrapper } from './dateCompWrapper';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { SimpleFilter, ISimpleFilterModel } from '../simpleFilter';\nimport { SimpleFloatingFilter } from '../../floating/provided/simpleFloatingFilter';\nimport { FilterChangedEvent } from '../../../events';\nimport { ProvidedFilter } from '../providedFilter';\nimport { AgInputTextField } from '../../../widgets/agInputTextField';\nimport { setDisplayed } from '../../../utils/dom';\nimport { parseDateTimeFromString, serialiseDate } from '../../../utils/date';\nimport { debounce } from '../../../utils/function';\n\nexport class DateFloatingFilter extends SimpleFloatingFilter {\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n\n    @RefSelector('eReadOnlyText') private eReadOnlyText: AgInputTextField;\n    @RefSelector('eDateWrapper') private eDateWrapper: HTMLInputElement;\n\n    private dateComp: DateCompWrapper;\n    private params: IFloatingFilterParams;\n\n    constructor() {\n        super(/* html */`\n            <div class=\"ag-floating-filter-input\" role=\"presentation\">\n                <ag-input-text-field ref=\"eReadOnlyText\"></ag-input-text-field>\n                <div ref=\"eDateWrapper\" style=\"display: flex; overflow: hidden;\"></div>\n            </div>`);\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return DateFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected conditionToString(condition: DateFilterModel): string {\n        if (condition.type === SimpleFilter.IN_RANGE) {\n            return `${condition.dateFrom}-${condition.dateTo}`;\n        }\n\n        // cater for when the type doesn't need a value\n        if (condition.dateFrom != null) {\n            return `${condition.dateFrom}`;\n        }\n\n        return `${condition.type}`;\n    }\n\n    public init(params: IFloatingFilterParams): void {\n        super.init(params);\n        this.params = params;\n        this.createDateComponent();\n        this.eReadOnlyText\n            .setDisabled(true)\n            .setInputAriaLabel('Date Filter Input');\n    }\n\n    protected setEditable(editable: boolean): void {\n        setDisplayed(this.eDateWrapper, editable);\n        setDisplayed(this.eReadOnlyText.getGui(), !editable);\n    }\n\n    public onParentModelChanged(model: ISimpleFilterModel, event: FilterChangedEvent): void {\n        // We don't want to update the floating filter if the floating filter caused the change,\n        // because the UI is already in sync. if we didn't do this, the UI would behave strangely\n        // as it would be updating as the user is typing\n        if (this.isEventFromFloatingFilter(event)) { return; }\n\n        super.setLastTypeFromModel(model);\n\n        const allowEditing = this.canWeEditAfterModelFromParentFilter(model);\n\n        this.setEditable(allowEditing);\n\n        if (allowEditing) {\n            if (model) {\n                const dateModel = model as DateFilterModel;\n\n                this.dateComp.setDate(parseDateTimeFromString(dateModel.dateFrom));\n            } else {\n                this.dateComp.setDate(null);\n            }\n\n            this.eReadOnlyText.setValue('');\n        } else {\n            this.eReadOnlyText.setValue(this.getTextFromModel(model));\n            this.dateComp.setDate(null);\n        }\n    }\n\n    private onDateChanged(): void {\n        const filterValueDate = this.dateComp.getDate();\n        const filterValueText = serialiseDate(filterValueDate);\n\n        this.params.parentFilterInstance(filterInstance => {\n            if (filterInstance) {\n                const simpleFilter = filterInstance as SimpleFilter<ISimpleFilterModel>;\n                simpleFilter.onFloatingFilterChanged(this.getLastType(), filterValueText);\n            }\n        });\n    }\n\n    private createDateComponent(): void {\n        const debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());\n        const dateComponentParams: IDateParams = {\n            onDateChanged: debounce(this.onDateChanged.bind(this), debounceMs),\n            filterParams: this.params.column.getColDef().filterParams\n        };\n\n        this.dateComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, dateComponentParams, this.eDateWrapper);\n\n        this.addDestroyFunc(() => this.dateComp.destroy());\n    }\n}\n"]}