{"version":3,"sources":["../../src/ts/filter/provided/simpleFilter.ts"],"names":[],"mappings":"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","file":"simpleFilter.js","sourcesContent":["import { IDoesFilterPassParams, IFilterOptionDef, ProvidedFilterModel } from '../../interfaces/iFilter';\nimport { RefSelector } from '../../widgets/componentAnnotations';\nimport { OptionsFactory } from './optionsFactory';\nimport { IProvidedFilterParams, ProvidedFilter } from './providedFilter';\nimport { Promise } from '../../utils';\nimport { AgSelect } from '../../widgets/agSelect';\nimport { AgRadioButton } from '../../widgets/agRadioButton';\nimport { forEach } from '../../utils/array';\nimport { setDisplayed } from '../../utils/dom';\n\nexport interface ISimpleFilterParams extends IProvidedFilterParams {\n    filterOptions?: (IFilterOptionDef | string)[];\n    defaultOption?: string;\n    suppressAndOrCondition?: boolean;\n}\n\nexport interface ISimpleFilterModel extends ProvidedFilterModel {\n    type: string;\n}\n\nexport interface ICombinedSimpleModel<M extends ISimpleFilterModel> extends ProvidedFilterModel {\n    operator: string;\n    condition1: M;\n    condition2: M;\n}\n\nexport enum ConditionPosition { One, Two }\n\ninterface ISimpleFilterTranslations {\n    filterOoo: string;\n    empty: string;\n    equals: string;\n    notEqual: string;\n    lessThan: string;\n    greaterThan: string;\n    inRange: string;\n    inRangeStart: string;\n    inRangeEnd: string;\n    lessThanOrEqual: string;\n    greaterThanOrEqual: string;\n    contains: string;\n    notContains: string;\n    startsWith: string;\n    endsWith: string;\n    andCondition: string;\n    orCondition: string;\n}\n\nconst DEFAULT_TRANSLATIONS: ISimpleFilterTranslations = {\n    filterOoo: 'Filter...',\n    empty: 'Choose One',\n    equals: 'Equals',\n    notEqual: 'Not equal',\n    lessThan: 'Less than',\n    greaterThan: 'Greater than',\n    inRange: 'In range',\n    inRangeStart: 'From',\n    inRangeEnd: 'To',\n    lessThanOrEqual: 'Less than or equals',\n    greaterThanOrEqual: 'Greater than or equals',\n    contains: 'Contains',\n    notContains: 'Not contains',\n    startsWith: 'Starts with',\n    endsWith: 'Ends with',\n    andCondition: 'AND',\n    orCondition: 'OR',\n};\n\n/**\n * Every filter with a dropdown where the user can specify a comparing type against the filter values\n */\nexport abstract class SimpleFilter<M extends ISimpleFilterModel> extends ProvidedFilter {\n\n    public static EMPTY = 'empty';\n    public static EQUALS = 'equals';\n    public static NOT_EQUAL = 'notEqual';\n    public static LESS_THAN = 'lessThan';\n    public static LESS_THAN_OR_EQUAL = 'lessThanOrEqual';\n    public static GREATER_THAN = 'greaterThan';\n    public static GREATER_THAN_OR_EQUAL = 'greaterThanOrEqual';\n    public static IN_RANGE = 'inRange';\n\n    public static CONTAINS = 'contains';\n    public static NOT_CONTAINS = 'notContains';\n    public static STARTS_WITH = 'startsWith';\n    public static ENDS_WITH = 'endsWith';\n\n    @RefSelector('eOptions1') private eType1: AgSelect;\n    @RefSelector('eOptions2') private eType2: AgSelect;\n    @RefSelector('eJoinOperatorAnd') private eJoinOperatorAnd: AgRadioButton;\n    @RefSelector('eJoinOperatorOr') private eJoinOperatorOr: AgRadioButton;\n    @RefSelector('eCondition2Body') private eCondition2Body: HTMLElement;\n    @RefSelector('eJoinOperatorPanel') private eJoinOperatorPanel: HTMLElement;\n\n    private allowTwoConditions: boolean;\n\n    protected optionsFactory: OptionsFactory;\n    protected abstract getDefaultFilterOptions(): string[];\n\n    // gets called once during initialisation, to build up the html template\n    protected abstract createValueTemplate(position: ConditionPosition): string;\n\n    // returns true in the row passes the said condition\n    protected abstract individualConditionPasses(params: IDoesFilterPassParams, type: ISimpleFilterModel): boolean;\n\n    // returns true if the UI represents a working filter, eg all parts are filled out.\n    // eg if text filter and textfield blank then returns false.\n    protected abstract isConditionUiComplete(position: ConditionPosition): boolean;\n\n    // filter uses this to know if new model is different from previous model, ie if filter has changed\n    protected abstract areSimpleModelsEqual(a: ISimpleFilterModel, b: ISimpleFilterModel): boolean;\n\n    // returns the type selected from the drop down. base classes use this.\n    protected abstract getFilterType(): string;\n\n    // after floating filter changes, this sets the 'value' section. this is implemented by the base class\n    // (as that's where value is controlled), the 'type' part from the floating filter is dealt with in this class.\n    protected abstract setValueFromFloatingFilter(value: string): void;\n\n    // getModel() calls this to create the two conditions. if only one condition,\n    // the result is returned by getModel(), otherwise is called twice and both results\n    // returned in a CombinedFilter object.\n    protected abstract createCondition(position: ConditionPosition): M;\n\n    // puts model values into the UI\n    protected abstract setConditionIntoUi(model: ISimpleFilterModel, position: ConditionPosition): void;\n\n    // returns true if this type requires a 'from' field, eg any filter that requires at least one text value\n    protected showValueFrom(type: string): boolean {\n        return !this.doesFilterHaveHiddenInput(type) && type !== SimpleFilter.EMPTY;\n    }\n\n    // returns true if this type requires a 'to' field, currently only 'range' returns true\n    protected showValueTo(type: string): boolean {\n        return type === SimpleFilter.IN_RANGE;\n    }\n\n    // floating filter calls this when user applies filter from floating filter\n    public onFloatingFilterChanged(type: string, value: any): void {\n        this.setTypeFromFloatingFilter(type);\n        this.setValueFromFloatingFilter(value);\n        this.onUiChanged(true);\n    }\n\n    protected setTypeFromFloatingFilter(type: string): void {\n        this.eType1.setValue(type);\n        this.eType2.setValue(this.optionsFactory.getDefaultOption());\n        this.eJoinOperatorAnd.setValue(true);\n    }\n\n    public getModelFromUi(): M | ICombinedSimpleModel<M> {\n        if (!this.isConditionUiComplete(ConditionPosition.One)) { return null; }\n\n        if (this.isAllowTwoConditions() && this.isConditionUiComplete(ConditionPosition.Two)) {\n            return {\n                filterType: this.getFilterType(),\n                operator: this.getJoinOperator(),\n                condition1: this.createCondition(ConditionPosition.One),\n                condition2: this.createCondition(ConditionPosition.Two)\n            };\n        }\n\n        return this.createCondition(ConditionPosition.One);\n    }\n\n    protected getCondition1Type(): string {\n        return this.eType1.getValue();\n    }\n\n    protected getCondition2Type(): string {\n        return this.eType2.getValue();\n    }\n\n    protected getJoinOperator(): string {\n        return this.eJoinOperatorOr.getValue() === true ? 'OR' : 'AND';\n    }\n\n    protected areModelsEqual(a: M | ICombinedSimpleModel<M>, b: M | ICombinedSimpleModel<M>): boolean {\n        // both are missing\n        if (!a && !b) { return true; }\n\n        // one is missing, other present\n        if ((!a && b) || (a && !b)) { return false; }\n\n        // one is combined, the other is not\n        const aIsSimple = !(a as any).operator;\n        const bIsSimple = !(b as any).operator;\n        const oneSimpleOneCombined = (!aIsSimple && bIsSimple) || (aIsSimple && !bIsSimple);\n        if (oneSimpleOneCombined) { return false; }\n\n        let res: boolean;\n\n        // otherwise both present, so compare\n        if (aIsSimple) {\n            const aSimple = a as M;\n            const bSimple = b as M;\n\n            res = this.areSimpleModelsEqual(aSimple, bSimple);\n        } else {\n            const aCombined = a as ICombinedSimpleModel<M>;\n            const bCombined = b as ICombinedSimpleModel<M>;\n\n            res = aCombined.operator === bCombined.operator\n                && this.areSimpleModelsEqual(aCombined.condition1, bCombined.condition1)\n                && this.areSimpleModelsEqual(aCombined.condition2, bCombined.condition2);\n        }\n\n        return res;\n    }\n\n    protected setModelIntoUi(model: ISimpleFilterModel | ICombinedSimpleModel<M>): Promise<void> {\n        const isCombined = (model as any).operator;\n\n        if (isCombined) {\n            const combinedModel = model as ICombinedSimpleModel<M>;\n\n            const orChecked = combinedModel.operator === 'OR';\n            this.eJoinOperatorAnd.setValue(!orChecked);\n            this.eJoinOperatorOr.setValue(orChecked);\n\n            this.eType1.setValue(combinedModel.condition1.type);\n            this.eType2.setValue(combinedModel.condition2.type);\n\n            this.setConditionIntoUi(combinedModel.condition1, ConditionPosition.One);\n            this.setConditionIntoUi(combinedModel.condition2, ConditionPosition.Two);\n        } else {\n            const simpleModel = model as ISimpleFilterModel;\n\n            this.eJoinOperatorAnd.setValue(true);\n            this.eJoinOperatorOr.setValue(false);\n\n            this.eType1.setValue(simpleModel.type);\n            this.eType2.setValue(this.optionsFactory.getDefaultOption());\n\n            this.setConditionIntoUi(simpleModel as M, ConditionPosition.One);\n            this.setConditionIntoUi(null, ConditionPosition.Two);\n        }\n\n        return Promise.resolve();\n    }\n\n    public doesFilterPass(params: IDoesFilterPassParams): boolean {\n        const model = this.getModel();\n        const isCombined = (model as any).operator;\n\n        if (isCombined) {\n            const combinedModel = model as ICombinedSimpleModel<M>;\n\n            const firstResult = this.individualConditionPasses(params, combinedModel.condition1);\n            const secondResult = this.individualConditionPasses(params, combinedModel.condition2);\n\n            if (combinedModel.operator === 'AND') {\n                return firstResult && secondResult;\n            }\n\n            return firstResult || secondResult;\n        }\n\n        const simpleModel = model as ISimpleFilterModel;\n        const result = this.individualConditionPasses(params, simpleModel);\n\n        return result;\n    }\n\n    protected setParams(params: ISimpleFilterParams): void {\n        super.setParams(params);\n\n        this.optionsFactory = new OptionsFactory();\n        this.optionsFactory.init(params, this.getDefaultFilterOptions());\n\n        this.allowTwoConditions = !params.suppressAndOrCondition;\n\n        this.putOptionsIntoDropdown();\n        this.addChangedListeners();\n    }\n\n    private putOptionsIntoDropdown(): void {\n        const filterOptions = this.optionsFactory.getFilterOptions();\n\n        forEach(filterOptions, option => {\n            let value: string;\n            let text: string;\n\n            if (typeof option === 'string') {\n                value = option;\n                text = this.translate(value as keyof ISimpleFilterTranslations);\n            } else {\n                value = option.displayKey;\n\n                const customOption = this.optionsFactory.getCustomOption(value);\n\n                text = customOption ? customOption.displayName : this.translate(value as keyof ISimpleFilterTranslations);\n            }\n\n            const createOption = () => ({ value, text });\n\n            this.eType1.addOption(createOption());\n            this.eType2.addOption(createOption());\n        });\n\n        const readOnly = filterOptions.length <= 1;\n\n        this.eType1.setDisabled(readOnly);\n        this.eType2.setDisabled(readOnly);\n    }\n\n    public isAllowTwoConditions(): boolean {\n        return this.allowTwoConditions;\n    }\n\n    protected createBodyTemplate(): string {\n        return /* html */`\n            <ag-select class=\"ag-filter-select\" ref=\"eOptions1\"></ag-select>\n            ${this.createValueTemplate(ConditionPosition.One)}\n            <div class=\"ag-filter-condition\" ref=\"eJoinOperatorPanel\">\n               <ag-radio-button ref=\"eJoinOperatorAnd\" class=\"ag-filter-condition-operator ag-filter-condition-operator-and\"></ag-radio-button>\n               <ag-radio-button ref=\"eJoinOperatorOr\" class=\"ag-filter-condition-operator ag-filter-condition-operator-or\"></ag-radio-button>\n            </div>\n            <ag-select class=\"ag-filter-select\" ref=\"eOptions2\"></ag-select>\n            ${this.createValueTemplate(ConditionPosition.Two)}`;\n    }\n\n    protected getCssIdentifier() {\n        return 'simple-filter';\n    }\n\n    protected updateUiVisibility(): void {\n        const firstConditionComplete = this.isConditionUiComplete(ConditionPosition.One);\n        const showSecondFilter = this.allowTwoConditions && firstConditionComplete;\n\n        setDisplayed(this.eCondition2Body, showSecondFilter);\n        setDisplayed(this.eType2.getGui(), showSecondFilter);\n        setDisplayed(this.eJoinOperatorPanel, showSecondFilter);\n    }\n\n    protected resetUiToDefaults(silent?: boolean): Promise<void> {\n        const uniqueGroupId = 'ag-simple-filter-and-or-' + this.getCompId();\n        const defaultOption = this.optionsFactory.getDefaultOption();\n\n        this.eType1.setValue(defaultOption, silent);\n        this.eType2.setValue(defaultOption, silent);\n        this.eJoinOperatorAnd\n            .setValue(true, silent)\n            .setName(uniqueGroupId)\n            .setLabel(this.translate('andCondition'));\n\n        this.eJoinOperatorOr\n            .setValue(false, silent)\n            .setName(uniqueGroupId)\n            .setLabel(this.translate('orCondition'));\n\n        return Promise.resolve();\n    }\n\n    public translate(toTranslate: keyof ISimpleFilterTranslations): string {\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n\n        return translate(toTranslate, DEFAULT_TRANSLATIONS[toTranslate]);\n    }\n\n    public addChangedListeners() {\n        const listener = () => this.onUiChanged();\n        this.eType1.onValueChange(listener);\n        this.eType2.onValueChange(listener);\n        this.eJoinOperatorOr.onValueChange(listener);\n        this.eJoinOperatorAnd.onValueChange(listener);\n    }\n\n    protected doesFilterHaveHiddenInput(filterType: string) {\n        const customFilterOption = this.optionsFactory.getCustomOption(filterType);\n        return customFilterOption && customFilterOption.hideFilterInput;\n    }\n}\n"]}