{"version":3,"sources":["../../src/ts/filter/provided/date/dateFilter.ts"],"names":[],"mappings":"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","file":"dateFilter.js","sourcesContent":["import { IDateParams } from '../../../rendering/dateComponent';\nimport { RefSelector } from '../../../widgets/componentAnnotations';\nimport { Autowired } from '../../../context/context';\nimport { UserComponentFactory } from '../../../components/framework/userComponentFactory';\nimport { DateCompWrapper } from './dateCompWrapper';\nimport { ConditionPosition, ISimpleFilterModel, SimpleFilter } from '../simpleFilter';\nimport { Comparator, IScalarFilterParams, ScalarFilter } from '../scalarFilter';\nimport { serialiseDate, parseDateTimeFromString } from '../../../utils/date';\nimport { setDisplayed } from '../../../utils/dom';\nimport { Promise } from '../../../utils';\n\n// The date filter model takes strings, although the filter actually works with dates. This is because a Date object\n// won't convert easily to JSON. When the model is used for doing the filtering, it's converted to a Date object.\nexport interface DateFilterModel extends ISimpleFilterModel {\n    dateFrom: string;\n    dateTo: string;\n}\n\nexport interface IDateFilterParams extends IScalarFilterParams {\n    comparator?: IDateComparatorFunc;\n    browserDatePicker?: boolean;\n}\n\nexport interface IDateComparatorFunc {\n    (filterLocalDateAtMidnight: Date, cellValue: any): number;\n}\n\nexport class DateFilter extends ScalarFilter<DateFilterModel, Date> {\n    private static readonly FILTER_TYPE = 'date';\n\n    public static DEFAULT_FILTER_OPTIONS = [\n        ScalarFilter.EQUALS,\n        ScalarFilter.GREATER_THAN,\n        ScalarFilter.LESS_THAN,\n        ScalarFilter.NOT_EQUAL,\n        ScalarFilter.IN_RANGE\n    ];\n\n    @RefSelector('eCondition1PanelFrom') private eCondition1PanelFrom: HTMLElement;\n    @RefSelector('eCondition1PanelTo') private eCondition1PanelTo: HTMLElement;\n    @RefSelector('eCondition2PanelFrom') private eCondition2PanelFrom: HTMLElement;\n    @RefSelector('eCondition2PanelTo') private eCondition2PanelTo: HTMLElement;\n\n    private dateCondition1FromComp: DateCompWrapper;\n    private dateCondition1ToComp: DateCompWrapper;\n    private dateCondition2FromComp: DateCompWrapper;\n    private dateCondition2ToComp: DateCompWrapper;\n\n    @Autowired('userComponentFactory')\n    private userComponentFactory: UserComponentFactory;\n\n    private dateFilterParams: IDateFilterParams;\n\n    protected mapRangeFromModel(filterModel: DateFilterModel): { from: Date; to: Date; } {\n        // unlike the other filters, we do two things here:\n        // 1) allow for different attribute names (same as done for other filters) (eg the 'from' and 'to'\n        //    are in different locations in Date and Number filter models)\n        // 2) convert the type (because Date filter uses Dates, however model is 'string')\n        //\n        // NOTE: The conversion of string to date also removes the timezone - i.e. when user picks\n        //       a date from the UI, it will have timezone info in it. This is lost when creating\n        //       the model. When we recreate the date again here, it's without a timezone.\n        return {\n            from: parseDateTimeFromString(filterModel.dateFrom),\n            to: parseDateTimeFromString(filterModel.dateTo)\n        };\n    }\n\n    protected setValueFromFloatingFilter(value: string): void {\n        if (value != null) {\n            const dateFrom = parseDateTimeFromString(value);\n            this.dateCondition1FromComp.setDate(dateFrom);\n        } else {\n            this.dateCondition1FromComp.setDate(null);\n        }\n\n        this.dateCondition1ToComp.setDate(null);\n        this.dateCondition2FromComp.setDate(null);\n        this.dateCondition2ToComp.setDate(null);\n    }\n\n    protected setConditionIntoUi(model: DateFilterModel, position: ConditionPosition): void {\n        const [dateFrom, dateTo] = model ?\n            [parseDateTimeFromString(model.dateFrom), parseDateTimeFromString(model.dateTo)] :\n            [null, null];\n\n        const [compFrom, compTo] = this.getFromToComponents(position);\n\n        compFrom.setDate(dateFrom);\n        compTo.setDate(dateTo);\n    }\n\n    protected resetUiToDefaults(silent?: boolean): Promise<void> {\n        return super.resetUiToDefaults(silent).then(() => {\n            this.dateCondition1FromComp.setDate(null);\n            this.dateCondition1ToComp.setDate(null);\n            this.dateCondition2FromComp.setDate(null);\n            this.dateCondition2ToComp.setDate(null);\n        });\n    }\n\n    protected comparator(): Comparator<Date> {\n        return this.dateFilterParams.comparator ? this.dateFilterParams.comparator : this.defaultComparator.bind(this);\n    }\n\n    private defaultComparator(filterDate: Date, cellValue: any): number {\n        // The default comparator assumes that the cellValue is a date\n        const cellAsDate = cellValue as Date;\n\n        if (cellValue == null || cellAsDate < filterDate) { return -1; }\n        if (cellAsDate > filterDate) { return 1; }\n\n        return 0;\n    }\n\n    protected setParams(params: IDateFilterParams): void {\n        super.setParams(params);\n\n        this.dateFilterParams = params;\n\n        this.createDateComponents();\n    }\n\n    private createDateComponents(): void {\n        // params to pass to all four date comps\n        const dateComponentParams: IDateParams = {\n            onDateChanged: () => this.onUiChanged(),\n            filterParams: this.dateFilterParams\n        };\n\n        this.dateCondition1FromComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, dateComponentParams, this.eCondition1PanelFrom);\n        this.dateCondition1ToComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, dateComponentParams, this.eCondition1PanelTo);\n        this.dateCondition2FromComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, dateComponentParams, this.eCondition2PanelFrom);\n        this.dateCondition2ToComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, dateComponentParams, this.eCondition2PanelTo);\n\n        this.addDestroyFunc(() => {\n            this.dateCondition1FromComp.destroy();\n            this.dateCondition1ToComp.destroy();\n            this.dateCondition2FromComp.destroy();\n            this.dateCondition2ToComp.destroy();\n        });\n    }\n\n    protected getDefaultFilterOptions(): string[] {\n        return DateFilter.DEFAULT_FILTER_OPTIONS;\n    }\n\n    protected createValueTemplate(position: ConditionPosition): string {\n        const pos = position === ConditionPosition.One ? '1' : '2';\n\n        return /* html */`\n            <div class=\"ag-filter-body\" ref=\"eCondition${pos}Body\">\n                <div class=\"ag-filter-from ag-filter-date-from\" ref=\"eCondition${pos}PanelFrom\">\n                </div>\n                <div class=\"ag-filter-to ag-filter-date-to\" ref=\"eCondition${pos}PanelTo\">\n                </div>\n            </div>`;\n    }\n\n    protected isConditionUiComplete(position: ConditionPosition): boolean {\n        const positionOne = position === ConditionPosition.One;\n        const option = positionOne ? this.getCondition1Type() : this.getCondition2Type();\n\n        if (option === SimpleFilter.EMPTY) { return false; }\n\n        if (this.doesFilterHaveHiddenInput(option)) {\n            return true;\n        }\n\n        const [compFrom, compTo] = this.getFromToComponents(position);\n\n        return compFrom.getDate() != null && (option !== SimpleFilter.IN_RANGE || compTo.getDate() != null);\n    }\n\n    protected areSimpleModelsEqual(aSimple: DateFilterModel, bSimple: DateFilterModel): boolean {\n        return aSimple.dateFrom === bSimple.dateFrom\n            && aSimple.dateTo === bSimple.dateTo\n            && aSimple.type === bSimple.type;\n    }\n\n    // needed for creating filter model\n    protected getFilterType(): string {\n        return DateFilter.FILTER_TYPE;\n    }\n\n    protected createCondition(position: ConditionPosition): DateFilterModel {\n        const positionOne = position === ConditionPosition.One;\n        const type = positionOne ? this.getCondition1Type() : this.getCondition2Type();\n        const [compFrom, compTo] = this.getFromToComponents(position);\n\n        return {\n            dateFrom: serialiseDate(compFrom.getDate()),\n            dateTo: serialiseDate(compTo.getDate()),\n            type,\n            filterType: DateFilter.FILTER_TYPE\n        };\n    }\n\n    private resetPlaceholder(): void {\n        const translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        const placeholder = translate('dateFormatOoo', 'yyyy-mm-dd');\n\n        this.dateCondition1FromComp.setInputPlaceholder(placeholder);\n        this.dateCondition1ToComp.setInputPlaceholder(placeholder);\n        this.dateCondition2FromComp.setInputPlaceholder(placeholder);\n        this.dateCondition2ToComp.setInputPlaceholder(placeholder);\n    }\n\n    protected updateUiVisibility(): void {\n        super.updateUiVisibility();\n\n        this.resetPlaceholder();\n\n        const condition1Type = this.getCondition1Type();\n        setDisplayed(this.eCondition1PanelFrom, this.showValueFrom(condition1Type));\n        setDisplayed(this.eCondition1PanelTo, this.showValueTo(condition1Type));\n\n        const condition2Type = this.getCondition2Type();\n        setDisplayed(this.eCondition2PanelFrom, this.showValueFrom(condition2Type));\n        setDisplayed(this.eCondition2PanelTo, this.showValueTo(condition2Type));\n    }\n\n    private getFromToComponents(position: ConditionPosition): [DateCompWrapper, DateCompWrapper] {\n        return position === ConditionPosition.One ?\n            [this.dateCondition1FromComp, this.dateCondition1ToComp] :\n            [this.dateCondition2FromComp, this.dateCondition2ToComp];\n    }\n}\n"]}