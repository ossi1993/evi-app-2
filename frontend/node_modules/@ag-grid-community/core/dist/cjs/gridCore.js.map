{"version":3,"sources":["../../src/ts/gridCore.ts"],"names":[],"mappings":"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","file":"gridCore.js","sourcesContent":["import { GridOptions } from \"./entities/gridOptions\";\nimport { GridOptionsWrapper } from \"./gridOptionsWrapper\";\nimport { ColumnApi } from \"./columnController/columnApi\";\nimport { RowRenderer } from \"./rendering/rowRenderer\";\nimport { FilterManager } from \"./filter/filterManager\";\nimport { GridPanel } from \"./gridPanel/gridPanel\";\nimport { Logger, LoggerFactory } from \"./logger\";\nimport { PopupService } from \"./widgets/popupService\";\nimport { Autowired, Optional } from \"./context/context\";\nimport { IRowModel } from \"./interfaces/iRowModel\";\nimport { Component } from \"./widgets/component\";\nimport { IClipboardService } from \"./interfaces/iClipboardService\";\nimport { GridApi } from \"./gridApi\";\nimport { ISideBar } from \"./interfaces/iSideBar\";\nimport { RefSelector } from \"./widgets/componentAnnotations\";\nimport { Events, GridSizeChangedEvent } from \"./events\";\nimport { ResizeObserverService } from \"./misc/resizeObserverService\";\nimport { SideBarDef, SideBarDefParser } from \"./entities/sideBar\";\nimport { IToolPanel } from \"./interfaces/iToolPanel\";\nimport { ModuleNames } from \"./modules/moduleNames\";\nimport { ModuleRegistry } from \"./modules/moduleRegistry\";\nimport { ManagedFocusComponent } from \"./widgets/managedFocusComponent\";\nimport { ColumnController } from \"./columnController/columnController\";\nimport { ColumnGroup } from \"./entities/columnGroup\";\nimport { Column } from \"./entities/column\";\nimport { _ } from \"./utils\";\n\nexport class GridCore extends ManagedFocusComponent {\n\n    @Autowired('gridOptions') private gridOptions: GridOptions;\n    @Autowired('gridOptionsWrapper') private gridOptionsWrapper: GridOptionsWrapper;\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('resizeObserverService') private resizeObserverService: ResizeObserverService;\n\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('filterManager') private filterManager: FilterManager;\n\n    @Autowired('eGridDiv') private eGridDiv: HTMLElement;\n    @Autowired('$scope') private $scope: any;\n    @Autowired('quickFilterOnScope') private quickFilterOnScope: string;\n    @Autowired('popupService') private popupService: PopupService;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('loggerFactory') loggerFactory: LoggerFactory;\n\n    @Autowired('columnApi') private columnApi: ColumnApi;\n    @Autowired('gridApi') private gridApi: GridApi;\n\n    @Optional('clipboardService') private clipboardService: IClipboardService;\n\n    @RefSelector('gridPanel') private gridPanel: GridPanel;\n    @RefSelector('sideBar') private sideBarComp: ISideBar & Component;\n    @RefSelector('rootWrapperBody') private eRootWrapperBody: HTMLElement;\n\n    private doingVirtualPaging: boolean;\n    private logger: Logger;\n\n    protected postConstruct(): void {\n        this.logger = this.loggerFactory.create('GridCore');\n\n        const template = this.createTemplate();\n        this.setTemplate(template);\n\n        // register with services that need grid core\n        [\n            this.gridApi,\n            this.rowRenderer,\n            this.popupService,\n            this.focusController\n        ].forEach(service => service.registerGridCore(this));\n\n        if (ModuleRegistry.isRegistered(ModuleNames.ClipboardModule)) {\n            this.clipboardService.registerGridCore(this);\n        }\n\n        this.gridOptionsWrapper.addLayoutElement(this.getGui());\n\n        this.eGridDiv.appendChild(this.getGui());\n        this.addDestroyFunc(() => {\n            this.eGridDiv.removeChild(this.getGui());\n        });\n\n        // if using angular, watch for quickFilter changes\n        if (this.$scope) {\n            const quickFilterUnregisterFn = this.$scope.$watch(this.quickFilterOnScope, (newFilter: any) => this.filterManager.setQuickFilter(newFilter));\n            this.addDestroyFunc(quickFilterUnregisterFn);\n        }\n\n        // important to set rtl before doLayout, as setting the RTL class impacts the scroll position,\n        // which doLayout indirectly depends on\n        this.addRtlSupport();\n\n        this.logger.log('ready');\n\n        this.gridOptionsWrapper.addLayoutElement(this.eRootWrapperBody);\n\n        const unsubscribeFromResize = this.resizeObserverService.observeResize(\n            this.eGridDiv, this.onGridSizeChanged.bind(this));\n        this.addDestroyFunc(() => unsubscribeFromResize());\n\n        const eGui = this.getGui();\n\n        this.addManagedListener(this.eventService, Events.EVENT_KEYBOARD_FOCUS, () => {\n            _.addCssClass(eGui, 'ag-keyboard-focus');\n        });\n\n        this.addManagedListener(this.eventService, Events.EVENT_MOUSE_FOCUS, () => {\n            _.removeCssClass(eGui, 'ag-keyboard-focus');\n        });\n\n        super.postConstruct();\n    }\n\n    public getFocusableElement(): HTMLElement {\n        return this.eRootWrapperBody;\n    }\n\n    private createTemplate(): string {\n        const sideBarModuleLoaded = ModuleRegistry.isRegistered(ModuleNames.SideBarModule);\n        const statusBarModuleLoaded = ModuleRegistry.isRegistered(ModuleNames.StatusBarModule);\n        const rowGroupingLoaded = ModuleRegistry.isRegistered(ModuleNames.RowGroupingModule);\n        const enterpriseCoreLoaded = ModuleRegistry.isRegistered(ModuleNames.EnterpriseCoreModule);\n\n        const dropZones = rowGroupingLoaded ? '<ag-grid-header-drop-zones></ag-grid-header-drop-zones>' : '';\n        const sideBar = sideBarModuleLoaded ? '<ag-side-bar ref=\"sideBar\"></ag-side-bar>' : '';\n        const statusBar = statusBarModuleLoaded ? '<ag-status-bar ref=\"statusBar\"></ag-status-bar>' : '';\n        const watermark = enterpriseCoreLoaded ? '<ag-watermark></ag-watermark>' : '';\n\n        const template =\n            `<div ref=\"eRootWrapper\" class=\"ag-root-wrapper\">\n                ${dropZones}\n                <div class=\"ag-root-wrapper-body\" ref=\"rootWrapperBody\">\n                    <ag-grid-comp ref=\"gridPanel\"></ag-grid-comp>\n                    ${sideBar}\n                </div>\n                ${statusBar}\n                <ag-pagination></ag-pagination>\n                ${watermark}\n            </div>`;\n\n        return template;\n    }\n\n    protected isFocusableContainer(): boolean {\n        return true;\n    }\n\n    protected getFocusableContainers(): HTMLElement[] {\n        const focusableContainers = [\n            this.gridPanel.getGui()\n        ];\n\n        if (this.sideBarComp) {\n            focusableContainers.push(\n                this.sideBarComp.getGui()\n            );\n        }\n\n        return focusableContainers.filter(el => _.isVisible(el));\n    }\n\n    public focusNextInnerContainer(backwards: boolean): boolean {\n        const focusableContainers = this.getFocusableContainers();\n        const idxWithFocus = _.findIndex(focusableContainers, container => container.contains(document.activeElement));\n        const nextIdx = idxWithFocus + (backwards ? -1 : 1);\n\n        if (nextIdx < 0 || nextIdx >= focusableContainers.length) {\n            return false;\n        }\n\n        if (nextIdx === 0) {\n            return this.focusGridHeader();\n        }\n\n        return this.focusController.focusFirstFocusableElement(focusableContainers[nextIdx]);\n\n    }\n\n    public focusInnerElement(fromBottom?: boolean): boolean {\n        const focusableContainers = this.getFocusableContainers();\n        if (fromBottom && focusableContainers.length > 1) {\n            return this.focusController.focusFirstFocusableElement(_.last(focusableContainers));\n        }\n\n        return this.focusGridHeader();\n    }\n\n    private focusGridHeader(): boolean {\n        let firstColumn: Column | ColumnGroup = this.columnController.getAllDisplayedColumns()[0];\n        if (!firstColumn) { return false; }\n\n        if (firstColumn.getParent()) {\n            firstColumn = this.columnController.getColumnGroupAtLevel(firstColumn, 0);\n        }\n\n        this.focusController.focusHeaderPosition({\n            headerRowIndex: 0,\n            column: firstColumn\n        });\n\n        return true;\n    }\n\n    private onGridSizeChanged(): void {\n        const event: GridSizeChangedEvent = {\n            type: Events.EVENT_GRID_SIZE_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            clientWidth: this.eGridDiv.clientWidth,\n            clientHeight: this.eGridDiv.clientHeight\n        };\n        this.eventService.dispatchEvent(event);\n    }\n\n    private addRtlSupport(): void {\n        const cssClass = this.gridOptionsWrapper.isEnableRtl() ? 'ag-rtl' : 'ag-ltr';\n        _.addCssClass(this.getGui(), cssClass);\n    }\n\n    public getRootGui(): HTMLElement {\n        return this.getGui();\n    }\n\n    public isSideBarVisible(): boolean {\n        if (!this.sideBarComp) {\n            return false;\n        }\n\n        return this.sideBarComp.isDisplayed();\n    }\n\n    public setSideBarVisible(show: boolean) {\n        if (!this.sideBarComp) {\n            if (show) {\n                console.warn('ag-Grid: sideBar is not loaded');\n            }\n            return;\n        }\n\n        this.sideBarComp.setDisplayed(show);\n    }\n\n    public setSideBarPosition(position: 'left' | 'right') {\n        if (!this.sideBarComp) {\n            console.warn('ag-Grid: sideBar is not loaded');\n            return;\n        }\n        this.sideBarComp.setSideBarPosition(position);\n    }\n\n    public closeToolPanel() {\n        if (!this.sideBarComp) {\n            console.warn('ag-Grid: toolPanel is only available in ag-Grid Enterprise');\n            return;\n        }\n\n        this.sideBarComp.close();\n    }\n\n    public getSideBar(): SideBarDef {\n        return this.gridOptions.sideBar as SideBarDef;\n    }\n\n    public getToolPanelInstance(key: string): IToolPanel | undefined {\n        if (!this.sideBarComp) {\n            console.warn('ag-Grid: toolPanel is only available in ag-Grid Enterprise');\n            return;\n        }\n        return this.sideBarComp.getToolPanelInstance(key);\n    }\n\n    public refreshSideBar() {\n        if (this.sideBarComp) {\n            this.sideBarComp.refresh();\n        }\n    }\n\n    public setSideBar(def: SideBarDef | string | boolean): void {\n        if (!this.sideBarComp) { return; }\n        this.eRootWrapperBody.removeChild(this.sideBarComp.getGui());\n        this.gridOptions.sideBar = SideBarDefParser.parse(def);\n        this.sideBarComp.reset();\n        this.eRootWrapperBody.appendChild(this.sideBarComp.getGui());\n    }\n\n    public getOpenedToolPanel(): string {\n        if (!this.sideBarComp) {\n            return null;\n        }\n\n        return this.sideBarComp.openedItem();\n    }\n\n    public openToolPanel(key: string) {\n        if (!this.sideBarComp) {\n            console.warn('ag-Grid: toolPanel is only available in ag-Grid Enterprise');\n            return;\n        }\n\n        this.sideBarComp.openToolPanel(key);\n    }\n\n    public isToolPanelShowing() {\n        return this.sideBarComp.isToolPanelShowing();\n    }\n\n    protected destroy(): void {\n        this.logger.log('Grid DOM removed');\n        super.destroy();\n    }\n\n    // Valid values for position are bottom, middle and top\n    public ensureNodeVisible(comparator: any, position: string | null = null) {\n        if (this.doingVirtualPaging) {\n            throw new Error('Cannot use ensureNodeVisible when doing virtual paging, as we cannot check rows that are not in memory');\n        }\n        // look for the node index we want to display\n        const rowCount = this.rowModel.getRowCount();\n        const comparatorIsAFunction = typeof comparator === 'function';\n        let indexToSelect = -1;\n        // go through all the nodes, find the one we want to show\n        for (let i = 0; i < rowCount; i++) {\n            const node = this.rowModel.getRow(i);\n            if (comparatorIsAFunction) {\n                if (comparator(node)) {\n                    indexToSelect = i;\n                    break;\n                }\n            } else {\n                // check object equality against node and data\n                if (comparator === node || comparator === node.data) {\n                    indexToSelect = i;\n                    break;\n                }\n            }\n        }\n        if (indexToSelect >= 0) {\n            this.gridPanel.ensureIndexVisible(indexToSelect, position);\n        }\n    }\n}\n"]}