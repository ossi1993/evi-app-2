{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\template-attributes.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\template-attributes.vue","mtime":1602146596655},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"C:/Users/Anwender/SJO/evi/evi/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Users/Anwender/SJO/evi/evi/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\nimport InputTag from 'vue-input-tag';\nexport default {\n  metaInfo: {\n    title: \"Inspection Attributes\"\n  },\n  components: {\n    AgGridVue: AgGridVue,\n    InputTag: InputTag\n  },\n  data: function data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      domLayout: null,\n      modules: AllModules,\n      // VUE VARIABLES\n      attributes: [],\n      show: false,\n      IType: null,\n      KeyAtt: null,\n      NameAtt: null,\n      ValueDef: null,\n      ValueType: null,\n      Parameter: null,\n      ParameterTags: [],\n      ValueMin: null,\n      ValueMax: null,\n      ValueTol: null,\n      date: null,\n      error: false,\n      updateStatus: false,\n      updateId: null,\n      itemTypes: [],\n      optionsTypes: [{\n        value: 'Integer',\n        text: 'Counter'\n      }, {\n        value: 'Float',\n        text: 'Measure'\n      }, {\n        value: 'String',\n        text: 'Text'\n      }, {\n        value: 'Boolean',\n        text: 'True/False'\n      }, {\n        value: 'Select',\n        text: 'Select'\n      }],\n      optionsUnits: [{\n        value: 'µm',\n        text: 'µm'\n      }, {\n        value: 'mm',\n        text: 'mm'\n      }, {\n        value: 'cm',\n        text: 'cm'\n      }, {\n        value: 'mg',\n        text: 'mg'\n      }, {\n        value: 'g',\n        text: 'g'\n      }, {\n        value: 'ml',\n        text: 'ml'\n      }, {\n        value: 'inch',\n        text: 'inch'\n      }, {\n        value: 'oz',\n        text: 'oz'\n      }],\n      optionsBoolean: [{\n        value: 'true',\n        text: 'True'\n      }, {\n        value: 'false',\n        text: 'False'\n      }]\n    };\n  },\n  beforeMount: function beforeMount() {\n    this.gridOptions = {};\n    this.defaultColDef = {\n      editable: true,\n      resizable: true,\n      sortable: true,\n      filter: true,\n      floatingFilter: true\n    };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.columnDefs = [{\n      headerName: \"Item Type\",\n      field: \"idItemType.txtItemType\",\n      filter: 'agTextColumnFilter',\n      editable: false\n    }, {\n      headerName: \"Key Attribute\",\n      field: \"txtKeyAttribute\",\n      filter: 'agTextColumnFilter'\n    }, {\n      headerName: \"Name Attribute\",\n      field: \"txtNameAttribute\",\n      filter: 'agTextColumnFilter'\n    }, {\n      headerName: \"Value Default\",\n      field: \"txtValueDefault\",\n      filter: 'agTextColumnFilter',\n      editable: false\n    }, {\n      headerName: \"Value Type\",\n      field: \"txtValueType\",\n      filter: 'agTextColumnFilter',\n      editable: false,\n      valueGetter: ValueTypeGetter\n    }, {\n      headerName: \"Parameter\",\n      field: \"txtParameter\",\n      filter: 'agTextColumnFilter',\n      editable: false\n    }, {\n      headerName: \"Value Min\",\n      field: \"txtValueMin\",\n      filter: 'agTextColumnFilter'\n    }, {\n      headerName: \"Value Max\",\n      field: \"txtValueMax\",\n      filter: 'agTextColumnFilter'\n    }, {\n      headerName: \"Value Tolerance\",\n      field: \"txtValueTolerance\",\n      filter: 'agTextColumnFilter'\n    }];\n  },\n  mounted: function mounted() {\n    if (JSON.parse(localStorage.getItem('inspectionAttributeTemp_columnStats')) != null) {\n      this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('inspectionAttributeTemp_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  computed: {\n    disabled: function disabled() {\n      if (this.ValueType == 'Boolean') {\n        return !this.IType ? true : !this.KeyAtt ? true : !this.NameAtt ? true : !this.ValueType ? true : !this.ValueDef ? true : false;\n      } else if (this.ValueType == 'Integer') {\n        return !this.IType ? true : !this.KeyAtt ? true : !this.NameAtt ? true : !this.ValueType ? true : !this.ValueDef ? true : false;\n      } else if (this.ValueType == 'Float') {\n        return !this.IType ? true : !this.KeyAtt ? true : !this.NameAtt ? true : !this.ValueType ? true : !this.ValueDef ? true : false;\n      } else if (this.ValueType == 'String') {\n        return !this.IType ? true : !this.KeyAtt ? true : !this.NameAtt ? true : !this.ValueType ? true : !this.ValueDef ? true : false;\n      } else if (this.ValueType == 'Select') {\n        return !this.IType ? true : !this.KeyAtt ? true : !this.NameAtt ? true : !this.ValueType ? true : !this.ValueDef ? true : false;\n      } else {\n        return !this.IType ? true : !this.KeyAtt ? true : !this.NameAtt ? true : !this.ValueType ? true : false;\n      }\n    }\n  },\n  methods: {\n    saveState: function saveState() {\n      localStorage.setItem('inspectionAttributeTemp_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState: function restoreState() {\n      localStorage.setItem('inspectionAttributeTemp_columnStats', null);\n    },\n    onPageSizeChanged: function onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onRowSelected: function onRowSelected(event) {\n      this.show = this.show ? false : true;\n    },\n    onSubmit: function onSubmit() {\n      if (!this.updateStatus) {\n        this.addAtt();\n      } else {\n        this.updateAttribute();\n      }\n    },\n    autoSizeAll: function autoSizeAll(skipHeader) {\n      var allColumnIds = [];\n      this.gridColumnApi.getAllColumns().forEach(function (column) {\n        allColumnIds.push(column.colId);\n      });\n      this.gridColumnApi.autoSizeColumns(allColumnIds, skipHeader);\n    },\n    getParameter: function getParameter(params) {\n      if (params.node.data.txtValueType == 'Select') {\n        this.ParameterTags = params.node.data.txtParameter.split(',');\n      } else {\n        this.Parameter = params.node.data.txtParameter;\n      }\n    },\n    setParameter: function setParameter() {\n      var val;\n\n      if (this.ValueType == 'Select') {\n        return val = this.ParameterTags.toString();\n      } else if (this.ValueType == 'Integer' || this.ValueType == 'String' || this.ValueType == 'Boolean') {\n        return val = null;\n      } else if (this.ValueType == 'Float') {\n        return val = this.Parameter.toString();\n      }\n    },\n    addAtt: function addAtt() {\n      var _this = this;\n\n      var endpoint = \"/api/inspection-template-attribute/\";\n      apiService(endpoint, \"POST\", {\n        txtParameter: this.setParameter(),\n        idItemType: this.IType.id,\n        txtKeyAttribute: this.KeyAtt,\n        txtNameAttribute: this.NameAtt,\n        txtValueType: this.ValueType,\n        txtValueMin: this.ValueMin,\n        txtValueMax: this.ValueMax,\n        txtValueTolerance: this.ValueTol,\n        txtValueDefault: this.ValueDef\n      }).then(function (response) {\n        if (response != 'ERROR') {\n          _this.getAtt();\n\n          _this.emptyInput();\n\n          _this.error = false;\n        } else {\n          _this.error = true;\n        }\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    },\n    editAttributeMenu: function editAttributeMenu(params) {\n      this.emptyInput();\n      var sel = params.node.data;\n      this.getParameter(params);\n      this.IType = sel.idItemType;\n      this.KeyAtt = sel.txtKeyAttribute;\n      this.NameAtt = sel.txtNameAttribute;\n      this.ValueType = sel.txtValueType;\n      this.ValueDef = sel.txtValueDefault;\n      this.ValueMin = sel.txtValueMin;\n      this.ValueMax = sel.txtValueMax;\n      this.ValueTol = sel.txtValueTolerance;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    updateAttribute: function () {\n      var _updateAttribute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var endpoint;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                endpoint = \"/api/inspection-template-attribute/\".concat(this.updateId, \"/\");\n                _context.next = 3;\n                return apiService(endpoint, \"PUT\", {\n                  idItemType: this.IType.id,\n                  txtKeyAttribute: this.KeyAtt,\n                  txtNameAttribute: this.NameAtt,\n                  txtValueType: this.ValueType,\n                  txtParameter: this.setParameter(),\n                  txtValueDefault: this.ValueDef,\n                  txtValueMin: this.ValueMin,\n                  txtValueMax: this.ValueMax,\n                  txtValueTolerance: this.ValueTol\n                }).then(function (response) {\n                  if (response != 'ERROR') {\n                    _this2.emptyInput();\n\n                    _this2.getAtt();\n                  }\n                }).catch(function (err) {\n                  return console.log(err);\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function updateAttribute() {\n        return _updateAttribute.apply(this, arguments);\n      }\n\n      return updateAttribute;\n    }(),\n    updateAttributeGrid: function () {\n      var _updateAttributeGrid = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(event) {\n        var endpoint;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                endpoint = \"/api/inspection-template-attribute/\".concat(event.node.data.id, \"/\");\n                _context2.prev = 1;\n                _context2.next = 4;\n                return apiService(endpoint, \"PATCH\", {\n                  idItemType: event.node.data.idItemType,\n                  txtKeyAttribute: event.node.data.txtKeyAttribute,\n                  txtNameAttribute: event.node.data.txtNameAttribute,\n                  txtValueDefault: event.node.data.txtValueDefault,\n                  txtValueType: event.node.data.txtValueType,\n                  txtParameter: event.node.data.txtParameter,\n                  txtValueMin: event.node.data.txtValueMin,\n                  txtValueMax: event.node.data.txtValueMax,\n                  txtValueTolerance: event.node.data.txtValueTolerance\n                }).catch(function (err) {\n                  return console.log(err);\n                });\n\n              case 4:\n                _context2.next = 9;\n                break;\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](1);\n                console.log(_context2.t0);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[1, 6]]);\n      }));\n\n      function updateAttributeGrid(_x) {\n        return _updateAttributeGrid.apply(this, arguments);\n      }\n\n      return updateAttributeGrid;\n    }(),\n    openModal: function openModal(params) {\n      var _this3 = this;\n\n      this.$bvModal.msgBoxConfirm(\"Are you sure you want to delete the selected Attribute? => \" + params.node.data.txtNameAttribute, {\n        title: \"Please Confirm\",\n        size: \"m\",\n        buttonSize: \"sm\",\n        okVariant: \"danger\",\n        okTitle: \"YES\",\n        cancelTitle: \"NO\",\n        footerClass: \"p-2\",\n        hideHeaderClose: false,\n        centered: true\n      }).then(function (value) {\n        if (value) {\n          _this3.deleteAttribute(params);\n        }\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    },\n    deleteAttribute: function () {\n      var _deleteAttribute = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(params) {\n        var _this4 = this;\n\n        var endpoint;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                endpoint = \"/api/inspection-template-attribute/\".concat(params.node.data.id, \"/\");\n                _context3.next = 3;\n                return apiService(endpoint, \"DELETE\").then(function (response) {\n                  if (response != 'ERROR') {\n                    _this4.getAtt();\n                  } else {\n                    _this4.$bvToast.toast(\"Can't delete this entry. Please check if there are dependent entries. Please delete those first!\", {\n                      title: 'DELETE WARNING',\n                      variant: 'danger',\n                      autoHideDelay: 6000,\n                      appendToast: false\n                    });\n                  }\n                });\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function deleteAttribute(_x2) {\n        return _deleteAttribute.apply(this, arguments);\n      }\n\n      return deleteAttribute;\n    }(),\n    emptyInput: function emptyInput(event) {\n      this.IType = this.ParameterTags = [];\n      this.KeyAtt = this.NameAtt = this.ValueType = this.ValueDef = this.Parameter = this.ValueMin = this.ValueMax = this.ValueTol = null;\n\n      if (event != 'add') {\n        this.show = false;\n      } else {\n        this.show = !this.show;\n      }\n    },\n    emptyLastValueType: function emptyLastValueType(event) {\n      this.ValueDef = this.Parameter = this.ValueMin = this.ValueMax = this.ValueTol = null;\n      this.ParameterTags = [];\n    },\n    getAtt: function getAtt() {\n      var _this5 = this;\n\n      if (!this.error) {\n        this.attributes = [];\n        var endpoint = \"/api/inspection-template-attribute-list/\";\n        apiService(endpoint).then(function (data) {\n          var _this5$attributes;\n\n          (_this5$attributes = _this5.attributes).push.apply(_this5$attributes, _toConsumableArray(data.results));\n\n          _this5.rowData = _this5.attributes;\n        }).catch(function (err) {\n          return console.log(err);\n        });\n      }\n    },\n    getItemTypes: function getItemTypes() {\n      var _this6 = this;\n\n      if (!this.error) {\n        this.itemTypes = [];\n        var endpoint = \"/api/item-type/\";\n        apiService(endpoint).then(function (data) {\n          var _this6$itemTypes;\n\n          (_this6$itemTypes = _this6.itemTypes).push.apply(_this6$itemTypes, _toConsumableArray(data.results));\n        }).catch(function (err) {\n          return console.log(err);\n        });\n      }\n    },\n    getDateToday: function getDateToday() {\n      var today = new Date();\n      this.date = today.getDate() + ' / ' + (today.getMonth() + 1) + ' / ' + today.getFullYear();\n    },\n    getContextMenu: function getContextMenu(params) {\n      var _this7 = this;\n\n      var result = [{\n        name: 'Edit Attribute',\n        action: function action() {\n          return _this7.editAttributeMenu(params);\n        }\n      }, 'separator', {\n        name: 'Delete Attribute',\n        action: function action() {\n          return _this7.openModal(params);\n        }\n      }, 'export'];\n      return result;\n    }\n  },\n  created: function created() {\n    this.getAtt();\n    this.getDateToday();\n    this.getItemTypes();\n  }\n};\n\nwindow.ValueTypeGetter = function (params) {\n  if (params.data.txtValueType == 'String') {\n    return 'Text';\n  } else if (params.data.txtValueType == 'Integer') {\n    return 'Counter';\n  } else if (params.data.txtValueType == 'Float') {\n    return 'Measure';\n  } else if (params.data.txtValueType == 'Boolean') {\n    return 'True/False';\n  } else if (params.data.txtValueType == 'Select') {\n    return 'Select';\n  }\n};",null]}