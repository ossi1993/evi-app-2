{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\device\\device-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\device\\device-list.vue","mtime":1602163669575},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Device\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      domLayout: null,\n      modules: AllModules,\n\n      // AG-GRID ATTRIBUTES VARIABLES\n      gridOptions1: null,\n      gridApi1: null,\n      gridColumnApi1: null,\n      defaultColDef1: null,\n      columnDefs1: null,\n      rowData1: null,\n      defaultColDef1: null,\n      paginationPageSize1: 0,\n\n      // VUE VARIABLES\n      devices: [],\n      models: [],\n      attributes: [],\n      positions: [],\n      tempAttributes: [],\n      selectedAttributes: [],\n      filteredAttributes: [],\n      SNumber: null,\n      DPosition: null,\n      IMEI: null,\n      Comment: null,\n      Model: null,\n      date: null,\n      error: false,\n      show: false,\n      updateStatus: false,\n      updateId: null,\n      selectedDevice: false,\n      optionsModels: [],\n      optionAttributes: [],\n      optionPosition: [\n        { code: 'Neuried', text: 'Neuried' },\n        { code: 'Straubing', text: 'Straubing' },\n        { code: 'Ordered', text: 'Ordered' },\n        { code: 'on the Way', text: 'on the Way' },\n      ],\n      optionBoolean: [\n        { value: 'true', text: 'Yes' },\n        { value: 'false', text: 'No' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.gridOptions1 = {};\n    this.columnDefs = [\n      {headerName: \"Model Name\", field: \"idModel.txtModelName\", filter: 'agTextColumnFilter', checkboxSelection: true,  editable: false},\n      {headerName: \"Serial Number\", field: \"txtSerialNumber\", filter: 'agTextColumnFilter',},\n      {headerName: \"IMEI\", field: \"txtIMEI\", filter: 'agTextColumnFilter',},\n      {headerName: \"Device Position\", field: \"idDevicePosition.txtDevicePosition\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', cellEditorParams: { cellHeight: 50, values: ['Neuried', 'Straubing']},},\n      {headerName: \"Manufacturer\", field: \"idModel.idManufacturer.txtManufacturerName\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Supplier\", field: \"idModel.idSupplier.txtSupplierName\", filter: 'agTextColumnFilter', editable: false},\n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', editable: false},\n    ],\n    this.columnDefs1 = [\n      {headerName: \"Key Attribute\", field: \"txtKeyAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Name Attribute\", field: \"txtNameAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Attribute\", field: \"txtValueAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Type\", field: \"txtValueType\", filter: 'agTextColumnFilter', },\n      {headerName: \"Parameter\", field: \"txtParameter\", filter: 'agTextColumnFilter', },\n    ],\n    this.defaultColDef = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.defaultColDef1 = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.paginationPageSize1 = 10;\n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('device_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('device_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  computed: {\n    disabled: function () {\n      return !this.DPosition ? true : !this.Model ? true : false; \n    },\n  },\n  methods: {\n    saveState() {\n      localStorage.setItem('device_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('device_columnStats', null);\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onSubmit() {\n      if(!this.updateStatus) { this.addDevice();\n      } else { this.updateDevice(); }\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onRowSelectedDevice(event) {\n      this.selectedDevice = this.selectedDevice ? false : true\n      if(event.node.selected == true) {\n        this.getAttributes(event.data.id);\n        window.localStorage.setItem('selDevice', event.node.data.id)\n      } else {\n        this.gridApi.redrawRows();\n        this.attributes = [];\n      }\n    },\n    onGridReady(params) { \n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi\n      setTimeout(() => {  this.getSelectedDevice(params) }, 500);\n    },\n    onGridReady1(params) {\n      this.gridApi1 = params.api;\n      this.gridColumnApi1 = params.columnApi\n    },\n    addDevice() {\n      if (this.SNumber) {\n        let endpoint = `/api/device/`;\n        apiService(endpoint, \"POST\", { \n          txtSerialNumber: this.SNumber, \n          txtIMEI: this.IMEI, \n          idDevicePosition: this.DPosition.id, \n          idModel: this.Model, \n          txtComment: this.Comment \n          })\n        .then(response => {\n          if (response != 'ERROR'){\n              for (let i = 0; i < this.selectedAttributes.length; i++) {\n                const el = this.selectedAttributes[i];\n                let endpointAttributes = `/api/device-attribute/`;\n                apiService(endpointAttributes, \"POST\", { \n                  txtKeyAttribute: el.txtKeyAttribute, \n                  txtNameAttribute: el.txtNameAttribute, \n                  txtValueAttribute: el.txtValueDefault, \n                  txtValueType: el.txtValueType, \n                  txtParameter: el.txtParameter,\n                  idDevice: response.id,\n                })\n              };\n            this.getDevices();\n            this.emptyInput();\n          }\n        })\n        .catch(err => console.log(err));\n      }\n    },\n    editItemMenu(params) {\n      this.emptyInput();\n      let sel = params.node.data;\n      this.SNumber = sel.txtSerialNumber;\n      this.DPosition = sel.idDevicePosition;\n      this.Model = sel.idModel;\n      this.Comment = sel.txtComment;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.show = true;\n      this.getAttributes()\n      document.documentElement.scrollTop = 0;\n    },\n    async updateDevice() {\n      if(typeof this.Model == \"object\") { this.Model = this.Model.id } else { this.Model = this.Model }\n      let endpoint = `/api/device/${this.updateId}/`;\n      await apiService(endpoint, \"PUT\", { \n        txtSerialNumber: this.SNumber,\n        txtIMEI: this.IMEI,\n        idDevicePosition: this.DPosition.id,\n        txtComment: this.Comment,\n        idModel: this.Model, })\n        .then(response => {\n          if (response != 'ERROR'){\n            // ADD ATTRIBUTE\n            for (let i = 0; i < this.selectedAttributes.length; i++) {\n              const el = this.selectedAttributes[i];\n              let endpointAttributes = `/api/device-attribute/`;\n              apiService(endpointAttributes, \"POST\", { \n                txtKeyAttribute: el.txtKeyAttribute, \n                txtNameAttribute: el.txtNameAttribute, \n                txtValueAttribute: el.txtValueDefault, \n                txtValueType: el.txtValueType, \n                txtParameter: el.txtParameter,\n                idDevice: response.id,\n              })\n            }\n            // UPDATE ATTRIBUTE\n            for (let i = 0; i < this.filteredAttributes.length; i++) {\n              let el = this.filteredAttributes[i];\n              let endpointAttributes = `/api/device-attribute/${el.id}/`;\n              apiService(endpointAttributes, \"PUT\", { \n                txtKeyAttribute: el.txtKeyAttribute, \n                txtNameAttribute: el.txtNameAttribute, \n                txtValueAttribute: el.txtValueAttribute, \n                txtValueType: el.txtValueType, \n                txtParameter: el.txtParameter,\n                idDevice: response.id,\n              })\n            };\n            this.selectedDevice = false;\n            this.attributes = [];\n            this.emptyInput();\n            this.getDevices();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    async updateDeviceGrid(event) {     \n      let endpoint = `/api/device/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtSerialNumber: event.node.data.txtSerialNumber,\n          txtParameter: event.node.data.txtParameter,\n          idDevicePosition: event.node.data.idDevicePosition,\n          txtComment: event.node.data.txtComment,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    async updateAttributeGrid(event) {     \n      let endpoint = `/api/device-attribute/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtKeyAttribute: event.node.data.txtKeyAttribute,\n          txtNameAttribute: event.node.data.txtNameAttribute,\n          txtValueAttribute: event.node.data.txtValueAttribute,\n          txtValueType: event.node.data.txtValueType,\n          txtParameter: event.node.data.txtParameter,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Device? => \" + params.node.data.txtSerialNumber, {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { if (value) { this.deleteDevice(params); } })\n        .catch(err => console.log(err));\n    },\n    openModal1(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Do you really want to delete the Attribute? => \" + params.node.data.txtNameAttribute, {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { if (value) { this.deleteAttribute(params); } })\n        .catch(err => console.log(err));\n    },\n    async deleteDevice(params) {\n      let endpoint = `/api/device/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getDevices();\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false\n            })\n          }\n        })\n    },\n    async deleteAttribute(params) {\n      let endpoint = `/api/device-attribute/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            let id = window.localStorage.getItem('selDevice');\n            this.getAttributes(id);\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false\n            })\n          }\n        })\n    },\n    emptyInput(event) {\n      this.selectedAttributes = [];\n      this.SNumber = this.DPosition = this.Model = this.IMEI = this.Comment = null;\n      if(event != 'add') {\n        this.show = false;\n      } else {\n        this.updateStatus = false;\n        this.show = !this.show;\n      }\n    },\n    getDevices() {\n      if (!this.error) {\n        this.devices = [];\n        let endpoint = `/api/device-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.devices.push(...data.results);\n            this.rowData = this.devices\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getModels() {\n      if (!this.error) {\n        this.models = [];\n        let endpoint = `/api/model/`;\n        apiService(endpoint)\n          .then(data => {\n            this.models.push(...data.results);\n            this.optionsModels = this.models\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getAttributes(val) {\n      if (!this.error) {\n        this.attributes = [];\n        let endpoint = `/api/device-attribute/`;\n        apiService(endpoint)\n          .then(data => {\n            this.attributes.push(...data.results);\n            if(this.updateId != null) {\n              this.filteredAttributes = this.attributes.filter(e => e.idDevice == this.updateId)\n            }\n            if(val != null) {\n              this.rowData1 = this.attributes.filter(e => e.idDevice == val)\n            }\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getTemplateAttributes() {\n      if (!this.error) {\n        this.tempAttributes = [];\n        let endpoint = `/api/device-template-attribute/`;\n        apiService(endpoint)\n          .then(data => {\n            this.tempAttributes.push(...data.results);\n            this.optionAttributes = this.tempAttributes\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDevicePosition() {\n      if (!this.error) {\n        this.positions = [];\n        let endpoint = `/api/device-position/`;\n        apiService(endpoint)\n          .then(data => {\n            this.positions.push(...data.results);\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Device',\n          action: () => this.editItemMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Device',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n    getContextMenu1(params) {\n      var result = [\n        {\n          name: 'Delete Attribute',\n          action: () => this.openModal1(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n    getSelectedDevice(event) {\n      if(window.localStorage.getItem('selDevice') != null) {\n        let el = parseInt(localStorage.getItem('selDevice'));\n        event.api.forEachNode(rowNode => { rowNode.setSelected(rowNode.data.id === el) });\n      }\n    },\n  },\n  created() {\n    this.getDevices();\n    this.getModels();\n    this.getDateToday();\n    this.getTemplateAttributes();\n    this.getDevicePosition();\n  },\n  beforeRouteLeave (to, from, next) {\n    window.localStorage.removeItem('selDevice');\n    next()\n  }\n};\n",null]}