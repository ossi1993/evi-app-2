{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\template-attributes.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\template-attributes.vue","mtime":1602146596655},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\nimport InputTag from 'vue-input-tag'\n\nexport default {\n  metaInfo: {    \n    title: \"Inspection Attributes\"\n  },\n  components: {\n    AgGridVue, InputTag\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      domLayout: null,\n      modules: AllModules,\n\n      // VUE VARIABLES\n      attributes: [],\n      show: false,\n      IType: null,\n      KeyAtt: null,\n      NameAtt: null,\n      ValueDef: null,\n      ValueType: null,\n      Parameter: null,\n      ParameterTags: [],\n      ValueMin: null,\n      ValueMax: null,\n      ValueTol: null,\n      date: null,\n      error: false,\n      updateStatus: false,\n      updateId: null,\n      itemTypes: [],\n      optionsTypes: [\n        { value: 'Integer', text: 'Counter' },\n        { value: 'Float', text: 'Measure' },\n        { value: 'String', text: 'Text' },\n        { value: 'Boolean', text: 'True/False' },\n        { value: 'Select', text: 'Select' },\n      ],\n      optionsUnits: [\n        { value: 'µm', text: 'µm' },\n        { value: 'mm', text: 'mm' },\n        { value: 'cm', text: 'cm' },\n        { value: 'mg', text: 'mg' },\n        { value: 'g', text: 'g' },\n        { value: 'ml', text: 'ml' },\n        { value: 'inch', text: 'inch' },\n        { value: 'oz', text: 'oz' },\n      ],\n      optionsBoolean: [\n        { value: 'true', text: 'True' },\n        { value: 'false', text: 'False' },\n      ],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.defaultColDef = { editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.columnDefs = [\n      {headerName: \"Item Type\", field: \"idItemType.txtItemType\", filter: 'agTextColumnFilter', editable: false, },\n      {headerName: \"Key Attribute\", field: \"txtKeyAttribute\", filter: 'agTextColumnFilter',},\n      {headerName: \"Name Attribute\", field: \"txtNameAttribute\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Default\", field: \"txtValueDefault\", filter: 'agTextColumnFilter', editable: false, },\n      {headerName: \"Value Type\", field: \"txtValueType\", filter: 'agTextColumnFilter', editable: false, valueGetter: ValueTypeGetter, },\n      {headerName: \"Parameter\", field: \"txtParameter\", filter: 'agTextColumnFilter', editable: false, },\n      {headerName: \"Value Min\", field: \"txtValueMin\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Max\", field: \"txtValueMax\", filter: 'agTextColumnFilter', },\n      {headerName: \"Value Tolerance\", field: \"txtValueTolerance\", filter: 'agTextColumnFilter', },\n    ]\n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('inspectionAttributeTemp_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('inspectionAttributeTemp_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  computed: {\n    disabled: function () {\n      if(this.ValueType == 'Boolean') {\n        return !this.IType ? true : !this.KeyAtt ? true : !this.NameAtt ? true : !this.ValueType ? true : !this.ValueDef ? true : false; \n      } else if(this.ValueType == 'Integer') {\n        return !this.IType ? true : !this.KeyAtt ? true : !this.NameAtt ? true : !this.ValueType ? true : !this.ValueDef ? true : false ; \n      } else if(this.ValueType == 'Float') {\n        return !this.IType ? true : !this.KeyAtt ? true : !this.NameAtt ? true : !this.ValueType ? true : !this.ValueDef ? true : false; \n      } else if(this.ValueType == 'String') {\n        return !this.IType ? true : !this.KeyAtt ? true : !this.NameAtt ? true : !this.ValueType ? true : !this.ValueDef ? true : false; \n      } else if(this.ValueType == 'Select') {\n        return !this.IType ? true : !this.KeyAtt ? true : !this.NameAtt ? true : !this.ValueType ? true : !this.ValueDef ? true : false; \n      } else {\n        return !this.IType ? true : !this.KeyAtt ? true : !this.NameAtt ? true : !this.ValueType ? true : false; \n      }\n    },\n  },\n  methods: {\n    saveState() {\n      localStorage.setItem('inspectionAttributeTemp_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('inspectionAttributeTemp_columnStats', null);\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    onSubmit() {\n      if(!this.updateStatus) { this.addAtt();\n      } else { this.updateAttribute(); }\n    },\n    autoSizeAll(skipHeader) {\n      var allColumnIds = [];\n      this.gridColumnApi.getAllColumns().forEach(function(column) {\n        allColumnIds.push(column.colId);\n      });\n      this.gridColumnApi.autoSizeColumns(allColumnIds, skipHeader);\n    },\n    getParameter(params) {\n      if(params.node.data.txtValueType == 'Select') {\n        this.ParameterTags = params.node.data.txtParameter.split(',');\n      } else {\n        this.Parameter = params.node.data.txtParameter;\n      }\n    },\n    setParameter() {\n      let val;\n      if(this.ValueType == 'Select') {\n        return val = this.ParameterTags.toString();\n      } else if(this.ValueType == 'Integer' || this.ValueType == 'String' || this.ValueType == 'Boolean') {\n        return val = null;\n      } else if(this.ValueType == 'Float' ) {\n        return val = this.Parameter.toString();\n      }\n    },\n    addAtt() {\n      let endpoint = `/api/inspection-template-attribute/`;\n      apiService(endpoint, \"POST\", { \n        txtParameter: this.setParameter(),\n        idItemType: this.IType.id,\n        txtKeyAttribute: this.KeyAtt,\n        txtNameAttribute: this.NameAtt,\n        txtValueType: this.ValueType,\n        txtValueMin: this.ValueMin,\n        txtValueMax: this.ValueMax,\n        txtValueTolerance: this.ValueTol,\n        txtValueDefault: this.ValueDef,\n        })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.getAtt();\n            this.emptyInput();\n            this.error = false;\n          } else {\n            this.error = true;\n          }\n        })\n        .catch(err => console.log(err));\n   },\n    editAttributeMenu(params) {\n      this.emptyInput();\n      let sel = params.node.data;\n      this.getParameter(params);\n      this.IType = sel.idItemType;\n      this.KeyAtt = sel.txtKeyAttribute;\n      this.NameAtt = sel.txtNameAttribute;\n      this.ValueType = sel.txtValueType;\n      this.ValueDef = sel.txtValueDefault;\n      this.ValueMin = sel.txtValueMin;\n      this.ValueMax = sel.txtValueMax;\n      this.ValueTol = sel.txtValueTolerance;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateAttribute() {\n      let endpoint = `/api/inspection-template-attribute/${this.updateId}/`;\n      await apiService(endpoint, \"PUT\", { \n        idItemType: this.IType.id,\n        txtKeyAttribute: this.KeyAtt,\n        txtNameAttribute: this.NameAtt,\n        txtValueType: this.ValueType,\n        txtParameter: this.setParameter(),\n        txtValueDefault: this.ValueDef,\n        txtValueMin: this.ValueMin,\n        txtValueMax: this.ValueMax,\n        txtValueTolerance: this.ValueTol,\n        })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.emptyInput();\n            this.getAtt();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    async updateAttributeGrid(event) {     \n      let endpoint = `/api/inspection-template-attribute/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          idItemType: event.node.data.idItemType,\n          txtKeyAttribute: event.node.data.txtKeyAttribute,\n          txtNameAttribute: event.node.data.txtNameAttribute,\n          txtValueDefault: event.node.data.txtValueDefault,\n          txtValueType: event.node.data.txtValueType,\n          txtParameter: event.node.data.txtParameter,\n          txtValueMin: event.node.data.txtValueMin,\n          txtValueMax: event.node.data.txtValueMax,\n          txtValueTolerance: event.node.data.txtValueTolerance,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Attribute? => \" + params.node.data.txtNameAttribute, {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true\n        })\n        .then(value => { if (value) { this.deleteAttribute(params); } })\n        .catch(err => console.log(err));\n    },\n    async deleteAttribute(params) {\n      let endpoint = `/api/inspection-template-attribute/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getAtt();\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING', variant: 'danger', autoHideDelay: 6000, appendToast: false\n            })\n          }\n        })\n    },\n    emptyInput(event) {\n      this.IType = this.ParameterTags = [];\n      this.KeyAtt = this.NameAtt = this.ValueType = this.ValueDef = this.Parameter = this.ValueMin = this.ValueMax = this.ValueTol = null;\n      if(event != 'add') {\n        this.show = false;\n      } else {\n        this.show = !this.show;\n      }\n    },\n    emptyLastValueType(event) {\n      this.ValueDef = this.Parameter = this.ValueMin = this.ValueMax = this.ValueTol = null;\n      this.ParameterTags = [];\n    },\n    getAtt() {\n      if (!this.error) {\n        this.attributes = [];\n        let endpoint = `/api/inspection-template-attribute-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.attributes.push(...data.results);\n            this.rowData = this.attributes\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getItemTypes() {\n      if (!this.error) {\n        this.itemTypes = [];\n        let endpoint = `/api/item-type/`;\n        apiService(endpoint)\n          .then(data => { this.itemTypes.push(...data.results); })\n          .catch(err => console.log(err));\n      }\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Attribute',\n          action: () => this.editAttributeMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Attribute',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getAtt();\n    this.getDateToday();\n    this.getItemTypes();\n  },\n};\n\nwindow.ValueTypeGetter = function(params) {\n  if(params.data.txtValueType == 'String') {\n    return 'Text'\n  } else if(params.data.txtValueType == 'Integer') {\n    return 'Counter'\n  } else if(params.data.txtValueType == 'Float') {\n    return 'Measure'\n  } else if(params.data.txtValueType == 'Boolean') {\n    return 'True/False'\n  } else if(params.data.txtValueType == 'Select') {\n    return 'Select'\n  }\n}\n\n",null]}