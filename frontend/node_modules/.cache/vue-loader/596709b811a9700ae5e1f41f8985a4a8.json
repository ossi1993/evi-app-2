{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\device\\device-position.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\device\\device-position.vue","mtime":1601927090055},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Device Position\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      domLayout: null,\n      modules: AllModules,\n\n      // VUE VARIABLES\n      devicePositions: [],\n      DevicePosition: null,\n      date: null,\n      error: false,\n      show: false,\n      updateStatus: false,\n      updateId: null,\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.defaultColDef = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n    this.columnDefs = [{headerName: \"Device Position\", field: \"txtDevicePosition\", filter: 'agTextColumnFilter', }]\n  },\n  mounted() {\n    if (JSON.parse(localStorage.getItem('devicePosition_columnStats')) != null) {\n       this.gridOptions.columnApi.setColumnState(JSON.parse(localStorage.getItem('devicePosition_columnStats')));\n    } else {\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n    }\n  },\n  computed: {\n    disabled: function () {\n      return !this.DevicePosition ? true : false; \n    },\n  },\n  methods: {\n    saveState() {\n      localStorage.setItem('devicePosition_columnStats', JSON.stringify(this.gridOptions.columnApi.getColumnState()));\n    },\n    restoreState() {\n      localStorage.setItem('devicePosition_columnStats', null);\n    },\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    addDevicePosition() {\n      let endpoint = `/api/device-position/`;\n      apiService(endpoint, \"POST\", { txtDevicePosition: this.DevicePosition, })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.getDevicePosition();\n            this.emptyInput();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    editDevicePositionMenu(params) {\n      this.emptyInput();\n      let sel = params.node.data;\n      this.DevicePosition = sel.txtDevicePosition;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateDevicePosition() {\n      let endpoint = `/api/device-position/${this.updateId}/`;\n      await apiService(endpoint, \"PUT\", { txtDevicePosition: this.DevicePosition, })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.emptyInput();\n            this.getDevicePosition();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    async updateDevicePositionGrid(event) {     \n      let endpoint = `/api/device-position/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { txtDevicePosition: event.node.data.txtDevicePosition, })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Device Position?\", {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => { if (value) { this.deleteDevicePosition(params); } })\n        .catch(err => console.log(err));\n    },\n    async deleteDevicePosition(params) {\n      let endpoint = `/api/device-position/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getDevicePosition();\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING',\n              variant: 'danger',\n              autoHideDelay: 6000,\n              appendToast: false\n            })\n          }\n        })\n    },\n    emptyInput(event) {\n      this.DevicePosition = null;\n      if(event != 'add') {\n        this.show = false;\n      } else {\n        this.updateStatus = false;\n        this.show = !this.show;\n      }\n    },\n    getDevicePosition() {\n      if (!this.error) {\n        this.devicePositions = [];\n        let endpoint = `/api/device-position/`;\n        apiService(endpoint)\n          .then(data => {\n            this.devicePositions.push(...data.results);\n            this.rowData = this.devicePositions\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Device Position',\n          action: () => this.editDevicePositionMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Device Position',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getDateToday();\n    this.getDevicePosition();\n  },\n};\n\n",null]}