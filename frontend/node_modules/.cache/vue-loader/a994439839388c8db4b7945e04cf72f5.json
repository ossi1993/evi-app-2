{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\inspection.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\inspection.vue","mtime":1604219687984},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport $ from 'jquery';\n// import print from 'print-js'\nimport { Color } from '@ag-grid-community/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Edit Inspection\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // VUE VARIABLES\n      inspection: [],\n      inNum: [],\n      inType: [],\n      inStatus: [],\n      samples: [],\n      sampleAttributes: [],\n      activeSampleAttributes: [],\n      device: [],\n\n\n      // RELEASE & NOTES\n      IStatus: 'Work In Progress',\n      IType: null,\n      DatInspection: null,\n      DatDeliveredOn: null,\n      DatRequestedOn: null,\n      RequestedBy: null,\n      Inspector: null,\n      Comment: null,\n\n      // BOOLEAN STATES\n      loadingDevice: false,\n      loadingSample: false,\n      loadingAttributes: false,\n      loadingNumber: false,\n      loadingType: false,\n      error: false,\n      Superuser: false,\n\n      // OPTIONS  \n      optionsInspectionStatus: [\n        { value: 'Work In Progress', text: 'Work In Progress' },\n        { value: 'On Hold', text: 'On Hold' },\n        { value: 'Complete', text: 'Complete' },\n        { value: 'Declined', text: 'Declined' },\n      ],\n    };\n  },\n  beforeRouteEnter (to, from, next) {\n    let id = localStorage.getItem('InspectionID')\n      if(id == null || id == undefined) {\n        next('/app/inspection/inspection-list');\n      } else {\n        next();\n      }\n  },\n  beforeRouteLeave (to, from, next) {\n      localStorage.removeItem('InspectionID')\n      next();\n  },\n  computed: {\n  },\n  methods: {\n    onSubmit(type) {\n      if(type == 'save') {\n        this.saveInspection();\n      } else if(type == 'close') {\n        this.saveInspection();\n        setTimeout(() => {\n          this.closeInspection();\n        }, 2300);\n      }\n    },\n    returnFilteredAtts(sample, type) {\n      let el = this.sampleAttributes.filter(e => e.idSample == sample.id)\n      const temp = el.filter(e => e.txtValueType == type)\n      return temp;\n    },\n    closeInspection() {\n      this.$router.push(`/app/inspection/inspection-list/`)\n    },\n    saveInspection() {\n      let id = localStorage.getItem('InspectionID');\n      let InspectionNumber = this.inNum.label + '-' + this.inNum.type + '-' + this.inNum.year + '-' + this.inNum.number;\n      let endpoint = `/api/inspection/${id}/`;\n      apiService(endpoint, \"PATCH\", {  \n        txtInspectionNumber: InspectionNumber, \n        txtInspectionStatus: this.inStatus, \n        txtInspector: this.Inspector,\n        datInspection: this.DatInspection,\n        datDeliveredOn: this.DatDeliveredOn,\n        datRequestedOn: this.DatRequestedOn,\n        txtRequestedBy: this.RequestedBy,\n        txtComment: this.Comment,\n        })\n        .then(response => {\n          this.$bvToast.toast(`Saved successfully!`, {\n            title: 'SUCCESS', variant: 'success', autoHideDelay: 2000, appendToast: false })\n        })\n    },\n    saveSampleAttributes(att) {\n      if(att !== undefined) {\n        if(att.txtValueAttribute !== \"\" ) {\n          let endpoint = `/api/sample-attribute/${att.id}/`;\n          apiService(endpoint, \"PATCH\", {  \n            txtValueAttribute: att.txtValueAttribute, \n            txtParameter: att.txtParameter, \n            })\n        }\n      }\n    },\n    fillInspection() {\n      this.inStatus = this.inspection.txtInspectionStatus;\n      this.Inspector = this.inspection.txtInspector;\n      this.RequestedBy = this.inspection.txtRequestedBy;\n      this.DatInspection = this.inspection.datInspection;\n      this.DatDeliveredOn = this.inspection.datDeliveredOn;\n      this.DatRequestedOn = this.inspection.datRequestedOn;\n      this.Comment = this.inspection.txtComment;\n    },\n    getParameter(params) {\n      let arr = [];\n      let el = params.split(',');\n      for (let i = 0; i < el.length; i++) {\n        arr.push({ value: el[i], text: el[i] });\n      }\n      return arr;\n    },\n    getSamples(id) {\n      this.samples = [];\n      let endpoint = `/api/sample-list/`;\n      apiService(endpoint)\n        .then(data => {\n          let el = [];\n          el.push(...data.results);\n          this.samples = el.filter(e => e.idInspection.id === id)\n          this.loadingSample = true;\n        })\n        .catch(err => console.log(err));\n    },\n    getSampleAttributes() {\n      this.sampleAttributes = [];\n      let endpoint = `/api/sample-attribute/`;\n      apiService(endpoint)\n        .then(data => { \n          this.sampleAttributes.push(...data.results);\n          this.loadingAttributes = true;\n        })\n        .catch(err => console.log(err));\n    },\n    getOrderDevice(id) {\n      this.device = [];\n      let endpoint = `/api/order-device-list/`;\n      apiService(endpoint)\n        .then(data => { \n          let el = [];\n          el.push(...data.results);\n          let temp = el.filter(e => e.id == id);\n          this.device = temp[0];\n          this.loadingDevice = true;\n        })\n        .catch(err => console.log(err));\n    },\n    getInspection() {\n      let id = localStorage.getItem('InspectionID');\n      let endpoint = `/api/inspection/${id}/`;\n      apiService(endpoint)\n        .then(data => { \n          this.inspection = data;\n          this.fillInspection();\n          this.getOrderDevice(this.inspection.idOrderDevice);\n          this.getSamples(this.inspection.id);\n          this.getInspectionNumber(this.inspection.txtInspectionNumber);\n          this.getInspectionType(this.inspection.idInspectionType);\n        })\n        .catch(err => console.log(err));\n    },\n    getInspectionNumber(number) {\n      let el = number.split('-');\n      this.inNum = { label: el[0], type: el[1], year: el[2], number: el[3] };\n      this.loadingNumber = true;\n    },\n    getInspectionType(id) {\n      let endpoint = `/api/inspection-type/${id}/`;\n      apiService(endpoint)\n        .then(data => {\n          this.inType = data;\n          this.loadingType = true;\n        })\n        .catch(err => console.log(err));\n    },\n  },\n  created() {\n    this.getSampleAttributes();\n    this.getInspection();\n},\n};\n",null]}