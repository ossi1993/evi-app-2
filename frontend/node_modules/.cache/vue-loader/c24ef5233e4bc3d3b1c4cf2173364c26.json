{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\templates.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\inspection\\templates.vue","mtime":1603265381992},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Template\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowDataMod: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      excelStyles: null,\n      modules: AllModules,\n\n      // VUE VARIABLES INSPECTION\n      orderItems: [],\n      orderDevices: [],\n      orderItemAttributes: [],\n      selInspectionName: null,\n      selInspectionType: null,\n      selInspectionInitial: null,\n      selInspectionTemplate: null,\n      selOrderItems: [],\n      selOrderDevice: [],\n      templateAttributes: [],\n      tempAtts: [],\n      orderAtts: [],\n      inspections: [],\n      inspectNumber: null,\n\n      // VUE VARIABLES\n      templates: [],\n      attributes: [],\n      filteredAttributes: [],\n      selectedAttributes: [],\n      selectedInspectionType: [],\n      selectedItemTypes: [],\n      show: false,\n      show1: false,\n      show2: false,\n      TempName: null,\n      date: null,\n      error: false,\n      updateStatus: false,\n      updateId: null,\n      optionItemTypes: [],\n      optionInspectionTypes: [],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Template Name\", field: \"txtInspectionName\", filter: 'agTextColumnFilter', cellRenderer: 'agGroupCellRenderer', checkboxSelection: true,},\n      {headerName: \"Template Type\", field: \"idInspectionType.txtInspectionType\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', },\n      {headerName: \"Template Initial\", field: \"idInspectionType.txtInspectionInitial\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', },\n    ],\n    this.defaultColDef = { flex: 1, editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.detailCellRendererParams = {\n      detailGridOptions: {\n        rowSelection: 'single',\n        suppressRowClickSelection: true,\n        enableRangeSelection: true,\n        pagination: true,\n        paginationAutoPageSize: 20,\n        columnDefs: [\n          {headerName: \"Item Type\", field: \"idItemType.txtItemType\",},\n          {headerName: \"Attribute Key\", field: \"txtKeyAttribute\",},\n          {headerName: \"Attribute Name\", field: \"txtNameAttribute\",},\n          {headerName: \"Default Value\", field: \"txtValueDefault\",},\n          {headerName: \"Value Type\", field: \"txtValueType\",},\n          {headerName: \"Parameter\", field: \"txtParameter\",},\n        ],\n        defaultColDef: { flex: 1, editable: false, resizable: true, },\n      },\n      getDetailRowData: params => {\n        params.successCallback(params.data.idInspectionTemplateAttribute);\n      },\n    }\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n  },\n  mounted() {\n    if (window.InspectionTemplateColState)\n       this.gridOptions.columnApi.setColumnState(window.InspectionTemplateColState);\n    else\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n  },\n  computed: {\n    disabled: function () {\n      return !this.TempName ? true : !this.selectedInspectionType ? true : !this.selectedItemTypes ? true : false; \n    },\n  },\n  methods: {\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    saveState() {\n      window.InspectionTemplateColState = this.gridOptions.columnApi.getColumnState();\n    },\n    restoreState() {\n      window.InspectionTemplateColState = null;\n    },\n    onSubmit() {\n      console.log('inspection created!')\n    },\n    onChange(itemTypes) {\n      this.selectedAttributes = null;\n      this.filteredAttributes = []\n      for (let i = 0; i < itemTypes.length; i++) {\n        let el = itemTypes[i];\n        let element = { type: null, attributes: [], }\n        element['type'] = el.txtItemType;\n        element['attributes'].push(this.attributes.filter(e => e.idItemType.txtItemType == el.txtItemType))\n        this.filteredAttributes[i] = element;\n      }\n    },\n    onRowSelected(event) {\n      this.getOrderItems();\n      this.getOrderDevices();\n      this.selInspectionName = event.node.data.txtInspectionName;\n      this.selInspectionType = event.node.data.idInspectionType.txtInspectionType;\n      this.selInspectionInitial = event.node.data.idInspectionType;\n      this.selInspectionTemplate = event.node.data.id;\n      this.getSelectedTemplateAttributes(event.node.data.id);\n      this.getInspectionTemplateAttributes();\n      this.getInspectionNumber(event.node.data.idInspectionType.txtInspectionInitial);\n      this.show1 = this.show1 ? false : true;\n      document.documentElement.scrollTop = 0;\n    },\n    addInspection() {\n      let today = new Date();\n      let date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n      let endpoint = `/api/inspection/`;\n      apiService(endpoint, \"POST\", {\n        idOrderDevice: this.selOrderDevice.id, \n        txtInspectionStatus: 'Work In Progress', \n        idInspectionType: this.selInspectionInitial,\n        txtInspectionNumber: this.inspectNumber,\n      })\n      .then(response => {\n        if(response != 'ERROR') {\n          for (let i = 0; i < this.selOrderItems.length; i++) {\n            for (let t = 0; t < this.selOrderItems[i].testAmount; t++) {\n              this.addSample(response.id, this.selOrderItems[i])\n            }\n          }\n          this.emptyInspectionInput();\n          localStorage.setItem('InspectionID', response.id);\n          this.$router.push('inspection/');\n        }\n      })\n      .catch(err => console.log(err));\n    },\n    addSample(InspectId, OrderItem) {\n      let endpoint = `/api/sample/`;\n      apiService(endpoint, \"POST\", { \n        idInspection: InspectId, \n        idOrderItem: OrderItem.id, \n        txtSampleStatus: 'Not Approved', \n      })\n      .then(response => {\n        if(response != 'ERROR') {\n          let el = this.tempAtts.filter(function(e) {return this.indexOf(e.id) != -1}, this.templateAttributes);\n          let atts = el.filter(e => e.idItemType === OrderItem.idItem.idItemType);\n          this.getSelectedOrderItemAttributes(OrderItem, atts);\n          this.addSampleAttribute(response.id, atts)\n        }\n      })\n      .catch(err => console.log(err));\n    },\n    addSampleAttribute(SampleId, atts) {\n      let endpoint = `/api/sample-attribute/`;\n      for (let i = 0; i < atts.length; i++) {\n        apiService(endpoint, \"POST\", { \n          txtKeyAttribute: atts[i].txtKeyAttribute, \n          txtNameAttribute: atts[i].txtNameAttribute, \n          txtValueAttribute: atts[i].txtValueDefault, \n          txtValueType: atts[i].txtValueType, \n          txtParameter: atts[i].txtParameter, \n          txtValueMin: atts[i].txtValueMin, \n          txtValueMax: atts[i].txtValueMax, \n          txtValueTolerance: atts[i].txtValueTolerance, \n          idSample: SampleId, \n        })\n      }\n    },\n    getOrderItemLabel(e) {\n      return `${e.idOrder.txtOrderNumber}  |  ${e.idItem.txtDescription} - ${e.idItem.txtArticleNumber}`\n    },\n    getOrderDeviceLabel(e) {\n      return `${e.idOrder.txtOrderNumber}  |  ${e.idDevice.idModel.txtModelName} - ${e.idDevice.txtSerialNumber}`\n    },\n    addTemplate() {\n      let endpoint = `/api/inspection-template/`;\n      apiService(endpoint, \"POST\", { \n        txtInspectionName: this.TempName,\n        idInspectionType: this.selectedInspectionType.id,\n        idInspectionTemplateAttribute: this.selectedAttributes, \n        })\n        .then(response => {\n          if (response){\n            this.getTemplates();\n            this.emptyInput();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    editTemplateMenu(params) {\n      this.emptyInput();\n      let sel = params.node.data;\n      this.TempName = sel.txtInspectionName;\n      this.selectedInspectionType = sel.idInspectionType;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateTemplate() {\n      let endpoint = `/api/inspection-template/${this.updateId}/`;\n      await apiService(endpoint, \"PATCH\", { \n        txtInspectionName: this.TempName,\n        idInspectionType: this.selectedInspectionType.id })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.emptyInput();\n            this.getTemplates();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Template?\", {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { if (value) { this.deleteTemplate(params); } })\n        .catch(err => console.log(err));\n    },\n    openModalInspection(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to create the Inspection? Please make sure you have checked your selected Items as well as the inspection type and Device.\", {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"Yes, create the Inspection.\",\n          cancelTitle: \"No, cancel it!\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { \n          if (value) { \n            console.log('Inspection created')\n          } else {\n            console.log('Inspection cancelled')\n            this.emptyInspectionInput();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    async deleteTemplate(params) {\n      let endpoint = `/api/inspection-template/${params.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\");\n        this.getTemplates();\n      }\n      catch (err) {\n        console.log(err);\n      }\n    },\n    emptyInput(event) {\n      this.selectedInspectionType = this.selectedItemTypes = this.ParameterTags = [];\n      this.TempName = null;\n      this.selectedAttributes = null;\n      if(event != 'add') {\n        this.show = false;\n      } else {\n        this.updateStatus = false;\n        this.show = !this.show;\n      }\n    },\n    emptyInspectionInput() {\n      this.show1 = false;\n      this.selInspection = null;\n      this.selOrderItems = this.selOrderDevice = [];\n      this.getTemplates();\n    },\n    getTemplates() {\n      if (!this.error) {\n        this.templates = [];\n        let endpoint = `/api/inspection-template-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.templates.push(...data.results);\n            this.rowData = this.templates\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getAttributes() {\n      if (!this.error) {\n        this.attributes = [];\n        let endpoint = `/api/inspection-template-attribute-list/`;\n        apiService(endpoint)\n          .then(data => { this.attributes.push(...data.results); })\n          .catch(err => console.log(err));\n      }\n    },\n    showTempAtts() {\n      // this.getSelectedTemplateAttributes(2);\n      // console.log(this.templateAttributes)\n    },\n    getSelectedTemplateAttributes(id) {\n      let endpoint = `/api/inspection-template/${id}/`;\n      apiService(endpoint)\n        .then(data => {\n          this.templateAttributes.push(...data.idInspectionTemplateAttribute);\n        })\n        .catch(err => console.log(err));\n    },\n    getInspectionTemplateAttributes() {\n      let endpoint = `/api/inspection-template-attribute/`;\n      apiService(endpoint)\n        .then(data => {\n          this.tempAtts.push(...data.results)\n        })\n        .catch(err => console.log(err));\n    },\n    getSelectedOrderItemAttributes(OrderItem, atts) {\n      this.orderAtts = this.orderItemAttributes.filter(e => e.idOrderItem === OrderItem.id)\n      if(this.orderAtts.length >= 1) {\n        let el = atts.map(x => {\n          const item = this.orderAtts.find(({ txtKeyAttribute }) => txtKeyAttribute === x.txtKeyAttribute);\n          if(item != undefined) {\n            x.txtValueDefault = item.txtValueAttribute;\n            x.txtParameter = item.txtParameter;\n            return x;\n          } else {\n            return x;\n          }\n        })\n      }\n      return atts;\n    },\n    getItemTypes() {\n      if (!this.error) {\n        this.optionItemTypes = [];\n        let endpoint = `/api/item-type/`;\n        apiService(endpoint)\n          .then(data => {\n            this.optionItemTypes.push(...data.results);\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getInspectionTypes() {\n      if (!this.error) {\n        this.optionInspectionTypes = [];\n        let endpoint = `/api/inspection-type/`;\n        apiService(endpoint)\n          .then(data => {\n            this.optionInspectionTypes.push(...data.results);\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getOrderItems() {\n      this.orderItems = [];\n      let endpoint = `/api/order-item-list/`;\n      apiService(endpoint)\n        .then(data => { this.orderItems.push(...data.results); })\n        .catch(err => console.log(err));\n    },\n    getOrderItemAttributes() {\n      this.orderItemAttributes = [];\n      let endpoint = `/api/order-item-attribute/`;\n      apiService(endpoint)\n        .then(data => { this.orderItemAttributes.push(...data.results); })\n        .catch(err => console.log(err));\n    },\n    getOrderDevices() {\n      this.orderDevices = [];\n      let endpoint = `/api/order-device-list/`;\n      apiService(endpoint)\n        .then(data => { \n          this.orderDevices.push(...data.results); \n          this.orderDevices = this.orderDevices.filter(e => e.txtDeliveryStatus === 'Delivered')\n          })\n        .catch(err => console.log(err));\n    },\n    getInspectionNumber(type) {\n      let endpoint = `/api/inspection/`;\n      apiService(endpoint)\n        .then(data => {\n          this.inspections.push(...data.results);\n          let d = new Date();\n          let y = d.getFullYear();\n          let pn = [];\n          let value = null;\n          for (let i = 0; i < this.inspections.length; i++) {\n            let el = this.inspections[i].txtInspectionNumber.split('-');\n            let arr = { label: el[0], type: el[1], year: el[2], number: el[3] };\n            if(arr.year == y) {\n              pn.push(arr);\n            }\n          }\n          pn.sort(function(a, b) {\n            const keyA = a.number;\n            const keyB = b.number;\n            if (keyA < keyB) return -1;\n            if (keyA > keyB) return 1;\n            return 0;\n          });\n          let sequence = String(parseInt(pn[pn.length-1].number) + 1);\n          for (let e = sequence.length; e < 4; e++) {\n            sequence = '0' + sequence;\n          }\n          if(parseInt(pn[pn.length-1][2] != y)) {\n            value = { label: 'IN', year: y, number: '0001', type: type };\n          } else {\n            value = { label: 'IN', year: y, number: sequence, type: type };\n          }\n          this.inspectNumber = value.label + '-' + value.type + '-' + value.year + '-' + value.number;\n        })\n        .catch(err => console.log(err));\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Template',\n          action: () => this.editTemplateMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Template',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getTemplates();\n    this.getAttributes();\n    this.getDateToday();\n    this.getInspectionTypes();\n    this.getItemTypes();\n    this.getOrderItemAttributes();\n  },\n};\n",{"version":3,"sources":["templates.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2QA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"templates.vue","sourceRoot":"src/views/app/inspection","sourcesContent":["<template>\n  <!-- ============ Body content start ============= -->\n  <div class=\"main-content\">\n    <breadcumb :page=\"'Templates'\" :folder=\"'Inspection'\" />\n    <!-- ICON BG -->\n    <b-row>\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\">\n          <i class=\"i-File\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Templates</p>\n            <p class=\"inline text-primary text-24 line-height-1 mb-2\">{{ this.templates.length }}</p>\n          </div>\n        </b-card>\n      </b-col>\n      <b-col lg=\"6\" md=\"6\" sm=\"12\">\n        <b-card class=\"card-icon-bg card-icon-bg-primary o-hidden mb-30 text-center\">\n          <i class=\"i-Calendar\"></i>\n          <div class=\"content\">\n            <p class=\"text-muted mt-2 mb-0\">Date</p>\n            <p class=\"text-primary text-24 line-height-1 mb-2\"><nobr>{{ this.date }}</nobr></p>\n          </div>\n        </b-card>\n      </b-col>\n    </b-row>\n\n    <!-- ######################################## -->\n    <!-- ########### TEMPLATES SECTION ########## -->\n    <!-- ######################################## -->\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0 mb-3\">\n            <b-row class=\"ml-3\">\n              <i class=\"nav-icon i-Add mt-3\" style=\"font-size: 20px\" id=\"new-template-section\" @click=\"emptyInput('add')\"></i>\n              <h5 class=\"card-title border-bottom p-3 mb-2\">New Template</h5>\n            </b-row>\n            <div class=\"ml-3 mr-3\" v-show=\"show\">\n              <b-form>\n                <b-row class=\"ml-3 mr-3 mt-3\">\n                  <b-col md=\"12\">\n                    <b-form-input id=\"input-1\" v-model=\"TempName\" type=\"text\" required placeholder=\"Template Name\" ></b-form-input>\n                  </b-col>\n                </b-row>\n                <b-row class=\"ml-3 mr-3 mt-3\">\n                  <b-col md=\"12\" v-if=\"updateStatus\">\n                    <multiselect\n                        v-model=\"selectedInspectionType\" tag-placeholder=\"Choose Inspection Type\" placeholder=\"Search inspection type\" label=\"txtInspectionType\" \n                        track-by=\"id\" :options=\"optionInspectionTypes\" :multiple=\"false\" :taggable=\"false\" :close-on-select=\"true\"\n                        :searchable=\"true\" open-direction=\"bottom\">\n                    </multiselect>\n                  </b-col>\n                  <b-col md=\"6\" v-if=\"!updateStatus\">\n                    <multiselect\n                        v-model=\"selectedInspectionType\" tag-placeholder=\"Choose Inspection Type\" placeholder=\"Search inspection type\" label=\"txtInspectionType\" \n                        track-by=\"id\" :options=\"optionInspectionTypes\" :multiple=\"false\" :taggable=\"false\" :close-on-select=\"true\"\n                        :searchable=\"true\" open-direction=\"bottom\">\n                    </multiselect>\n                  </b-col>\n                  <b-col md=\"6\" v-if=\"!updateStatus\">\n                    <multiselect\n                        v-model=\"selectedItemTypes\" tag-placeholder=\"Choose Item Type\" placeholder=\"Search item type\" label=\"txtItemType\" \n                        track-by=\"id\" :options=\"optionItemTypes\" :multiple=\"true\" :taggable=\"false\" :close-on-select=\"false\"\n                        :searchable=\"true\" open-direction=\"bottom\" @input=\"onChange($event)\" @remove=\"onChange($event)\">\n                    </multiselect>\n                  </b-col>\n                </b-row>\n\n                <!-- ATTRIBUTES -->\n                <div v-if=\"selectedItemTypes != ''\">\n                  <b-row md=\"12\" class=\"ml-5 mr-5 mt-3 mb-3\" v-for=\"element in filteredAttributes\" :key=\"element.id\">\n                    <h5 class=\"mb-1\">{{ element.type }}</h5>\n                    <b-col md=\"12\" v-for=\"atts in element.attributes\" :key=\"atts.id\">\n                      <b-form-checkbox-group v-model=\"selectedAttributes\" :options=\"atts\" multiple\n                        value-field=\"id\" text-field=\"txtNameAttribute\"></b-form-checkbox-group>\n                    </b-col>\n                  </b-row>\n                </div>\n\n              <!-- NEW TEMPLATE / UPDATE TEMPLATE BUTTONS -->\n              <b-row class=\"ml-3 mt-5 mr-3\">\n                <b-col md=\"6\" v-if=\"!updateStatus\">\n                  <b-button @click=\"emptyInput\" block variant=\"outline-danger\">Delete Input</b-button>\n                </b-col>\n                <b-col md=\"6\" v-else-if=\"updateStatus\">\n                  <b-button @click=\"emptyInput\" block variant=\"outline-info\">Cancel</b-button>\n                </b-col>\n                <b-col md=\"6\" v-if=\"!updateStatus\">\n                  <b-button @click=\"addTemplate\" block variant=\"success\" :disabled=\"disabled\">Add Template</b-button>\n                </b-col>\n                <b-col md=\"6\" v-else-if=\"updateStatus\">\n                  <b-button @click=\"updateTemplate\" block variant=\"warning\" :disabled=\"disabled\">Update Template</b-button>\n                </b-col>\n              </b-row>\n              \n              <!-- ERROR MESSAGE -->\n                <b-row class=\"ml-3 mr-3\">\n                  <b-col md=\"12\" class=\"mt-3\">\n                    <b-alert v-if=\"error\" show variant=\"alert alert-card alert-danger\" dismissible>\n                      <strong class=\"text-capitalize\">Error!</strong> The Input is not valid.\n                    </b-alert>\n                  </b-col>\n                </b-row>\n              </b-form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- ################################################ -->\n    <!-- ########### CREATE INSPECTION SECTION ########## -->\n    <!-- ################################################ -->\n    <div class=\"row\" v-if=\"show1\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0 mb-3\">\n            <b-row class=\"ml-3\">\n              <i class=\"nav-icon i-Add mt-3\" style=\"font-size: 20px\"></i>\n              <h5 class=\"card-title border-bottom p-3 mb-2\">Create Inspection</h5>\n            </b-row>\n            <div class=\"ml-3 mr-3\">\n              <b-form @submit.prevent=\"$bvModal.show('modal-inspection')\">\n                <b-row class=\"ml-3 mr-3 mt-3\">\n                  <b-col md=\"4\">\n                    <b-form-group label=\"Name:\" label-size=\"sm\">\n                      <b-form-input v-model=\"selInspectionName\" type=\"text\" required :disabled=\"true\"></b-form-input>\n                    </b-form-group>\n                  </b-col>\n                  <b-col md=\"4\">\n                    <b-form-group label=\"Type:\" label-size=\"sm\">\n                      <b-form-input v-model=\"selInspectionType\" type=\"text\" required :disabled=\"true\"></b-form-input>\n                    </b-form-group>\n                  </b-col>\n                  <b-col md=\"4\">\n                    <b-form-group label=\"Initial:\" label-size=\"sm\">\n                      <b-form-input v-model=\"selInspectionInitial\" type=\"text\" required :disabled=\"true\"></b-form-input>\n                    </b-form-group>\n                  </b-col>\n                </b-row>\n                <!-- DEVICE -->\n                <b-row class=\"ml-3 mr-3 mt-3\">\n                  <b-col md=\"12\">\n                     <label class=\"typo__label\">Order Device:</label>\n                    <multiselect\n                        v-model=\"selOrderDevice\" placeholder=\"Choose Order Device\" track-by=\"id\" \n                        :options=\"orderDevices\" :multiple=\"false\" :taggable=\"true\" :close-on-select=\"true\" :searchable=\"true\" \n                        open-direction=\"bottom\" :custom-label=\"getOrderDeviceLabel\">\n                    </multiselect>\n                  </b-col>\n                </b-row>\n                <!-- ORDER ITEMS -->\n                <b-row class=\"ml-3 mr-3 mt-3\">\n                  <b-col md=\"12\">\n                     <label class=\"typo__label\">Order Items:</label>\n                    <multiselect\n                        v-model=\"selOrderItems\" placeholder=\"Choose Order Item\" track-by=\"id\" \n                        :options=\"orderItems\" :multiple=\"true\" :taggable=\"true\" :close-on-select=\"false\" :searchable=\"true\" \n                        open-direction=\"bottom\" :custom-label=\"getOrderItemLabel\">\n                    </multiselect>\n                  </b-col>\n                </b-row>\n                <div class=\"ml-3 mr-3 mt-3\" v-show=\"selOrderItems.length >= 1\">\n                  <h5 class=\"mt-4 ml-4 mr-3\">Amount of Samples</h5>\n                  <b-row class=\"ml-3 mr-3 mt-2\" v-for=\"item in selOrderItems\" :key=\"item.id\">\n                    <b-input-group class=\"mt-2 ml-3 mr-3\" :prepend=\"`${item.idOrder.txtOrderNumber}  |  ${item.idItem.txtDescription} - ${item.idItem.txtArticleNumber}`\" >\n                      <b-form-input v-model=\"item.testAmount\" type=\"number\" min=1 required></b-form-input>\n                    </b-input-group>\n                  </b-row>\n                </div>\n\n                <!-- SAMPLES -->\n                <div v-if=\"selectedItemTypes != ''\">\n                  <b-row md=\"12\" class=\"ml-5 mr-5 mt-3 mb-3\" v-for=\"element in filteredAttributes\" :key=\"element.id\">\n                    <h5 class=\"mb-1\">{{ element.type }}</h5>\n                    <b-col md=\"12\" v-for=\"atts in element.attributes\" :key=\"atts.id\">\n                      <b-form-checkbox-group v-model=\"selectedAttributes\" :options=\"atts\" multiple\n                        value-field=\"id\" text-field=\"txtNameAttribute\"></b-form-checkbox-group>\n                    </b-col>\n                  </b-row>\n                </div>\n\n              <!-- NEW INSPECTION BUTTONS -->\n              <b-row class=\"ml-3 mt-5 mr-3\">\n                <b-col md=\"6\">\n                  <b-button @click=\"emptyInspectionInput\" block variant=\"outline-info\">Cancel</b-button>\n                </b-col>\n                <b-col md=\"6\">\n                  <b-button type=\"submit\" block variant=\"success\" :disabled=\"selOrderItems.length <= 0\">Create Inspection</b-button>\n                </b-col>\n              </b-row>\n              \n              <!-- ERROR MESSAGE -->\n                <b-row class=\"ml-3 mr-3\">\n                  <b-col md=\"12\" class=\"mt-3\">\n                    <b-alert v-if=\"error\" show variant=\"alert alert-card alert-danger\" dismissible>\n                      <strong class=\"text-capitalize\">Error!</strong> The Input is not valid.\n                    </b-alert>\n                  </b-col>\n                </b-row>\n              </b-form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- <b-button size=\"m\" variant=\"warning\" block @click=\"showTempAtts\">Show Template Attributes</b-button> -->\n\n    <!-- INSPECTION MODAL -->\n    <b-modal id=\"modal-inspection\" hide-footer title=\"Please Confirm\">\n      <div class=\"d-block text-center mt-3 mb-4\">\n        <p>Are you sure you want to create the Inspection? Please make sure you have checked your selected Items and Device as well as the chosen Inspection Template.</p>\n      </div>\n      <b-row class=\"mt-3\" >\n        <b-col md=\"6\">\n          <b-button size=\"sm\" variant=\"danger\" block @click=\"emptyInspectionInput(); $bvModal.hide('modal-inspection')\">No, cancel it!</b-button>\n        </b-col>\n        <b-col md=\"6\">\n          <b-button size=\"sm\" variant=\"success\" block @click=\"addInspection(); $bvModal.hide('modal-inspection')\">Yes, create the inspection.</b-button>\n        </b-col>\n      </b-row>\n    </b-modal>\n\n    <!-- GRID TEMPLATES -->\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"card mb-30\">\n          <div class=\"card-body p-0\">\n            <AgGridVue class=\"ag-theme-alpine\"\n                id=\"gridItems\"\n                :defaultColDef=\"defaultColDef\"\n                :columnDefs=\"columnDefs\"\n                :rowSelection=\"rowSelection\"\n                :rowData=\"rowData\"\n                :gridOptions=\"gridOptions\"\n                :suppressRowClickSelection=\"true\"\n                :excelStyles=\"excelStyles\"\n                @row-selected=\"onRowSelected\"\n                :masterDetail=\"true\"\n                :detailCellRendererParams=\"detailCellRendererParams\"\n                :getContextMenuItems=\"getContextMenu\"\n                :pagination=\"true\"\n                :paginationPageSize=\"10\"\n                :domLayout=\"domLayout\"\n                :modules=\"modules\">\n            </AgGridVue>\n            <div class=\"ml-3 mr-3 mt-2 mb-2 text-right\">\n                Page Size:\n                <select @change=\"onPageSizeChanged\" id=\"page-size\">\n                    <option value=\"10\" selected=\"\">10</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"50\">50</option>\n                    <option value=\"100\">100</option>\n                    <option value=\"200\">200</option>\n                </select>\n                <b-button @click=\"onBtExport\" class=\"ml-3\" size=\"sm\" variant=\"outline-success\">Export Excel</b-button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </div>\n  <!-- ============ Body content End ============= -->\n</template>\n<script>\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Template\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowDataMod: null,\n      rowSelection: null,\n      defaultColDef: null,\n      frameworkComponents: null,\n      detailCellRendererParams: null,\n      domLayout: null,\n      excelStyles: null,\n      modules: AllModules,\n\n      // VUE VARIABLES INSPECTION\n      orderItems: [],\n      orderDevices: [],\n      orderItemAttributes: [],\n      selInspectionName: null,\n      selInspectionType: null,\n      selInspectionInitial: null,\n      selInspectionTemplate: null,\n      selOrderItems: [],\n      selOrderDevice: [],\n      templateAttributes: [],\n      tempAtts: [],\n      orderAtts: [],\n      inspections: [],\n      inspectNumber: null,\n\n      // VUE VARIABLES\n      templates: [],\n      attributes: [],\n      filteredAttributes: [],\n      selectedAttributes: [],\n      selectedInspectionType: [],\n      selectedItemTypes: [],\n      show: false,\n      show1: false,\n      show2: false,\n      TempName: null,\n      date: null,\n      error: false,\n      updateStatus: false,\n      updateId: null,\n      optionItemTypes: [],\n      optionInspectionTypes: [],\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [\n      {headerName: \"Template Name\", field: \"txtInspectionName\", filter: 'agTextColumnFilter', cellRenderer: 'agGroupCellRenderer', checkboxSelection: true,},\n      {headerName: \"Template Type\", field: \"idInspectionType.txtInspectionType\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', },\n      {headerName: \"Template Initial\", field: \"idInspectionType.txtInspectionInitial\", filter: 'agTextColumnFilter', cellEditor: 'agRichSelectCellEditor', },\n    ],\n    this.defaultColDef = { flex: 1, editable: false, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.detailCellRendererParams = {\n      detailGridOptions: {\n        rowSelection: 'single',\n        suppressRowClickSelection: true,\n        enableRangeSelection: true,\n        pagination: true,\n        paginationAutoPageSize: 20,\n        columnDefs: [\n          {headerName: \"Item Type\", field: \"idItemType.txtItemType\",},\n          {headerName: \"Attribute Key\", field: \"txtKeyAttribute\",},\n          {headerName: \"Attribute Name\", field: \"txtNameAttribute\",},\n          {headerName: \"Default Value\", field: \"txtValueDefault\",},\n          {headerName: \"Value Type\", field: \"txtValueType\",},\n          {headerName: \"Parameter\", field: \"txtParameter\",},\n        ],\n        defaultColDef: { flex: 1, editable: false, resizable: true, },\n      },\n      getDetailRowData: params => {\n        params.successCallback(params.data.idInspectionTemplateAttribute);\n      },\n    }\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n  },\n  mounted() {\n    if (window.InspectionTemplateColState)\n       this.gridOptions.columnApi.setColumnState(window.InspectionTemplateColState);\n    else\n      this.gridApi = this.gridOptions.api;\n      this.gridColumnApi = this.gridOptions.columnApi;\n  },\n  computed: {\n    disabled: function () {\n      return !this.TempName ? true : !this.selectedInspectionType ? true : !this.selectedItemTypes ? true : false; \n    },\n  },\n  methods: {\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    saveState() {\n      window.InspectionTemplateColState = this.gridOptions.columnApi.getColumnState();\n    },\n    restoreState() {\n      window.InspectionTemplateColState = null;\n    },\n    onSubmit() {\n      console.log('inspection created!')\n    },\n    onChange(itemTypes) {\n      this.selectedAttributes = null;\n      this.filteredAttributes = []\n      for (let i = 0; i < itemTypes.length; i++) {\n        let el = itemTypes[i];\n        let element = { type: null, attributes: [], }\n        element['type'] = el.txtItemType;\n        element['attributes'].push(this.attributes.filter(e => e.idItemType.txtItemType == el.txtItemType))\n        this.filteredAttributes[i] = element;\n      }\n    },\n    onRowSelected(event) {\n      this.getOrderItems();\n      this.getOrderDevices();\n      this.selInspectionName = event.node.data.txtInspectionName;\n      this.selInspectionType = event.node.data.idInspectionType.txtInspectionType;\n      this.selInspectionInitial = event.node.data.idInspectionType;\n      this.selInspectionTemplate = event.node.data.id;\n      this.getSelectedTemplateAttributes(event.node.data.id);\n      this.getInspectionTemplateAttributes();\n      this.getInspectionNumber(event.node.data.idInspectionType.txtInspectionInitial);\n      this.show1 = this.show1 ? false : true;\n      document.documentElement.scrollTop = 0;\n    },\n    addInspection() {\n      let today = new Date();\n      let date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n      let endpoint = `/api/inspection/`;\n      apiService(endpoint, \"POST\", {\n        idOrderDevice: this.selOrderDevice.id, \n        txtInspectionStatus: 'Work In Progress', \n        idInspectionType: this.selInspectionInitial,\n        txtInspectionNumber: this.inspectNumber,\n      })\n      .then(response => {\n        if(response != 'ERROR') {\n          for (let i = 0; i < this.selOrderItems.length; i++) {\n            for (let t = 0; t < this.selOrderItems[i].testAmount; t++) {\n              this.addSample(response.id, this.selOrderItems[i])\n            }\n          }\n          this.emptyInspectionInput();\n          localStorage.setItem('InspectionID', response.id);\n          this.$router.push('inspection/');\n        }\n      })\n      .catch(err => console.log(err));\n    },\n    addSample(InspectId, OrderItem) {\n      let endpoint = `/api/sample/`;\n      apiService(endpoint, \"POST\", { \n        idInspection: InspectId, \n        idOrderItem: OrderItem.id, \n        txtSampleStatus: 'Not Approved', \n      })\n      .then(response => {\n        if(response != 'ERROR') {\n          let el = this.tempAtts.filter(function(e) {return this.indexOf(e.id) != -1}, this.templateAttributes);\n          let atts = el.filter(e => e.idItemType === OrderItem.idItem.idItemType);\n          this.getSelectedOrderItemAttributes(OrderItem, atts);\n          this.addSampleAttribute(response.id, atts)\n        }\n      })\n      .catch(err => console.log(err));\n    },\n    addSampleAttribute(SampleId, atts) {\n      let endpoint = `/api/sample-attribute/`;\n      for (let i = 0; i < atts.length; i++) {\n        apiService(endpoint, \"POST\", { \n          txtKeyAttribute: atts[i].txtKeyAttribute, \n          txtNameAttribute: atts[i].txtNameAttribute, \n          txtValueAttribute: atts[i].txtValueDefault, \n          txtValueType: atts[i].txtValueType, \n          txtParameter: atts[i].txtParameter, \n          txtValueMin: atts[i].txtValueMin, \n          txtValueMax: atts[i].txtValueMax, \n          txtValueTolerance: atts[i].txtValueTolerance, \n          idSample: SampleId, \n        })\n      }\n    },\n    getOrderItemLabel(e) {\n      return `${e.idOrder.txtOrderNumber}  |  ${e.idItem.txtDescription} - ${e.idItem.txtArticleNumber}`\n    },\n    getOrderDeviceLabel(e) {\n      return `${e.idOrder.txtOrderNumber}  |  ${e.idDevice.idModel.txtModelName} - ${e.idDevice.txtSerialNumber}`\n    },\n    addTemplate() {\n      let endpoint = `/api/inspection-template/`;\n      apiService(endpoint, \"POST\", { \n        txtInspectionName: this.TempName,\n        idInspectionType: this.selectedInspectionType.id,\n        idInspectionTemplateAttribute: this.selectedAttributes, \n        })\n        .then(response => {\n          if (response){\n            this.getTemplates();\n            this.emptyInput();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    editTemplateMenu(params) {\n      this.emptyInput();\n      let sel = params.node.data;\n      this.TempName = sel.txtInspectionName;\n      this.selectedInspectionType = sel.idInspectionType;\n      this.updateStatus = true;\n      this.updateId = sel.id;\n      this.show = true;\n      document.documentElement.scrollTop = 0;\n    },\n    async updateTemplate() {\n      let endpoint = `/api/inspection-template/${this.updateId}/`;\n      await apiService(endpoint, \"PATCH\", { \n        txtInspectionName: this.TempName,\n        idInspectionType: this.selectedInspectionType.id })\n        .then(response => {\n          if (response != 'ERROR'){\n            this.emptyInput();\n            this.getTemplates();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Template?\", {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"YES\",\n          cancelTitle: \"NO\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { if (value) { this.deleteTemplate(params); } })\n        .catch(err => console.log(err));\n    },\n    openModalInspection(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to create the Inspection? Please make sure you have checked your selected Items as well as the inspection type and Device.\", {\n          title: \"Please Confirm\", size: \"m\", buttonSize: \"sm\", okVariant: \"danger\", okTitle: \"Yes, create the Inspection.\",\n          cancelTitle: \"No, cancel it!\", footerClass: \"p-2\", hideHeaderClose: false, centered: true })\n        .then(value => { \n          if (value) { \n            console.log('Inspection created')\n          } else {\n            console.log('Inspection cancelled')\n            this.emptyInspectionInput();\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    async deleteTemplate(params) {\n      let endpoint = `/api/inspection-template/${params.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"DELETE\");\n        this.getTemplates();\n      }\n      catch (err) {\n        console.log(err);\n      }\n    },\n    emptyInput(event) {\n      this.selectedInspectionType = this.selectedItemTypes = this.ParameterTags = [];\n      this.TempName = null;\n      this.selectedAttributes = null;\n      if(event != 'add') {\n        this.show = false;\n      } else {\n        this.updateStatus = false;\n        this.show = !this.show;\n      }\n    },\n    emptyInspectionInput() {\n      this.show1 = false;\n      this.selInspection = null;\n      this.selOrderItems = this.selOrderDevice = [];\n      this.getTemplates();\n    },\n    getTemplates() {\n      if (!this.error) {\n        this.templates = [];\n        let endpoint = `/api/inspection-template-list/`;\n        apiService(endpoint)\n          .then(data => {\n            this.templates.push(...data.results);\n            this.rowData = this.templates\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getAttributes() {\n      if (!this.error) {\n        this.attributes = [];\n        let endpoint = `/api/inspection-template-attribute-list/`;\n        apiService(endpoint)\n          .then(data => { this.attributes.push(...data.results); })\n          .catch(err => console.log(err));\n      }\n    },\n    showTempAtts() {\n      // this.getSelectedTemplateAttributes(2);\n      // console.log(this.templateAttributes)\n    },\n    getSelectedTemplateAttributes(id) {\n      let endpoint = `/api/inspection-template/${id}/`;\n      apiService(endpoint)\n        .then(data => {\n          this.templateAttributes.push(...data.idInspectionTemplateAttribute);\n        })\n        .catch(err => console.log(err));\n    },\n    getInspectionTemplateAttributes() {\n      let endpoint = `/api/inspection-template-attribute/`;\n      apiService(endpoint)\n        .then(data => {\n          this.tempAtts.push(...data.results)\n        })\n        .catch(err => console.log(err));\n    },\n    getSelectedOrderItemAttributes(OrderItem, atts) {\n      this.orderAtts = this.orderItemAttributes.filter(e => e.idOrderItem === OrderItem.id)\n      if(this.orderAtts.length >= 1) {\n        let el = atts.map(x => {\n          const item = this.orderAtts.find(({ txtKeyAttribute }) => txtKeyAttribute === x.txtKeyAttribute);\n          if(item != undefined) {\n            x.txtValueDefault = item.txtValueAttribute;\n            x.txtParameter = item.txtParameter;\n            return x;\n          } else {\n            return x;\n          }\n        })\n      }\n      return atts;\n    },\n    getItemTypes() {\n      if (!this.error) {\n        this.optionItemTypes = [];\n        let endpoint = `/api/item-type/`;\n        apiService(endpoint)\n          .then(data => {\n            this.optionItemTypes.push(...data.results);\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getInspectionTypes() {\n      if (!this.error) {\n        this.optionInspectionTypes = [];\n        let endpoint = `/api/inspection-type/`;\n        apiService(endpoint)\n          .then(data => {\n            this.optionInspectionTypes.push(...data.results);\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getOrderItems() {\n      this.orderItems = [];\n      let endpoint = `/api/order-item-list/`;\n      apiService(endpoint)\n        .then(data => { this.orderItems.push(...data.results); })\n        .catch(err => console.log(err));\n    },\n    getOrderItemAttributes() {\n      this.orderItemAttributes = [];\n      let endpoint = `/api/order-item-attribute/`;\n      apiService(endpoint)\n        .then(data => { this.orderItemAttributes.push(...data.results); })\n        .catch(err => console.log(err));\n    },\n    getOrderDevices() {\n      this.orderDevices = [];\n      let endpoint = `/api/order-device-list/`;\n      apiService(endpoint)\n        .then(data => { \n          this.orderDevices.push(...data.results); \n          this.orderDevices = this.orderDevices.filter(e => e.txtDeliveryStatus === 'Delivered')\n          })\n        .catch(err => console.log(err));\n    },\n    getInspectionNumber(type) {\n      let endpoint = `/api/inspection/`;\n      apiService(endpoint)\n        .then(data => {\n          this.inspections.push(...data.results);\n          let d = new Date();\n          let y = d.getFullYear();\n          let pn = [];\n          let value = null;\n          for (let i = 0; i < this.inspections.length; i++) {\n            let el = this.inspections[i].txtInspectionNumber.split('-');\n            let arr = { label: el[0], type: el[1], year: el[2], number: el[3] };\n            if(arr.year == y) {\n              pn.push(arr);\n            }\n          }\n          pn.sort(function(a, b) {\n            const keyA = a.number;\n            const keyB = b.number;\n            if (keyA < keyB) return -1;\n            if (keyA > keyB) return 1;\n            return 0;\n          });\n          let sequence = String(parseInt(pn[pn.length-1].number) + 1);\n          for (let e = sequence.length; e < 4; e++) {\n            sequence = '0' + sequence;\n          }\n          if(parseInt(pn[pn.length-1][2] != y)) {\n            value = { label: 'IN', year: y, number: '0001', type: type };\n          } else {\n            value = { label: 'IN', year: y, number: sequence, type: type };\n          }\n          this.inspectNumber = value.label + '-' + value.type + '-' + value.year + '-' + value.number;\n        })\n        .catch(err => console.log(err));\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Edit Template',\n          action: () => this.editTemplateMenu(params)\n        },\n        'separator',\n        {\n          name: 'Delete Template',\n          action: () =>  this.openModal(params)\n        },\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getTemplates();\n    this.getAttributes();\n    this.getDateToday();\n    this.getInspectionTypes();\n    this.getItemTypes();\n    this.getOrderItemAttributes();\n  },\n};\n</script>\n\n<style>\n  i:focus,\n  input:focus,\n  select:focus,\n  textarea:focus,\n  button:focus {\n      outline: none;\n  }\n  #new-template-section {\n    cursor: pointer;\n    outline: none;\n  }\n</style>\n"]}]}