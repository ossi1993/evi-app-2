{"remainingRequest":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\manufacturer\\list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\src\\views\\app\\manufacturer\\list.vue","mtime":1601889752448},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Anwender\\SJO\\evi\\evi\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { apiService } from \"@/common/api.service.js\";\nimport { AgGridVue } from '@ag-grid-community/vue';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\n\nexport default {\n  metaInfo: {    \n    title: \"Manufacturer\"\n  },\n  components: {\n    AgGridVue\n  },\n  data() {\n    return {\n      // AG-GRID VARIABLES\n      gridOptions: null,\n      gridApi: null,\n      columnApi: null,\n      columnDefs: null,\n      rowData: null,\n      rowSelection: null,\n      defaultColDef: null,\n      excelStyles: null,\n      frameworkComponents: null,\n      domLayout: null,\n      modules: AllModules,\n\n      // VUE VARIABLES\n      manufacturers: [],\n      show: false,\n      ManName: null,\n      Comment: null,\n      date: null,\n      error: false,\n    };\n  },\n  beforeMount() {\n    this.gridOptions = {};\n    this.columnDefs = [ \n      {headerName: \"Manufacturer\", field: \"txtManufacturerName\", filter: 'agTextColumnFilter', }, \n      {headerName: \"Memo\", field: \"txtComment\", filter: 'agTextColumnFilter', }, \n      ],\n    this.defaultColDef = { flex: 1, editable: true, resizable: true, sortable: true, filter: true, floatingFilter: true, };\n    this.rowSelection = 'single';\n    this.domLayout = 'autoHeight';\n    this.paginationPageSize = 10;\n  },\n  mounted() {\n    this.gridApi = this.gridOptions.api;\n    this.gridColumnApi = this.gridOptions.columnApi;\n  },\n  methods: {\n    onBtExport() {\n      this.gridApi.exportDataAsExcel({});\n    },\n    onPageSizeChanged(newPageSize) {\n      var value = document.getElementById('page-size').value;\n      this.gridApi.paginationSetPageSize(Number(value));\n    },\n    onRowSelected(event) {\n      this.show = this.show ? false : true\n    },\n    addMan() {\n      if (this.ManName) {\n        let endpoint = `/api/manufacturer/`;\n        apiService(endpoint, \"POST\", { \n          txtManufacturerName: this.ManName, \n          txtComment: this.Comment, \n          })\n          .then(response => {\n            if (response != 'ERROR'){\n              this.getMan();\n              this.emptyInput()\n            } else {\n              this.error = true;\n            }\n          })\n        if (this.error) {\n          this.error = false;\n        }\n      }\n    },\n    async updateManufacturerGrid(event) {     \n      let endpoint = `/api/manufacturer/${event.node.data.id}/`;\n      try {\n        await apiService(endpoint, \"PATCH\", { \n          txtManufacturerName: event.node.data.txtManufacturerName,\n        })\n        .catch(err => console.log(err));\n      }\n      catch (err) {\n        console.log(err)\n      }\n    },\n    openModal(params) {\n      this.$bvModal\n        .msgBoxConfirm(\"Are you sure you want to delete the selected Manufacturer? => \" + params.node.data.txtManufacturerName, {\n          title: \"Please Confirm\",\n          size: \"m\",\n          buttonSize: \"sm\",\n          okVariant: \"danger\",\n          okTitle: \"YES\",\n          cancelTitle: \"NO\",\n          footerClass: \"p-2\",\n          hideHeaderClose: false,\n          centered: true\n        })\n        .then(value => {\n          if (value) {\n            this.deleteMan(params);\n          }\n        })\n        .catch(err => console.log(err));\n    },\n    async deleteMan(params) {\n      let endpoint = `/api/manufacturer/${params.node.data.id}/`;\n      await apiService(endpoint, \"DELETE\")\n        .then(response => {\n          if (response != 'ERROR') {\n            this.getMan();\n          } else {\n            this.$bvToast.toast(`Can't delete this entry. Please check if there are dependent entries. Please delete those first!`, {\n              title: 'DELETE WARNING',\n              variant: 'danger',\n              autoHideDelay: 6000,\n              appendToast: false\n            })\n          }\n        })\n    },\n    emptyInput(event) {\n      this.ManName = this.Comment = null;\n      if(event != 'add') {\n        this.show = false;\n      } else {\n        this.show = !this.show;\n      }\n    },\n    getMan() {\n      if (!this.error) {\n        this.manufacturers = [];\n        let endpoint = `/api/manufacturer/`;\n        apiService(endpoint)\n          .then(data => {\n            this.manufacturers.push(...data.results);\n            this.rowData = this.manufacturers\n          })\n          .catch(err => console.log(err));\n      }\n    },\n    getDateToday() {\n      var today = new Date();\n      this.date = today.getDate()+' / '+(today.getMonth()+1)+' / '+today.getFullYear();\n    },\n    getContextMenu(params) {\n      var result = [\n        {\n          name: 'Delete Manufacturer',\n          action: () => this.openModal(params)\n        },\n        'separator',\n        'export'\n      ];\n      return result;\n    },\n  },\n  created() {\n    this.getMan();\n    this.getDateToday();\n  },\n};\n",null]}